/*
 * MITA Notifications Platform REST API
 *
 * The Notifications REST API allows programmatic access to the Notifications Portal message funtionality. To use the REST API, you will need a Notifications Portal Account and an API key and secret. You can generate from the Notifications Portal using the API Key Manager.The REST API takes full advantage of all HTTP headers. Each part of a request and response is meaningful, including the request method (GET/POST, etc.), the individual headers (Location, Content-Type, Accept, etc.), and the response status code (200, 400, 404, etc.). Use of this API assumes a working knowledge of these HTTP components, and general use of RESTful web APIs.
 *
 * The version of the OpenAPI document: v1
 * Contact: notifications.mita@gov.mt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Mita.Notifications.Client.Client;
using Mita.Notifications.Client.Model;

namespace Mita.Notifications.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscribersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method allows for the retrieval of all subscribers stored by the system.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: FirstName, LastName (default),   DisplayName, Email, and MobileNo.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier (optional)</param>
        /// <param name="email">Email Address (optional)</param>
        /// <param name="mobileNo">Mobile Number (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>Subscribers</returns>
        Subscribers GetApiV1Subscribers(Guid? groupId = default(Guid?), string email = default(string), string mobileNo = default(string), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?));

        /// <summary>
        /// This method allows for the retrieval of all subscribers stored by the system.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: FirstName, LastName (default),   DisplayName, Email, and MobileNo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier (optional)</param>
        /// <param name="email">Email Address (optional)</param>
        /// <param name="mobileNo">Mobile Number (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>ApiResponse of Subscribers</returns>
        ApiResponse<Subscribers> GetApiV1SubscribersWithHttpInfo(Guid? groupId = default(Guid?), string email = default(string), string mobileNo = default(string), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?));
        /// <summary>
        /// This method allows for the creation of a new Subscriber.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriberRequest">Subscriber object. (optional)</param>
        /// <returns>Guid</returns>
        Guid PostApiV1Subscribers(CreateSubscriberRequest createSubscriberRequest = default(CreateSubscriberRequest));

        /// <summary>
        /// This method allows for the creation of a new Subscriber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriberRequest">Subscriber object. (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> PostApiV1SubscribersWithHttpInfo(CreateSubscriberRequest createSubscriberRequest = default(CreateSubscriberRequest));
        /// <summary>
        /// This method allows for the deletion of a subscriber stored by the Notifications Portal.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <returns></returns>
        void DeleteApiV1SubscribersBySubscriberId(Guid subscriberId);

        /// <summary>
        /// This method allows for the deletion of a subscriber stored by the Notifications Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApiV1SubscribersBySubscriberIdWithHttpInfo(Guid subscriberId);
        /// <summary>
        /// This method allows for the retrieval of a Subscriber object details.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <returns>Subscriber</returns>
        Subscriber GetApiV1SubscribersBySubscriberId(Guid subscriberId);

        /// <summary>
        /// This method allows for the retrieval of a Subscriber object details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <returns>ApiResponse of Subscriber</returns>
        ApiResponse<Subscriber> GetApiV1SubscribersBySubscriberIdWithHttpInfo(Guid subscriberId);
        /// <summary>
        /// This method allows for the retrieval of the list of groups a subscriber is subscribed to.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <returns>List&lt;Group&gt;</returns>
        List<Group> GetApiV1SubscribersGroupsBySubscriberId(Guid subscriberId);

        /// <summary>
        /// This method allows for the retrieval of the list of groups a subscriber is subscribed to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        ApiResponse<List<Group>> GetApiV1SubscribersGroupsBySubscriberIdWithHttpInfo(Guid subscriberId);
        /// <summary>
        /// This method allows for an application to update an existing Subscriber object.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="updateSubscriberRequest">Subscriber object. (optional)</param>
        /// <returns></returns>
        void PutApiV1SubscribersBySubscriberId(Guid subscriberId, UpdateSubscriberRequest updateSubscriberRequest = default(UpdateSubscriberRequest));

        /// <summary>
        /// This method allows for an application to update an existing Subscriber object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="updateSubscriberRequest">Subscriber object. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutApiV1SubscribersBySubscriberIdWithHttpInfo(Guid subscriberId, UpdateSubscriberRequest updateSubscriberRequest = default(UpdateSubscriberRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscribersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// This method allows for the retrieval of all subscribers stored by the system.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: FirstName, LastName (default),   DisplayName, Email, and MobileNo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier (optional)</param>
        /// <param name="email">Email Address (optional)</param>
        /// <param name="mobileNo">Mobile Number (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subscribers</returns>
        System.Threading.Tasks.Task<Subscribers> GetApiV1SubscribersAsync(Guid? groupId = default(Guid?), string email = default(string), string mobileNo = default(string), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for the retrieval of all subscribers stored by the system.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: FirstName, LastName (default),   DisplayName, Email, and MobileNo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier (optional)</param>
        /// <param name="email">Email Address (optional)</param>
        /// <param name="mobileNo">Mobile Number (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subscribers)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscribers>> GetApiV1SubscribersWithHttpInfoAsync(Guid? groupId = default(Guid?), string email = default(string), string mobileNo = default(string), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows for the creation of a new Subscriber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriberRequest">Subscriber object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> PostApiV1SubscribersAsync(CreateSubscriberRequest createSubscriberRequest = default(CreateSubscriberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for the creation of a new Subscriber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriberRequest">Subscriber object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> PostApiV1SubscribersWithHttpInfoAsync(CreateSubscriberRequest createSubscriberRequest = default(CreateSubscriberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows for the deletion of a subscriber stored by the Notifications Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApiV1SubscribersBySubscriberIdAsync(Guid subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for the deletion of a subscriber stored by the Notifications Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApiV1SubscribersBySubscriberIdWithHttpInfoAsync(Guid subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows for the retrieval of a Subscriber object details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subscriber</returns>
        System.Threading.Tasks.Task<Subscriber> GetApiV1SubscribersBySubscriberIdAsync(Guid subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for the retrieval of a Subscriber object details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subscriber)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscriber>> GetApiV1SubscribersBySubscriberIdWithHttpInfoAsync(Guid subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows for the retrieval of the list of groups a subscriber is subscribed to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        System.Threading.Tasks.Task<List<Group>> GetApiV1SubscribersGroupsBySubscriberIdAsync(Guid subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for the retrieval of the list of groups a subscriber is subscribed to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Group>>> GetApiV1SubscribersGroupsBySubscriberIdWithHttpInfoAsync(Guid subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows for an application to update an existing Subscriber object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="updateSubscriberRequest">Subscriber object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutApiV1SubscribersBySubscriberIdAsync(Guid subscriberId, UpdateSubscriberRequest updateSubscriberRequest = default(UpdateSubscriberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for an application to update an existing Subscriber object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="updateSubscriberRequest">Subscriber object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutApiV1SubscribersBySubscriberIdWithHttpInfoAsync(Guid subscriberId, UpdateSubscriberRequest updateSubscriberRequest = default(UpdateSubscriberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscribersApi : ISubscribersApiSync, ISubscribersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscribersApi : ISubscribersApi
    {
        private Mita.Notifications.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public SubscribersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SubscribersApi(string basePath)
        {
            this.Configuration = Mita.Notifications.Client.Client.Configuration.MergeConfigurations(
                Mita.Notifications.Client.Client.GlobalConfiguration.Instance,
                new Mita.Notifications.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Mita.Notifications.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Mita.Notifications.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribersApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SubscribersApi(Mita.Notifications.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Mita.Notifications.Client.Client.Configuration.MergeConfigurations(
                Mita.Notifications.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Mita.Notifications.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Mita.Notifications.Client.Client.Configuration.DefaultExceptionFactory;
        }
        
        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Mita.Notifications.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Mita.Notifications.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Mita.Notifications.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mita.Notifications.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mita.Notifications.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// This method allows for the retrieval of all subscribers stored by the system.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: FirstName, LastName (default),   DisplayName, Email, and MobileNo. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier (optional)</param>
        /// <param name="email">Email Address (optional)</param>
        /// <param name="mobileNo">Mobile Number (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>Subscribers</returns>
        public Subscribers GetApiV1Subscribers(Guid? groupId = default(Guid?), string email = default(string), string mobileNo = default(string), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?))
        {
            Mita.Notifications.Client.Client.ApiResponse<Subscribers> localVarResponse = GetApiV1SubscribersWithHttpInfo(groupId, email, mobileNo, pageIndex, pageSize, sortField, sortDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of all subscribers stored by the system.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: FirstName, LastName (default),   DisplayName, Email, and MobileNo. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier (optional)</param>
        /// <param name="email">Email Address (optional)</param>
        /// <param name="mobileNo">Mobile Number (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>ApiResponse of Subscribers</returns>
        public Mita.Notifications.Client.Client.ApiResponse<Subscribers> GetApiV1SubscribersWithHttpInfo(Guid? groupId = default(Guid?), string email = default(string), string mobileNo = default(string), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "GroupId", groupId));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "Email", email));
            }
            if (mobileNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "MobileNo", mobileNo));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (sortField != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortField", sortField));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Subscribers>("/api/v1/subscribers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1Subscribers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the retrieval of all subscribers stored by the system.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: FirstName, LastName (default),   DisplayName, Email, and MobileNo. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier (optional)</param>
        /// <param name="email">Email Address (optional)</param>
        /// <param name="mobileNo">Mobile Number (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subscribers</returns>
        public async System.Threading.Tasks.Task<Subscribers> GetApiV1SubscribersAsync(Guid? groupId = default(Guid?), string email = default(string), string mobileNo = default(string), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<Subscribers> localVarResponse = await GetApiV1SubscribersWithHttpInfoAsync(groupId, email, mobileNo, pageIndex, pageSize, sortField, sortDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of all subscribers stored by the system.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: FirstName, LastName (default),   DisplayName, Email, and MobileNo. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier (optional)</param>
        /// <param name="email">Email Address (optional)</param>
        /// <param name="mobileNo">Mobile Number (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subscribers)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<Subscribers>> GetApiV1SubscribersWithHttpInfoAsync(Guid? groupId = default(Guid?), string email = default(string), string mobileNo = default(string), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "GroupId", groupId));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "Email", email));
            }
            if (mobileNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "MobileNo", mobileNo));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (sortField != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortField", sortField));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Subscribers>("/api/v1/subscribers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1Subscribers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the creation of a new Subscriber. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriberRequest">Subscriber object. (optional)</param>
        /// <returns>Guid</returns>
        public Guid PostApiV1Subscribers(CreateSubscriberRequest createSubscriberRequest = default(CreateSubscriberRequest))
        {
            Mita.Notifications.Client.Client.ApiResponse<Guid> localVarResponse = PostApiV1SubscribersWithHttpInfo(createSubscriberRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the creation of a new Subscriber. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriberRequest">Subscriber object. (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Mita.Notifications.Client.Client.ApiResponse<Guid> PostApiV1SubscribersWithHttpInfo(CreateSubscriberRequest createSubscriberRequest = default(CreateSubscriberRequest))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createSubscriberRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Guid>("/api/v1/subscribers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiV1Subscribers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the creation of a new Subscriber. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriberRequest">Subscriber object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> PostApiV1SubscribersAsync(CreateSubscriberRequest createSubscriberRequest = default(CreateSubscriberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<Guid> localVarResponse = await PostApiV1SubscribersWithHttpInfoAsync(createSubscriberRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the creation of a new Subscriber. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriberRequest">Subscriber object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<Guid>> PostApiV1SubscribersWithHttpInfoAsync(CreateSubscriberRequest createSubscriberRequest = default(CreateSubscriberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createSubscriberRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Guid>("/api/v1/subscribers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiV1Subscribers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the deletion of a subscriber stored by the Notifications Portal. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <returns></returns>
        public void DeleteApiV1SubscribersBySubscriberId(Guid subscriberId)
        {
            DeleteApiV1SubscribersBySubscriberIdWithHttpInfo(subscriberId);
        }

        /// <summary>
        /// This method allows for the deletion of a subscriber stored by the Notifications Portal. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mita.Notifications.Client.Client.ApiResponse<Object> DeleteApiV1SubscribersBySubscriberIdWithHttpInfo(Guid subscriberId)
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscriberId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/subscribers/{subscriberId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiV1SubscribersBySubscriberId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the deletion of a subscriber stored by the Notifications Portal. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApiV1SubscribersBySubscriberIdAsync(Guid subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteApiV1SubscribersBySubscriberIdWithHttpInfoAsync(subscriberId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This method allows for the deletion of a subscriber stored by the Notifications Portal. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<Object>> DeleteApiV1SubscribersBySubscriberIdWithHttpInfoAsync(Guid subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscriberId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/subscribers/{subscriberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiV1SubscribersBySubscriberId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the retrieval of a Subscriber object details. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <returns>Subscriber</returns>
        public Subscriber GetApiV1SubscribersBySubscriberId(Guid subscriberId)
        {
            Mita.Notifications.Client.Client.ApiResponse<Subscriber> localVarResponse = GetApiV1SubscribersBySubscriberIdWithHttpInfo(subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of a Subscriber object details. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <returns>ApiResponse of Subscriber</returns>
        public Mita.Notifications.Client.Client.ApiResponse<Subscriber> GetApiV1SubscribersBySubscriberIdWithHttpInfo(Guid subscriberId)
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscriberId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Subscriber>("/api/v1/subscribers/{subscriberId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1SubscribersBySubscriberId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the retrieval of a Subscriber object details. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subscriber</returns>
        public async System.Threading.Tasks.Task<Subscriber> GetApiV1SubscribersBySubscriberIdAsync(Guid subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<Subscriber> localVarResponse = await GetApiV1SubscribersBySubscriberIdWithHttpInfoAsync(subscriberId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of a Subscriber object details. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subscriber)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<Subscriber>> GetApiV1SubscribersBySubscriberIdWithHttpInfoAsync(Guid subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscriberId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Subscriber>("/api/v1/subscribers/{subscriberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1SubscribersBySubscriberId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the retrieval of the list of groups a subscriber is subscribed to. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <returns>List&lt;Group&gt;</returns>
        public List<Group> GetApiV1SubscribersGroupsBySubscriberId(Guid subscriberId)
        {
            Mita.Notifications.Client.Client.ApiResponse<List<Group>> localVarResponse = GetApiV1SubscribersGroupsBySubscriberIdWithHttpInfo(subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of the list of groups a subscriber is subscribed to. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        public Mita.Notifications.Client.Client.ApiResponse<List<Group>> GetApiV1SubscribersGroupsBySubscriberIdWithHttpInfo(Guid subscriberId)
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscriberId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Group>>("/api/v1/subscribers/{subscriberId}/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1SubscribersGroupsBySubscriberId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the retrieval of the list of groups a subscriber is subscribed to. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        public async System.Threading.Tasks.Task<List<Group>> GetApiV1SubscribersGroupsBySubscriberIdAsync(Guid subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<List<Group>> localVarResponse = await GetApiV1SubscribersGroupsBySubscriberIdWithHttpInfoAsync(subscriberId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of the list of groups a subscriber is subscribed to. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<List<Group>>> GetApiV1SubscribersGroupsBySubscriberIdWithHttpInfoAsync(Guid subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscriberId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Group>>("/api/v1/subscribers/{subscriberId}/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1SubscribersGroupsBySubscriberId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for an application to update an existing Subscriber object. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="updateSubscriberRequest">Subscriber object. (optional)</param>
        /// <returns></returns>
        public void PutApiV1SubscribersBySubscriberId(Guid subscriberId, UpdateSubscriberRequest updateSubscriberRequest = default(UpdateSubscriberRequest))
        {
            PutApiV1SubscribersBySubscriberIdWithHttpInfo(subscriberId, updateSubscriberRequest);
        }

        /// <summary>
        /// This method allows for an application to update an existing Subscriber object. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="updateSubscriberRequest">Subscriber object. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mita.Notifications.Client.Client.ApiResponse<Object> PutApiV1SubscribersBySubscriberIdWithHttpInfo(Guid subscriberId, UpdateSubscriberRequest updateSubscriberRequest = default(UpdateSubscriberRequest))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscriberId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.Data = updateSubscriberRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v1/subscribers/{subscriberId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutApiV1SubscribersBySubscriberId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for an application to update an existing Subscriber object. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="updateSubscriberRequest">Subscriber object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutApiV1SubscribersBySubscriberIdAsync(Guid subscriberId, UpdateSubscriberRequest updateSubscriberRequest = default(UpdateSubscriberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PutApiV1SubscribersBySubscriberIdWithHttpInfoAsync(subscriberId, updateSubscriberRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This method allows for an application to update an existing Subscriber object. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="updateSubscriberRequest">Subscriber object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<Object>> PutApiV1SubscribersBySubscriberIdWithHttpInfoAsync(Guid subscriberId, UpdateSubscriberRequest updateSubscriberRequest = default(UpdateSubscriberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscriberId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter
            localVarRequestOptions.Data = updateSubscriberRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v1/subscribers/{subscriberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutApiV1SubscribersBySubscriberId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
