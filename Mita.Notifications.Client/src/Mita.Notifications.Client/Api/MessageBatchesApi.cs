/*
 * MITA Notifications Platform REST API
 *
 * The Notifications REST API allows programmatic access to the Notifications Portal message funtionality. To use the REST API, you will need a Notifications Portal Account and an API key and secret. You can generate from the Notifications Portal using the API Key Manager.The REST API takes full advantage of all HTTP headers. Each part of a request and response is meaningful, including the request method (GET/POST, etc.), the individual headers (Location, Content-Type, Accept, etc.), and the response status code (200, 400, 404, etc.). Use of this API assumes a working knowledge of these HTTP components, and general use of RESTful web APIs.
 *
 * The version of the OpenAPI document: v1
 * Contact: notifications.mita@gov.mt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Mita.Notifications.Client.Client;
using Mita.Notifications.Client.Model;

namespace Mita.Notifications.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessageBatchesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method allows an application to delete all messages within a batch.   If a messages are awaiting delivery (Pending status), due to a future scheduled   delivery date, the application will be able to delete batch messages.   If messages are enroute through the service provider channels, deletion will   not be possible.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <returns></returns>
        void DeleteApiV1BatchesByBatchId(Guid batchId);

        /// <summary>
        /// This method allows an application to delete all messages within a batch.   If a messages are awaiting delivery (Pending status), due to a future scheduled   delivery date, the application will be able to delete batch messages.   If messages are enroute through the service provider channels, deletion will   not be possible.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApiV1BatchesByBatchIdWithHttpInfo(Guid batchId);
        /// <summary>
        /// This method allows for the retrieval of multiple delivery reports (DLR) for all   the messages within a batch. Each delivery report will contain the status of the   submitted message and the original submitted message details. This method will be used   by an application to determine the status of the submitted message at any point in time.   Note, that delivery reports are also provided through the provided Callback URL (Recommended   Method) when submitting a new message request. This allows an application to receive the   delivery report instantaneously when the status of a message has changed.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: Subject, MessageType, MessagePriority,   MessageStatus, ScheduledDeliveryDate, and DateCreated (default).
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier as provided when the original   message request was submitted.</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>DeliveryReports</returns>
        DeliveryReports GetApiV1BatchesMessagesByBatchId(Guid batchId, int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?));

        /// <summary>
        /// This method allows for the retrieval of multiple delivery reports (DLR) for all   the messages within a batch. Each delivery report will contain the status of the   submitted message and the original submitted message details. This method will be used   by an application to determine the status of the submitted message at any point in time.   Note, that delivery reports are also provided through the provided Callback URL (Recommended   Method) when submitting a new message request. This allows an application to receive the   delivery report instantaneously when the status of a message has changed.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: Subject, MessageType, MessagePriority,   MessageStatus, ScheduledDeliveryDate, and DateCreated (default).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier as provided when the original   message request was submitted.</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>ApiResponse of DeliveryReports</returns>
        ApiResponse<DeliveryReports> GetApiV1BatchesMessagesByBatchIdWithHttpInfo(Guid batchId, int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?));
        /// <summary>
        /// This method allows an application to update all messages within a batch.  Note that the update is dependent on the ClientReference and MessageType   fields, that is, if a batch contains multiple message types, only the   messages of the type as defined in the MessageBatchRequest object will be   updated. Also, only the messages identified by the ClientReference will be updated.   Note messages within a batch can be updated if these are awaiting delivery   (Pending status). If messages are enroute through the service provider   channels, an update will not be possible. Also, if message recipients   need to be updated for a single message use the   \&quot;PUT api/v1/messages/{messageId}\&quot; method.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="updateMessageBatchRequest">Message object containing the new message details to be updated. (optional)</param>
        /// <returns>InboundMessageBatch</returns>
        InboundMessageBatch PutApiV1BatchesByBatchId(Guid batchId, UpdateMessageBatchRequest updateMessageBatchRequest = default(UpdateMessageBatchRequest));

        /// <summary>
        /// This method allows an application to update all messages within a batch.  Note that the update is dependent on the ClientReference and MessageType   fields, that is, if a batch contains multiple message types, only the   messages of the type as defined in the MessageBatchRequest object will be   updated. Also, only the messages identified by the ClientReference will be updated.   Note messages within a batch can be updated if these are awaiting delivery   (Pending status). If messages are enroute through the service provider   channels, an update will not be possible. Also, if message recipients   need to be updated for a single message use the   \&quot;PUT api/v1/messages/{messageId}\&quot; method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="updateMessageBatchRequest">Message object containing the new message details to be updated. (optional)</param>
        /// <returns>ApiResponse of InboundMessageBatch</returns>
        ApiResponse<InboundMessageBatch> PutApiV1BatchesByBatchIdWithHttpInfo(Guid batchId, UpdateMessageBatchRequest updateMessageBatchRequest = default(UpdateMessageBatchRequest));
        /// <summary>
        /// This method allows an application to update the Scheduled Delivery Date field   for all messages within a batch. Note, messages within a batch can be updated   if these are awaiting delivery (Pending status). If messages are enroute   through the service provider channels, an update will not be possible.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="updateScheduledMessageBatchRequest">MessageSchedule object containing the Scheduled Delivery Date to be updated. (optional)</param>
        /// <returns></returns>
        void PutApiV1BatchesSchedulesByBatchId(Guid batchId, UpdateScheduledMessageBatchRequest updateScheduledMessageBatchRequest = default(UpdateScheduledMessageBatchRequest));

        /// <summary>
        /// This method allows an application to update the Scheduled Delivery Date field   for all messages within a batch. Note, messages within a batch can be updated   if these are awaiting delivery (Pending status). If messages are enroute   through the service provider channels, an update will not be possible.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="updateScheduledMessageBatchRequest">MessageSchedule object containing the Scheduled Delivery Date to be updated. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutApiV1BatchesSchedulesByBatchIdWithHttpInfo(Guid batchId, UpdateScheduledMessageBatchRequest updateScheduledMessageBatchRequest = default(UpdateScheduledMessageBatchRequest));
        /// <summary>
        /// This method allows an application to send multiple message types   within the same request. The method allows an application to send   messages to either individual or multiple recipients. This method is   also useful in scenarios where different messages (body text) need   to be sent to a number of recipients.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageRequest">MessageRequests object containing a collection of Message objects to be sent. (optional)</param>
        /// <returns>List&lt;InboundMessageBatch&gt;</returns>
        List<InboundMessageBatch> PostApiV1Batches(List<MessageRequest> messageRequest = default(List<MessageRequest>));

        /// <summary>
        /// This method allows an application to send multiple message types   within the same request. The method allows an application to send   messages to either individual or multiple recipients. This method is   also useful in scenarios where different messages (body text) need   to be sent to a number of recipients.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageRequest">MessageRequests object containing a collection of Message objects to be sent. (optional)</param>
        /// <returns>ApiResponse of List&lt;InboundMessageBatch&gt;</returns>
        ApiResponse<List<InboundMessageBatch>> PostApiV1BatchesWithHttpInfo(List<MessageRequest> messageRequest = default(List<MessageRequest>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessageBatchesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// This method allows an application to delete all messages within a batch.   If a messages are awaiting delivery (Pending status), due to a future scheduled   delivery date, the application will be able to delete batch messages.   If messages are enroute through the service provider channels, deletion will   not be possible.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApiV1BatchesByBatchIdAsync(Guid batchId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows an application to delete all messages within a batch.   If a messages are awaiting delivery (Pending status), due to a future scheduled   delivery date, the application will be able to delete batch messages.   If messages are enroute through the service provider channels, deletion will   not be possible.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApiV1BatchesByBatchIdWithHttpInfoAsync(Guid batchId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows for the retrieval of multiple delivery reports (DLR) for all   the messages within a batch. Each delivery report will contain the status of the   submitted message and the original submitted message details. This method will be used   by an application to determine the status of the submitted message at any point in time.   Note, that delivery reports are also provided through the provided Callback URL (Recommended   Method) when submitting a new message request. This allows an application to receive the   delivery report instantaneously when the status of a message has changed.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: Subject, MessageType, MessagePriority,   MessageStatus, ScheduledDeliveryDate, and DateCreated (default).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier as provided when the original   message request was submitted.</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeliveryReports</returns>
        System.Threading.Tasks.Task<DeliveryReports> GetApiV1BatchesMessagesByBatchIdAsync(Guid batchId, int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for the retrieval of multiple delivery reports (DLR) for all   the messages within a batch. Each delivery report will contain the status of the   submitted message and the original submitted message details. This method will be used   by an application to determine the status of the submitted message at any point in time.   Note, that delivery reports are also provided through the provided Callback URL (Recommended   Method) when submitting a new message request. This allows an application to receive the   delivery report instantaneously when the status of a message has changed.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: Subject, MessageType, MessagePriority,   MessageStatus, ScheduledDeliveryDate, and DateCreated (default).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier as provided when the original   message request was submitted.</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeliveryReports)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeliveryReports>> GetApiV1BatchesMessagesByBatchIdWithHttpInfoAsync(Guid batchId, int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows an application to update all messages within a batch.  Note that the update is dependent on the ClientReference and MessageType   fields, that is, if a batch contains multiple message types, only the   messages of the type as defined in the MessageBatchRequest object will be   updated. Also, only the messages identified by the ClientReference will be updated.   Note messages within a batch can be updated if these are awaiting delivery   (Pending status). If messages are enroute through the service provider   channels, an update will not be possible. Also, if message recipients   need to be updated for a single message use the   \&quot;PUT api/v1/messages/{messageId}\&quot; method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="updateMessageBatchRequest">Message object containing the new message details to be updated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboundMessageBatch</returns>
        System.Threading.Tasks.Task<InboundMessageBatch> PutApiV1BatchesByBatchIdAsync(Guid batchId, UpdateMessageBatchRequest updateMessageBatchRequest = default(UpdateMessageBatchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows an application to update all messages within a batch.  Note that the update is dependent on the ClientReference and MessageType   fields, that is, if a batch contains multiple message types, only the   messages of the type as defined in the MessageBatchRequest object will be   updated. Also, only the messages identified by the ClientReference will be updated.   Note messages within a batch can be updated if these are awaiting delivery   (Pending status). If messages are enroute through the service provider   channels, an update will not be possible. Also, if message recipients   need to be updated for a single message use the   \&quot;PUT api/v1/messages/{messageId}\&quot; method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="updateMessageBatchRequest">Message object containing the new message details to be updated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboundMessageBatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboundMessageBatch>> PutApiV1BatchesByBatchIdWithHttpInfoAsync(Guid batchId, UpdateMessageBatchRequest updateMessageBatchRequest = default(UpdateMessageBatchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows an application to update the Scheduled Delivery Date field   for all messages within a batch. Note, messages within a batch can be updated   if these are awaiting delivery (Pending status). If messages are enroute   through the service provider channels, an update will not be possible.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="updateScheduledMessageBatchRequest">MessageSchedule object containing the Scheduled Delivery Date to be updated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutApiV1BatchesSchedulesByBatchIdAsync(Guid batchId, UpdateScheduledMessageBatchRequest updateScheduledMessageBatchRequest = default(UpdateScheduledMessageBatchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows an application to update the Scheduled Delivery Date field   for all messages within a batch. Note, messages within a batch can be updated   if these are awaiting delivery (Pending status). If messages are enroute   through the service provider channels, an update will not be possible.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="updateScheduledMessageBatchRequest">MessageSchedule object containing the Scheduled Delivery Date to be updated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutApiV1BatchesSchedulesByBatchIdWithHttpInfoAsync(Guid batchId, UpdateScheduledMessageBatchRequest updateScheduledMessageBatchRequest = default(UpdateScheduledMessageBatchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows an application to send multiple message types   within the same request. The method allows an application to send   messages to either individual or multiple recipients. This method is   also useful in scenarios where different messages (body text) need   to be sent to a number of recipients.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageRequest">MessageRequests object containing a collection of Message objects to be sent. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InboundMessageBatch&gt;</returns>
        System.Threading.Tasks.Task<List<InboundMessageBatch>> PostApiV1BatchesAsync(List<MessageRequest> messageRequest = default(List<MessageRequest>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows an application to send multiple message types   within the same request. The method allows an application to send   messages to either individual or multiple recipients. This method is   also useful in scenarios where different messages (body text) need   to be sent to a number of recipients.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageRequest">MessageRequests object containing a collection of Message objects to be sent. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InboundMessageBatch&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InboundMessageBatch>>> PostApiV1BatchesWithHttpInfoAsync(List<MessageRequest> messageRequest = default(List<MessageRequest>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessageBatchesApi : IMessageBatchesApiSync, IMessageBatchesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessageBatchesApi : IMessageBatchesApi
    {
        private Mita.Notifications.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageBatchesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MessageBatchesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageBatchesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MessageBatchesApi(string basePath)
        {
            this.Configuration = Mita.Notifications.Client.Client.Configuration.MergeConfigurations(
                Mita.Notifications.Client.Client.GlobalConfiguration.Instance,
                new Mita.Notifications.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Mita.Notifications.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Mita.Notifications.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageBatchesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MessageBatchesApi(Mita.Notifications.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Mita.Notifications.Client.Client.Configuration.MergeConfigurations(
                Mita.Notifications.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Mita.Notifications.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Mita.Notifications.Client.Client.Configuration.DefaultExceptionFactory;
        }
        
        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Mita.Notifications.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Mita.Notifications.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Mita.Notifications.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mita.Notifications.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mita.Notifications.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// This method allows an application to delete all messages within a batch.   If a messages are awaiting delivery (Pending status), due to a future scheduled   delivery date, the application will be able to delete batch messages.   If messages are enroute through the service provider channels, deletion will   not be possible. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <returns></returns>
        public void DeleteApiV1BatchesByBatchId(Guid batchId)
        {
            DeleteApiV1BatchesByBatchIdWithHttpInfo(batchId);
        }

        /// <summary>
        /// This method allows an application to delete all messages within a batch.   If a messages are awaiting delivery (Pending status), due to a future scheduled   delivery date, the application will be able to delete batch messages.   If messages are enroute through the service provider channels, deletion will   not be possible. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mita.Notifications.Client.Client.ApiResponse<Object> DeleteApiV1BatchesByBatchIdWithHttpInfo(Guid batchId)
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("batchId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(batchId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/batches/{batchId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiV1BatchesByBatchId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to delete all messages within a batch.   If a messages are awaiting delivery (Pending status), due to a future scheduled   delivery date, the application will be able to delete batch messages.   If messages are enroute through the service provider channels, deletion will   not be possible. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApiV1BatchesByBatchIdAsync(Guid batchId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteApiV1BatchesByBatchIdWithHttpInfoAsync(batchId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This method allows an application to delete all messages within a batch.   If a messages are awaiting delivery (Pending status), due to a future scheduled   delivery date, the application will be able to delete batch messages.   If messages are enroute through the service provider channels, deletion will   not be possible. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<Object>> DeleteApiV1BatchesByBatchIdWithHttpInfoAsync(Guid batchId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("batchId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(batchId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/batches/{batchId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiV1BatchesByBatchId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the retrieval of multiple delivery reports (DLR) for all   the messages within a batch. Each delivery report will contain the status of the   submitted message and the original submitted message details. This method will be used   by an application to determine the status of the submitted message at any point in time.   Note, that delivery reports are also provided through the provided Callback URL (Recommended   Method) when submitting a new message request. This allows an application to receive the   delivery report instantaneously when the status of a message has changed.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: Subject, MessageType, MessagePriority,   MessageStatus, ScheduledDeliveryDate, and DateCreated (default). 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier as provided when the original   message request was submitted.</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>DeliveryReports</returns>
        public DeliveryReports GetApiV1BatchesMessagesByBatchId(Guid batchId, int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?))
        {
            Mita.Notifications.Client.Client.ApiResponse<DeliveryReports> localVarResponse = GetApiV1BatchesMessagesByBatchIdWithHttpInfo(batchId, pageIndex, pageSize, sortField, sortDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of multiple delivery reports (DLR) for all   the messages within a batch. Each delivery report will contain the status of the   submitted message and the original submitted message details. This method will be used   by an application to determine the status of the submitted message at any point in time.   Note, that delivery reports are also provided through the provided Callback URL (Recommended   Method) when submitting a new message request. This allows an application to receive the   delivery report instantaneously when the status of a message has changed.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: Subject, MessageType, MessagePriority,   MessageStatus, ScheduledDeliveryDate, and DateCreated (default). 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier as provided when the original   message request was submitted.</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>ApiResponse of DeliveryReports</returns>
        public Mita.Notifications.Client.Client.ApiResponse<DeliveryReports> GetApiV1BatchesMessagesByBatchIdWithHttpInfo(Guid batchId, int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("batchId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(batchId)); // path parameter
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (sortField != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortField", sortField));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DeliveryReports>("/api/v1/batches/{batchId}/messages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1BatchesMessagesByBatchId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the retrieval of multiple delivery reports (DLR) for all   the messages within a batch. Each delivery report will contain the status of the   submitted message and the original submitted message details. This method will be used   by an application to determine the status of the submitted message at any point in time.   Note, that delivery reports are also provided through the provided Callback URL (Recommended   Method) when submitting a new message request. This allows an application to receive the   delivery report instantaneously when the status of a message has changed.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: Subject, MessageType, MessagePriority,   MessageStatus, ScheduledDeliveryDate, and DateCreated (default). 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier as provided when the original   message request was submitted.</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeliveryReports</returns>
        public async System.Threading.Tasks.Task<DeliveryReports> GetApiV1BatchesMessagesByBatchIdAsync(Guid batchId, int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<DeliveryReports> localVarResponse = await GetApiV1BatchesMessagesByBatchIdWithHttpInfoAsync(batchId, pageIndex, pageSize, sortField, sortDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of multiple delivery reports (DLR) for all   the messages within a batch. Each delivery report will contain the status of the   submitted message and the original submitted message details. This method will be used   by an application to determine the status of the submitted message at any point in time.   Note, that delivery reports are also provided through the provided Callback URL (Recommended   Method) when submitting a new message request. This allows an application to receive the   delivery report instantaneously when the status of a message has changed.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: Subject, MessageType, MessagePriority,   MessageStatus, ScheduledDeliveryDate, and DateCreated (default). 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier as provided when the original   message request was submitted.</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeliveryReports)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<DeliveryReports>> GetApiV1BatchesMessagesByBatchIdWithHttpInfoAsync(Guid batchId, int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("batchId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(batchId)); // path parameter
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (sortField != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortField", sortField));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DeliveryReports>("/api/v1/batches/{batchId}/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1BatchesMessagesByBatchId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to update all messages within a batch.  Note that the update is dependent on the ClientReference and MessageType   fields, that is, if a batch contains multiple message types, only the   messages of the type as defined in the MessageBatchRequest object will be   updated. Also, only the messages identified by the ClientReference will be updated.   Note messages within a batch can be updated if these are awaiting delivery   (Pending status). If messages are enroute through the service provider   channels, an update will not be possible. Also, if message recipients   need to be updated for a single message use the   \&quot;PUT api/v1/messages/{messageId}\&quot; method. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="updateMessageBatchRequest">Message object containing the new message details to be updated. (optional)</param>
        /// <returns>InboundMessageBatch</returns>
        public InboundMessageBatch PutApiV1BatchesByBatchId(Guid batchId, UpdateMessageBatchRequest updateMessageBatchRequest = default(UpdateMessageBatchRequest))
        {
            Mita.Notifications.Client.Client.ApiResponse<InboundMessageBatch> localVarResponse = PutApiV1BatchesByBatchIdWithHttpInfo(batchId, updateMessageBatchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows an application to update all messages within a batch.  Note that the update is dependent on the ClientReference and MessageType   fields, that is, if a batch contains multiple message types, only the   messages of the type as defined in the MessageBatchRequest object will be   updated. Also, only the messages identified by the ClientReference will be updated.   Note messages within a batch can be updated if these are awaiting delivery   (Pending status). If messages are enroute through the service provider   channels, an update will not be possible. Also, if message recipients   need to be updated for a single message use the   \&quot;PUT api/v1/messages/{messageId}\&quot; method. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="updateMessageBatchRequest">Message object containing the new message details to be updated. (optional)</param>
        /// <returns>ApiResponse of InboundMessageBatch</returns>
        public Mita.Notifications.Client.Client.ApiResponse<InboundMessageBatch> PutApiV1BatchesByBatchIdWithHttpInfo(Guid batchId, UpdateMessageBatchRequest updateMessageBatchRequest = default(UpdateMessageBatchRequest))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("batchId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(batchId)); // path parameter
            localVarRequestOptions.Data = updateMessageBatchRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<InboundMessageBatch>("/api/v1/batches/{batchId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutApiV1BatchesByBatchId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to update all messages within a batch.  Note that the update is dependent on the ClientReference and MessageType   fields, that is, if a batch contains multiple message types, only the   messages of the type as defined in the MessageBatchRequest object will be   updated. Also, only the messages identified by the ClientReference will be updated.   Note messages within a batch can be updated if these are awaiting delivery   (Pending status). If messages are enroute through the service provider   channels, an update will not be possible. Also, if message recipients   need to be updated for a single message use the   \&quot;PUT api/v1/messages/{messageId}\&quot; method. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="updateMessageBatchRequest">Message object containing the new message details to be updated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboundMessageBatch</returns>
        public async System.Threading.Tasks.Task<InboundMessageBatch> PutApiV1BatchesByBatchIdAsync(Guid batchId, UpdateMessageBatchRequest updateMessageBatchRequest = default(UpdateMessageBatchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<InboundMessageBatch> localVarResponse = await PutApiV1BatchesByBatchIdWithHttpInfoAsync(batchId, updateMessageBatchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows an application to update all messages within a batch.  Note that the update is dependent on the ClientReference and MessageType   fields, that is, if a batch contains multiple message types, only the   messages of the type as defined in the MessageBatchRequest object will be   updated. Also, only the messages identified by the ClientReference will be updated.   Note messages within a batch can be updated if these are awaiting delivery   (Pending status). If messages are enroute through the service provider   channels, an update will not be possible. Also, if message recipients   need to be updated for a single message use the   \&quot;PUT api/v1/messages/{messageId}\&quot; method. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="updateMessageBatchRequest">Message object containing the new message details to be updated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboundMessageBatch)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<InboundMessageBatch>> PutApiV1BatchesByBatchIdWithHttpInfoAsync(Guid batchId, UpdateMessageBatchRequest updateMessageBatchRequest = default(UpdateMessageBatchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("batchId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(batchId)); // path parameter
            localVarRequestOptions.Data = updateMessageBatchRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<InboundMessageBatch>("/api/v1/batches/{batchId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutApiV1BatchesByBatchId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to update the Scheduled Delivery Date field   for all messages within a batch. Note, messages within a batch can be updated   if these are awaiting delivery (Pending status). If messages are enroute   through the service provider channels, an update will not be possible. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="updateScheduledMessageBatchRequest">MessageSchedule object containing the Scheduled Delivery Date to be updated. (optional)</param>
        /// <returns></returns>
        public void PutApiV1BatchesSchedulesByBatchId(Guid batchId, UpdateScheduledMessageBatchRequest updateScheduledMessageBatchRequest = default(UpdateScheduledMessageBatchRequest))
        {
            PutApiV1BatchesSchedulesByBatchIdWithHttpInfo(batchId, updateScheduledMessageBatchRequest);
        }

        /// <summary>
        /// This method allows an application to update the Scheduled Delivery Date field   for all messages within a batch. Note, messages within a batch can be updated   if these are awaiting delivery (Pending status). If messages are enroute   through the service provider channels, an update will not be possible. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="updateScheduledMessageBatchRequest">MessageSchedule object containing the Scheduled Delivery Date to be updated. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mita.Notifications.Client.Client.ApiResponse<Object> PutApiV1BatchesSchedulesByBatchIdWithHttpInfo(Guid batchId, UpdateScheduledMessageBatchRequest updateScheduledMessageBatchRequest = default(UpdateScheduledMessageBatchRequest))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("batchId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(batchId)); // path parameter
            localVarRequestOptions.Data = updateScheduledMessageBatchRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v1/batches/{batchId}/schedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutApiV1BatchesSchedulesByBatchId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to update the Scheduled Delivery Date field   for all messages within a batch. Note, messages within a batch can be updated   if these are awaiting delivery (Pending status). If messages are enroute   through the service provider channels, an update will not be possible. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="updateScheduledMessageBatchRequest">MessageSchedule object containing the Scheduled Delivery Date to be updated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutApiV1BatchesSchedulesByBatchIdAsync(Guid batchId, UpdateScheduledMessageBatchRequest updateScheduledMessageBatchRequest = default(UpdateScheduledMessageBatchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PutApiV1BatchesSchedulesByBatchIdWithHttpInfoAsync(batchId, updateScheduledMessageBatchRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This method allows an application to update the Scheduled Delivery Date field   for all messages within a batch. Note, messages within a batch can be updated   if these are awaiting delivery (Pending status). If messages are enroute   through the service provider channels, an update will not be possible. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Batch unique identifier.</param>
        /// <param name="updateScheduledMessageBatchRequest">MessageSchedule object containing the Scheduled Delivery Date to be updated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<Object>> PutApiV1BatchesSchedulesByBatchIdWithHttpInfoAsync(Guid batchId, UpdateScheduledMessageBatchRequest updateScheduledMessageBatchRequest = default(UpdateScheduledMessageBatchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("batchId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(batchId)); // path parameter
            localVarRequestOptions.Data = updateScheduledMessageBatchRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v1/batches/{batchId}/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutApiV1BatchesSchedulesByBatchId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to send multiple message types   within the same request. The method allows an application to send   messages to either individual or multiple recipients. This method is   also useful in scenarios where different messages (body text) need   to be sent to a number of recipients. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageRequest">MessageRequests object containing a collection of Message objects to be sent. (optional)</param>
        /// <returns>List&lt;InboundMessageBatch&gt;</returns>
        public List<InboundMessageBatch> PostApiV1Batches(List<MessageRequest> messageRequest = default(List<MessageRequest>))
        {
            Mita.Notifications.Client.Client.ApiResponse<List<InboundMessageBatch>> localVarResponse = PostApiV1BatchesWithHttpInfo(messageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows an application to send multiple message types   within the same request. The method allows an application to send   messages to either individual or multiple recipients. This method is   also useful in scenarios where different messages (body text) need   to be sent to a number of recipients. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageRequest">MessageRequests object containing a collection of Message objects to be sent. (optional)</param>
        /// <returns>ApiResponse of List&lt;InboundMessageBatch&gt;</returns>
        public Mita.Notifications.Client.Client.ApiResponse<List<InboundMessageBatch>> PostApiV1BatchesWithHttpInfo(List<MessageRequest> messageRequest = default(List<MessageRequest>))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = messageRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<InboundMessageBatch>>("/api/v1/batches", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiV1Batches", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to send multiple message types   within the same request. The method allows an application to send   messages to either individual or multiple recipients. This method is   also useful in scenarios where different messages (body text) need   to be sent to a number of recipients. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageRequest">MessageRequests object containing a collection of Message objects to be sent. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InboundMessageBatch&gt;</returns>
        public async System.Threading.Tasks.Task<List<InboundMessageBatch>> PostApiV1BatchesAsync(List<MessageRequest> messageRequest = default(List<MessageRequest>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<List<InboundMessageBatch>> localVarResponse = await PostApiV1BatchesWithHttpInfoAsync(messageRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows an application to send multiple message types   within the same request. The method allows an application to send   messages to either individual or multiple recipients. This method is   also useful in scenarios where different messages (body text) need   to be sent to a number of recipients. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageRequest">MessageRequests object containing a collection of Message objects to be sent. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InboundMessageBatch&gt;)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<List<InboundMessageBatch>>> PostApiV1BatchesWithHttpInfoAsync(List<MessageRequest> messageRequest = default(List<MessageRequest>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = messageRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<InboundMessageBatch>>("/api/v1/batches", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiV1Batches", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
