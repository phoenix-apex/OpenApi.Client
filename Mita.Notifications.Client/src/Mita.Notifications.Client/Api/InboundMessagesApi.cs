/*
 * MITA Notifications Platform REST API
 *
 * The Notifications REST API allows programmatic access to the Notifications Portal message funtionality. To use the REST API, you will need a Notifications Portal Account and an API key and secret. You can generate from the Notifications Portal using the API Key Manager.The REST API takes full advantage of all HTTP headers. Each part of a request and response is meaningful, including the request method (GET/POST, etc.), the individual headers (Location, Content-Type, Accept, etc.), and the response status code (200, 400, 404, etc.). Use of this API assumes a working knowledge of these HTTP components, and general use of RESTful web APIs.
 *
 * The version of the OpenAPI document: v1
 * Contact: notifications.mita@gov.mt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Mita.Notifications.Client.Client;
using Mita.Notifications.Client.Model;

namespace Mita.Notifications.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboundMessagesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method allows for the retrieval of all messages in the Notifications System Inbound Queue.   To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: MessageType, MessagePriority,   InboundMessageStatus, and DateCreated (default).
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. (optional)</param>
        /// <param name="transactionId">Unique reference used to identify a group of batches in the inbound queue. (optional)</param>
        /// <param name="messageType">Message Type. (optional)</param>
        /// <param name="inboundMessageStatus">Inbound Message Status. (optional)</param>
        /// <param name="senderId">Sender unqiue identifier. (optional)</param>
        /// <param name="dateFrom">From date and time when the message was submitted to the Notifications System. (optional)</param>
        /// <param name="dateTo">To date and time when the message was submitted to the Notifications System. (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>InboundMessages</returns>
        InboundMessages GetApiV1InboundMessages(Guid? batchId = default(Guid?), Guid? transactionId = default(Guid?), MessageType? messageType = default(MessageType?), InboundMessageStatus? inboundMessageStatus = default(InboundMessageStatus?), Guid? senderId = default(Guid?), DateTimeOffset? dateFrom = default(DateTimeOffset?), DateTimeOffset? dateTo = default(DateTimeOffset?), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?));

        /// <summary>
        /// This method allows for the retrieval of all messages in the Notifications System Inbound Queue.   To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: MessageType, MessagePriority,   InboundMessageStatus, and DateCreated (default).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. (optional)</param>
        /// <param name="transactionId">Unique reference used to identify a group of batches in the inbound queue. (optional)</param>
        /// <param name="messageType">Message Type. (optional)</param>
        /// <param name="inboundMessageStatus">Inbound Message Status. (optional)</param>
        /// <param name="senderId">Sender unqiue identifier. (optional)</param>
        /// <param name="dateFrom">From date and time when the message was submitted to the Notifications System. (optional)</param>
        /// <param name="dateTo">To date and time when the message was submitted to the Notifications System. (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>ApiResponse of InboundMessages</returns>
        ApiResponse<InboundMessages> GetApiV1InboundMessagesWithHttpInfo(Guid? batchId = default(Guid?), Guid? transactionId = default(Guid?), MessageType? messageType = default(MessageType?), InboundMessageStatus? inboundMessageStatus = default(InboundMessageStatus?), Guid? senderId = default(Guid?), DateTimeOffset? dateFrom = default(DateTimeOffset?), DateTimeOffset? dateTo = default(DateTimeOffset?), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?));
        /// <summary>
        /// This method is used to query the status of a message request in the Notifications System   Inbound Queue waiting to be processed by the backend services. To retrieve the inbound   message details use the InboundMessageId returned in a successful response when a new  message is submitted to the API.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundMessageId">Inbound Message unique identifier.</param>
        /// <returns>InboundMessage</returns>
        InboundMessage GetApiV1InboundMessagesByInboundMessageId(Guid inboundMessageId);

        /// <summary>
        /// This method is used to query the status of a message request in the Notifications System   Inbound Queue waiting to be processed by the backend services. To retrieve the inbound   message details use the InboundMessageId returned in a successful response when a new  message is submitted to the API.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundMessageId">Inbound Message unique identifier.</param>
        /// <returns>ApiResponse of InboundMessage</returns>
        ApiResponse<InboundMessage> GetApiV1InboundMessagesByInboundMessageIdWithHttpInfo(Guid inboundMessageId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboundMessagesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// This method allows for the retrieval of all messages in the Notifications System Inbound Queue.   To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: MessageType, MessagePriority,   InboundMessageStatus, and DateCreated (default).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. (optional)</param>
        /// <param name="transactionId">Unique reference used to identify a group of batches in the inbound queue. (optional)</param>
        /// <param name="messageType">Message Type. (optional)</param>
        /// <param name="inboundMessageStatus">Inbound Message Status. (optional)</param>
        /// <param name="senderId">Sender unqiue identifier. (optional)</param>
        /// <param name="dateFrom">From date and time when the message was submitted to the Notifications System. (optional)</param>
        /// <param name="dateTo">To date and time when the message was submitted to the Notifications System. (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboundMessages</returns>
        System.Threading.Tasks.Task<InboundMessages> GetApiV1InboundMessagesAsync(Guid? batchId = default(Guid?), Guid? transactionId = default(Guid?), MessageType? messageType = default(MessageType?), InboundMessageStatus? inboundMessageStatus = default(InboundMessageStatus?), Guid? senderId = default(Guid?), DateTimeOffset? dateFrom = default(DateTimeOffset?), DateTimeOffset? dateTo = default(DateTimeOffset?), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for the retrieval of all messages in the Notifications System Inbound Queue.   To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: MessageType, MessagePriority,   InboundMessageStatus, and DateCreated (default).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. (optional)</param>
        /// <param name="transactionId">Unique reference used to identify a group of batches in the inbound queue. (optional)</param>
        /// <param name="messageType">Message Type. (optional)</param>
        /// <param name="inboundMessageStatus">Inbound Message Status. (optional)</param>
        /// <param name="senderId">Sender unqiue identifier. (optional)</param>
        /// <param name="dateFrom">From date and time when the message was submitted to the Notifications System. (optional)</param>
        /// <param name="dateTo">To date and time when the message was submitted to the Notifications System. (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboundMessages)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboundMessages>> GetApiV1InboundMessagesWithHttpInfoAsync(Guid? batchId = default(Guid?), Guid? transactionId = default(Guid?), MessageType? messageType = default(MessageType?), InboundMessageStatus? inboundMessageStatus = default(InboundMessageStatus?), Guid? senderId = default(Guid?), DateTimeOffset? dateFrom = default(DateTimeOffset?), DateTimeOffset? dateTo = default(DateTimeOffset?), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method is used to query the status of a message request in the Notifications System   Inbound Queue waiting to be processed by the backend services. To retrieve the inbound   message details use the InboundMessageId returned in a successful response when a new  message is submitted to the API.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundMessageId">Inbound Message unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboundMessage</returns>
        System.Threading.Tasks.Task<InboundMessage> GetApiV1InboundMessagesByInboundMessageIdAsync(Guid inboundMessageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method is used to query the status of a message request in the Notifications System   Inbound Queue waiting to be processed by the backend services. To retrieve the inbound   message details use the InboundMessageId returned in a successful response when a new  message is submitted to the API.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundMessageId">Inbound Message unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboundMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboundMessage>> GetApiV1InboundMessagesByInboundMessageIdWithHttpInfoAsync(Guid inboundMessageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboundMessagesApi : IInboundMessagesApiSync, IInboundMessagesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InboundMessagesApi : IInboundMessagesApi
    {
        private Mita.Notifications.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InboundMessagesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public InboundMessagesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboundMessagesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public InboundMessagesApi(string basePath)
        {
            this.Configuration = Mita.Notifications.Client.Client.Configuration.MergeConfigurations(
                Mita.Notifications.Client.Client.GlobalConfiguration.Instance,
                new Mita.Notifications.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Mita.Notifications.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Mita.Notifications.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboundMessagesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public InboundMessagesApi(Mita.Notifications.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Mita.Notifications.Client.Client.Configuration.MergeConfigurations(
                Mita.Notifications.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Mita.Notifications.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Mita.Notifications.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Mita.Notifications.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Mita.Notifications.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Mita.Notifications.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mita.Notifications.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mita.Notifications.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// This method allows for the retrieval of all messages in the Notifications System Inbound Queue.   To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: MessageType, MessagePriority,   InboundMessageStatus, and DateCreated (default). 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. (optional)</param>
        /// <param name="transactionId">Unique reference used to identify a group of batches in the inbound queue. (optional)</param>
        /// <param name="messageType">Message Type. (optional)</param>
        /// <param name="inboundMessageStatus">Inbound Message Status. (optional)</param>
        /// <param name="senderId">Sender unqiue identifier. (optional)</param>
        /// <param name="dateFrom">From date and time when the message was submitted to the Notifications System. (optional)</param>
        /// <param name="dateTo">To date and time when the message was submitted to the Notifications System. (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>InboundMessages</returns>
        public InboundMessages GetApiV1InboundMessages(Guid? batchId = default(Guid?), Guid? transactionId = default(Guid?), MessageType? messageType = default(MessageType?), InboundMessageStatus? inboundMessageStatus = default(InboundMessageStatus?), Guid? senderId = default(Guid?), DateTimeOffset? dateFrom = default(DateTimeOffset?), DateTimeOffset? dateTo = default(DateTimeOffset?), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?))
        {
            Mita.Notifications.Client.Client.ApiResponse<InboundMessages> localVarResponse = GetApiV1InboundMessagesWithHttpInfo(batchId, transactionId, messageType, inboundMessageStatus, senderId, dateFrom, dateTo, pageIndex, pageSize, sortField, sortDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of all messages in the Notifications System Inbound Queue.   To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: MessageType, MessagePriority,   InboundMessageStatus, and DateCreated (default). 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. (optional)</param>
        /// <param name="transactionId">Unique reference used to identify a group of batches in the inbound queue. (optional)</param>
        /// <param name="messageType">Message Type. (optional)</param>
        /// <param name="inboundMessageStatus">Inbound Message Status. (optional)</param>
        /// <param name="senderId">Sender unqiue identifier. (optional)</param>
        /// <param name="dateFrom">From date and time when the message was submitted to the Notifications System. (optional)</param>
        /// <param name="dateTo">To date and time when the message was submitted to the Notifications System. (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>ApiResponse of InboundMessages</returns>
        public Mita.Notifications.Client.Client.ApiResponse<InboundMessages> GetApiV1InboundMessagesWithHttpInfo(Guid? batchId = default(Guid?), Guid? transactionId = default(Guid?), MessageType? messageType = default(MessageType?), InboundMessageStatus? inboundMessageStatus = default(InboundMessageStatus?), Guid? senderId = default(Guid?), DateTimeOffset? dateFrom = default(DateTimeOffset?), DateTimeOffset? dateTo = default(DateTimeOffset?), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "BatchId", batchId));
            }
            if (transactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "TransactionId", transactionId));
            }
            if (messageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "MessageType", messageType));
            }
            if (inboundMessageStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "InboundMessageStatus", inboundMessageStatus));
            }
            if (senderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SenderId", senderId));
            }
            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "DateFrom", dateFrom));
            }
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "DateTo", dateTo));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (sortField != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortField", sortField));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<InboundMessages>("/api/v1/inbound-messages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1InboundMessages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the retrieval of all messages in the Notifications System Inbound Queue.   To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: MessageType, MessagePriority,   InboundMessageStatus, and DateCreated (default). 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. (optional)</param>
        /// <param name="transactionId">Unique reference used to identify a group of batches in the inbound queue. (optional)</param>
        /// <param name="messageType">Message Type. (optional)</param>
        /// <param name="inboundMessageStatus">Inbound Message Status. (optional)</param>
        /// <param name="senderId">Sender unqiue identifier. (optional)</param>
        /// <param name="dateFrom">From date and time when the message was submitted to the Notifications System. (optional)</param>
        /// <param name="dateTo">To date and time when the message was submitted to the Notifications System. (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboundMessages</returns>
        public async System.Threading.Tasks.Task<InboundMessages> GetApiV1InboundMessagesAsync(Guid? batchId = default(Guid?), Guid? transactionId = default(Guid?), MessageType? messageType = default(MessageType?), InboundMessageStatus? inboundMessageStatus = default(InboundMessageStatus?), Guid? senderId = default(Guid?), DateTimeOffset? dateFrom = default(DateTimeOffset?), DateTimeOffset? dateTo = default(DateTimeOffset?), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<InboundMessages> localVarResponse = await GetApiV1InboundMessagesWithHttpInfoAsync(batchId, transactionId, messageType, inboundMessageStatus, senderId, dateFrom, dateTo, pageIndex, pageSize, sortField, sortDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of all messages in the Notifications System Inbound Queue.   To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: MessageType, MessagePriority,   InboundMessageStatus, and DateCreated (default). 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. (optional)</param>
        /// <param name="transactionId">Unique reference used to identify a group of batches in the inbound queue. (optional)</param>
        /// <param name="messageType">Message Type. (optional)</param>
        /// <param name="inboundMessageStatus">Inbound Message Status. (optional)</param>
        /// <param name="senderId">Sender unqiue identifier. (optional)</param>
        /// <param name="dateFrom">From date and time when the message was submitted to the Notifications System. (optional)</param>
        /// <param name="dateTo">To date and time when the message was submitted to the Notifications System. (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboundMessages)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<InboundMessages>> GetApiV1InboundMessagesWithHttpInfoAsync(Guid? batchId = default(Guid?), Guid? transactionId = default(Guid?), MessageType? messageType = default(MessageType?), InboundMessageStatus? inboundMessageStatus = default(InboundMessageStatus?), Guid? senderId = default(Guid?), DateTimeOffset? dateFrom = default(DateTimeOffset?), DateTimeOffset? dateTo = default(DateTimeOffset?), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "BatchId", batchId));
            }
            if (transactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "TransactionId", transactionId));
            }
            if (messageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "MessageType", messageType));
            }
            if (inboundMessageStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "InboundMessageStatus", inboundMessageStatus));
            }
            if (senderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SenderId", senderId));
            }
            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "DateFrom", dateFrom));
            }
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "DateTo", dateTo));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (sortField != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortField", sortField));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InboundMessages>("/api/v1/inbound-messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1InboundMessages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method is used to query the status of a message request in the Notifications System   Inbound Queue waiting to be processed by the backend services. To retrieve the inbound   message details use the InboundMessageId returned in a successful response when a new  message is submitted to the API. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundMessageId">Inbound Message unique identifier.</param>
        /// <returns>InboundMessage</returns>
        public InboundMessage GetApiV1InboundMessagesByInboundMessageId(Guid inboundMessageId)
        {
            Mita.Notifications.Client.Client.ApiResponse<InboundMessage> localVarResponse = GetApiV1InboundMessagesByInboundMessageIdWithHttpInfo(inboundMessageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method is used to query the status of a message request in the Notifications System   Inbound Queue waiting to be processed by the backend services. To retrieve the inbound   message details use the InboundMessageId returned in a successful response when a new  message is submitted to the API. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundMessageId">Inbound Message unique identifier.</param>
        /// <returns>ApiResponse of InboundMessage</returns>
        public Mita.Notifications.Client.Client.ApiResponse<InboundMessage> GetApiV1InboundMessagesByInboundMessageIdWithHttpInfo(Guid inboundMessageId)
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboundMessageId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(inboundMessageId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<InboundMessage>("/api/v1/inbound-messages/{inboundMessageId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1InboundMessagesByInboundMessageId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method is used to query the status of a message request in the Notifications System   Inbound Queue waiting to be processed by the backend services. To retrieve the inbound   message details use the InboundMessageId returned in a successful response when a new  message is submitted to the API. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundMessageId">Inbound Message unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboundMessage</returns>
        public async System.Threading.Tasks.Task<InboundMessage> GetApiV1InboundMessagesByInboundMessageIdAsync(Guid inboundMessageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<InboundMessage> localVarResponse = await GetApiV1InboundMessagesByInboundMessageIdWithHttpInfoAsync(inboundMessageId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method is used to query the status of a message request in the Notifications System   Inbound Queue waiting to be processed by the backend services. To retrieve the inbound   message details use the InboundMessageId returned in a successful response when a new  message is submitted to the API. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboundMessageId">Inbound Message unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboundMessage)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<InboundMessage>> GetApiV1InboundMessagesByInboundMessageIdWithHttpInfoAsync(Guid inboundMessageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboundMessageId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(inboundMessageId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InboundMessage>("/api/v1/inbound-messages/{inboundMessageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1InboundMessagesByInboundMessageId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
