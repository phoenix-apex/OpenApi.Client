/*
 * MITA Notifications Platform REST API
 *
 * The Notifications REST API allows programmatic access to the Notifications Portal message funtionality. To use the REST API, you will need a Notifications Portal Account and an API key and secret. You can generate from the Notifications Portal using the API Key Manager.The REST API takes full advantage of all HTTP headers. Each part of a request and response is meaningful, including the request method (GET/POST, etc.), the individual headers (Location, Content-Type, Accept, etc.), and the response status code (200, 400, 404, etc.). Use of this API assumes a working knowledge of these HTTP components, and general use of RESTful web APIs.
 *
 * The version of the OpenAPI document: v1
 * Contact: notifications.mita@gov.mt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Mita.Notifications.Client.Client;
using Mita.Notifications.Client.Model;

namespace Mita.Notifications.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagePricingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method allows an application to calculate the total cost to send   a new Message Request. The method currently supports both SMS and Email.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateMessageCost">MessageQuote object containing message information for the total cost calculation. (optional)</param>
        /// <returns>List&lt;MessageReceipt&gt;</returns>
        List<MessageReceipt> PostApiV1MessagePricing(CalculateMessageCost calculateMessageCost = default(CalculateMessageCost));

        /// <summary>
        /// This method allows an application to calculate the total cost to send   a new Message Request. The method currently supports both SMS and Email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateMessageCost">MessageQuote object containing message information for the total cost calculation. (optional)</param>
        /// <returns>ApiResponse of List&lt;MessageReceipt&gt;</returns>
        ApiResponse<List<MessageReceipt>> PostApiV1MessagePricingWithHttpInfo(CalculateMessageCost calculateMessageCost = default(CalculateMessageCost));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagePricingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// This method allows an application to calculate the total cost to send   a new Message Request. The method currently supports both SMS and Email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateMessageCost">MessageQuote object containing message information for the total cost calculation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MessageReceipt&gt;</returns>
        System.Threading.Tasks.Task<List<MessageReceipt>> PostApiV1MessagePricingAsync(CalculateMessageCost calculateMessageCost = default(CalculateMessageCost), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows an application to calculate the total cost to send   a new Message Request. The method currently supports both SMS and Email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateMessageCost">MessageQuote object containing message information for the total cost calculation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MessageReceipt&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MessageReceipt>>> PostApiV1MessagePricingWithHttpInfoAsync(CalculateMessageCost calculateMessageCost = default(CalculateMessageCost), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagePricingApi : IMessagePricingApiSync, IMessagePricingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessagePricingApi : IMessagePricingApi
    {
        private Mita.Notifications.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagePricingApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MessagePricingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagePricingApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MessagePricingApi(string basePath)
        {
            this.Configuration = Mita.Notifications.Client.Client.Configuration.MergeConfigurations(
                Mita.Notifications.Client.Client.GlobalConfiguration.Instance,
                new Mita.Notifications.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Mita.Notifications.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Mita.Notifications.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagePricingApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MessagePricingApi(Mita.Notifications.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Mita.Notifications.Client.Client.Configuration.MergeConfigurations(
                Mita.Notifications.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Mita.Notifications.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Mita.Notifications.Client.Client.Configuration.DefaultExceptionFactory;
        }
        
        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Mita.Notifications.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Mita.Notifications.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Mita.Notifications.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mita.Notifications.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mita.Notifications.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// This method allows an application to calculate the total cost to send   a new Message Request. The method currently supports both SMS and Email. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateMessageCost">MessageQuote object containing message information for the total cost calculation. (optional)</param>
        /// <returns>List&lt;MessageReceipt&gt;</returns>
        public List<MessageReceipt> PostApiV1MessagePricing(CalculateMessageCost calculateMessageCost = default(CalculateMessageCost))
        {
            Mita.Notifications.Client.Client.ApiResponse<List<MessageReceipt>> localVarResponse = PostApiV1MessagePricingWithHttpInfo(calculateMessageCost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows an application to calculate the total cost to send   a new Message Request. The method currently supports both SMS and Email. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateMessageCost">MessageQuote object containing message information for the total cost calculation. (optional)</param>
        /// <returns>ApiResponse of List&lt;MessageReceipt&gt;</returns>
        public Mita.Notifications.Client.Client.ApiResponse<List<MessageReceipt>> PostApiV1MessagePricingWithHttpInfo(CalculateMessageCost calculateMessageCost = default(CalculateMessageCost))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = calculateMessageCost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<MessageReceipt>>("/api/v1/message-pricing", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiV1MessagePricing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to calculate the total cost to send   a new Message Request. The method currently supports both SMS and Email. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateMessageCost">MessageQuote object containing message information for the total cost calculation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MessageReceipt&gt;</returns>
        public async System.Threading.Tasks.Task<List<MessageReceipt>> PostApiV1MessagePricingAsync(CalculateMessageCost calculateMessageCost = default(CalculateMessageCost), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<List<MessageReceipt>> localVarResponse = await PostApiV1MessagePricingWithHttpInfoAsync(calculateMessageCost, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows an application to calculate the total cost to send   a new Message Request. The method currently supports both SMS and Email. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateMessageCost">MessageQuote object containing message information for the total cost calculation. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MessageReceipt&gt;)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<List<MessageReceipt>>> PostApiV1MessagePricingWithHttpInfoAsync(CalculateMessageCost calculateMessageCost = default(CalculateMessageCost), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = calculateMessageCost;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<MessageReceipt>>("/api/v1/message-pricing", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiV1MessagePricing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
