{
  "openapi": "3.0.1",
  "info": {
    "title": "MITA Notifications Platform REST API",
    "description": "The Notifications REST API allows programmatic access to the Notifications Portal message funtionality. To use the REST API, you will need a Notifications Portal Account and an API key and secret. You can generate from the Notifications Portal using the API Key Manager.The REST API takes full advantage of all HTTP headers. Each part of a request and response is meaningful, including the request method (GET/POST, etc.), the individual headers (Location, Content-Type, Accept, etc.), and the response status code (200, 400, 404, etc.). Use of this API assumes a working knowledge of these HTTP components, and general use of RESTful web APIs.",
    "contact": {
      "name": "MITA",
      "url": "https://mita.gov.mt",
      "email": "notifications.mita@gov.mt"
    },
    "license": {
      "name": "Notifications Portal Documentation",
      "url": "https://mita.gov.mt/portfolio/information-systems/notifications-platform"
    },
    "version": "v1"
  },
  "paths": {
    "/api/v1/key": {
      "get": {
        "tags": [
          "API Key"
        ],
        "summary": "Use this API to refresh an expired API Key and obtain a new Secret Key.\r\n\r\nPlease note that API Secret Keys expire after seven days by default. \r\nWhen this key expires, the user needs to refresh the API Secret Key\r\nusing this endpoint to generate a new secret key. \r\n\r\nYou can obtain a new Secret Key the expired Secret Key.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/attachments/{attachmentId}": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "summary": "Retrieves a file attachment as specified by the attachmentId parameter.",
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/inbound-messages/{inboundMessageId}": {
      "get": {
        "tags": [
          "Inbound Messages"
        ],
        "summary": "This method is used to query the status of a message request in the Notifications System \r\nInbound Queue waiting to be processed by the backend services. To retrieve the inbound \r\nmessage details use the InboundMessageId returned in a successful response when a new\r\nmessage is submitted to the API.",
        "parameters": [
          {
            "name": "inboundMessageId",
            "in": "path",
            "description": "Inbound Message unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundMessage"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/InboundMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/inbound-messages": {
      "get": {
        "tags": [
          "Inbound Messages"
        ],
        "summary": "This method allows for the retrieval of all messages in the Notifications System Inbound Queue. \r\nTo limit the amount of data returned, the application consuming the API has \r\nthe option to control the amount of data received using the available pagination \r\nparameters. The PageSize parameter is used to limit the number of records \r\nreturned per page. If this is not provided, it defaults to a limit of 50 records. \r\nThe PageIndex parameter is used to navigate through pages. SortField and \r\nSortDirection parameters are used to control the sorting of the results. \r\nThe supported sorting fields are as follows: MessageType, MessagePriority, \r\nInboundMessageStatus, and DateCreated (default).",
        "parameters": [
          {
            "name": "BatchId",
            "in": "query",
            "description": "Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "TransactionId",
            "in": "query",
            "description": "Unique reference used to identify a group of batches in the inbound queue.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "MessageType",
            "in": "query",
            "description": "Message Type.",
            "schema": {
              "$ref": "#/components/schemas/MessageType"
            }
          },
          {
            "name": "InboundMessageStatus",
            "in": "query",
            "description": "Inbound Message Status.",
            "schema": {
              "$ref": "#/components/schemas/InboundMessageStatus"
            }
          },
          {
            "name": "SenderId",
            "in": "query",
            "description": "Sender unqiue identifier.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "From date and time when the message was submitted to the Notifications System.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "To date and time when the message was submitted to the Notifications System.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "PageIndex",
            "in": "query",
            "description": "Page index (defaults to 1 if not provided).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Page size (defaults to 50 if not provided).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortField",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDirection",
            "in": "query",
            "description": "Sort direction",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundMessages"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/InboundMessages"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/batches/{batchId}/messages": {
      "get": {
        "tags": [
          "Message Batches"
        ],
        "summary": "This method allows for the retrieval of multiple delivery reports (DLR) for all \r\nthe messages within a batch. Each delivery report will contain the status of the \r\nsubmitted message and the original submitted message details. This method will be used \r\nby an application to determine the status of the submitted message at any point in time. \r\nNote, that delivery reports are also provided through the provided Callback URL (Recommended \r\nMethod) when submitting a new message request. This allows an application to receive the \r\ndelivery report instantaneously when the status of a message has changed. \r\n\r\nTo limit the amount of data returned, the application consuming the API has \r\nthe option to control the amount of data received using the available pagination \r\nparameters. The PageSize parameter is used to limit the number of records \r\nreturned per page. If this is not provided, it defaults to a limit of 50 records. \r\nThe PageIndex parameter is used to navigate through pages. SortField and \r\nSortDirection parameters are used to control the sorting of the results. \r\nThe supported sorting fields are as follows: Subject, MessageType, MessagePriority, \r\nMessageStatus, ScheduledDeliveryDate, and DateCreated (default).",
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "Batch unique identifier as provided when the original \r\nmessage request was submitted.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "PageIndex",
            "in": "query",
            "description": "Page index (defaults to 1 if not provided).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Page size (defaults to 50 if not provided).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortField",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDirection",
            "in": "query",
            "description": "Sort direction",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryReports"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryReports"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/batches": {
      "post": {
        "tags": [
          "Message Batches"
        ],
        "summary": "This method allows an application to send multiple message types \r\nwithin the same request. The method allows an application to send \r\nmessages to either individual or multiple recipients. This method is \r\nalso useful in scenarios where different messages (body text) need \r\nto be sent to a number of recipients.",
        "requestBody": {
          "description": "MessageRequests object containing a collection of Message objects to be sent.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MessageRequest"
                },
                "description": "Message Batch Request Collection",
                "xml": {
                  "name": "MessageRequests",
                  "wrapped": true
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MessageRequest"
                },
                "description": "Message Batch Request Collection",
                "xml": {
                  "name": "MessageRequests",
                  "wrapped": true
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InboundMessageBatch"
                  },
                  "description": "Message Batch Collection",
                  "xml": {
                    "name": "MessageBatches",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InboundMessageBatch"
                  },
                  "description": "Message Batch Collection",
                  "xml": {
                    "name": "MessageBatches",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/batches/{batchId}": {
      "put": {
        "tags": [
          "Message Batches"
        ],
        "summary": "This method allows an application to update all messages within a batch.\r\nNote that the update is dependent on the ClientReference and MessageType \r\nfields, that is, if a batch contains multiple message types, only the \r\nmessages of the type as defined in the MessageBatchRequest object will be \r\nupdated. Also, only the messages identified by the ClientReference will be updated. \r\nNote messages within a batch can be updated if these are awaiting delivery \r\n(Pending status). If messages are enroute through the service provider \r\nchannels, an update will not be possible. Also, if message recipients \r\nneed to be updated for a single message use the \r\n\"PUT api/v1/messages/{messageId}\" method.",
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "Batch unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Message object containing the new message details to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMessageBatchRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMessageBatchRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundMessageBatch"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/InboundMessageBatch"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Message Batches"
        ],
        "summary": "This method allows an application to delete all messages within a batch. \r\nIf a messages are awaiting delivery (Pending status), due to a future scheduled \r\ndelivery date, the application will be able to delete batch messages. \r\nIf messages are enroute through the service provider channels, deletion will \r\nnot be possible.",
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "Batch unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "410": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/batches/{batchId}/schedules": {
      "put": {
        "tags": [
          "Message Batches"
        ],
        "summary": "This method allows an application to update the Scheduled Delivery Date field \r\nfor all messages within a batch. Note, messages within a batch can be updated \r\nif these are awaiting delivery (Pending status). If messages are enroute \r\nthrough the service provider channels, an update will not be possible.",
        "parameters": [
          {
            "name": "batchId",
            "in": "path",
            "description": "Batch unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "MessageSchedule object containing the Scheduled Delivery Date to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScheduledMessageBatchRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScheduledMessageBatchRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/message-pricing": {
      "post": {
        "tags": [
          "Message Pricing"
        ],
        "summary": "This method allows an application to calculate the total cost to send \r\na new Message Request. The method currently supports both SMS and Email.",
        "requestBody": {
          "description": "MessageQuote object containing message information for the total cost calculation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalculateMessageCost"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CalculateMessageCost"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageReceipt"
                  },
                  "description": "Message Receipt Collection",
                  "xml": {
                    "name": "MessageReceipts",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageReceipt"
                  },
                  "description": "Message Receipt Collection",
                  "xml": {
                    "name": "MessageReceipts",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/schedules": {
      "get": {
        "tags": [
          "Message Scheduling"
        ],
        "summary": "This method allows for the retrieval of all scheduled messages from the current date.\r\nTo limit the amount of data returned, the application consuming the API has \r\nthe option to control the amount of data received using the available pagination \r\nparameters. The PageSize parameter is used to limit the number of records \r\nreturned per page. If this is not provided, it defaults to a limit of 50 records. \r\nThe PageIndex parameter is used to navigate through pages. SortField and \r\nSortDirection parameters are used to control the sorting of the results. \r\nThe supported sorting fields are as follows: Subject, MessageType, MessagePriority, \r\nMessageStatus, ScheduledDeliveryDate (default), and DateCreated.",
        "parameters": [
          {
            "name": "BatchId",
            "in": "query",
            "description": "Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ClientReference",
            "in": "query",
            "description": "Unique reference provided by the client application while submitting a new message.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MessageType",
            "in": "query",
            "description": "Message Type.",
            "schema": {
              "$ref": "#/components/schemas/MessageType"
            }
          },
          {
            "name": "SenderId",
            "in": "query",
            "description": "Sender unqiue identifier.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ScheduledDeliveryDateFrom",
            "in": "query",
            "description": "From date and time when the message is scheduled for delivery.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ScheduledDeliveryDateTo",
            "in": "query",
            "description": "To date and time when the message is scheduled for delivery.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "PageIndex",
            "in": "query",
            "description": "Page index (defaults to 1 if not provided).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Page size (defaults to 50 if not provided).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortField",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDirection",
            "in": "query",
            "description": "Sort direction",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryReports"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryReports"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/schedules/{year}/{month}/{day}": {
      "get": {
        "tags": [
          "Message Scheduling"
        ],
        "summary": "This method allows for the retrieval of all scheduled messages for a specific date.\r\nTo limit the amount of data returned, the application consuming the API has \r\nthe option to control the amount of data received using the available pagination \r\nparameters. The PageSize parameter is used to limit the number of records \r\nreturned per page. If this is not provided, it defaults to a limit of 50 records. \r\nThe PageIndex parameter is used to navigate through pages. SortField and \r\nSortDirection parameters are used to control the sorting of the results. \r\nThe supported sorting fields are as follows: Subject, MessageType, MessagePriority, \r\nMessageStatus, ScheduledDeliveryDate (default), and DateCreated.",
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "description": "Year",
            "required": true,
            "schema": {
              "maxLength": 4,
              "minLength": 4,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "path",
            "description": "Month",
            "required": true,
            "schema": {
              "maximum": 12,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "day",
            "in": "path",
            "description": "Day",
            "required": true,
            "schema": {
              "maximum": 31,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageIndex",
            "in": "query",
            "description": "Page index (defaults to 1 if not provided).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Page size (defaults to 50 if not provided).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortField",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDirection",
            "in": "query",
            "description": "Sort direction",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryReports"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryReports"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/messages/{messageId}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Retrieve the delivery report (DLR) for the message as specified in the messageId parameter. \r\nThe delivery report will contain both the delivery status of the message as provided by \r\nthe service operator and the original submitted message details. For SMS message types, \r\nthis is the piece of information sent back by the mobile network provider containing whether \r\nthe message was successfully delivered or if the delivery has failed. This method will be used \r\nby an application to determine the status of the submitted message at any point in time. \r\nNote, that delivery reports are also provided through the provided Callback URL (Recommended \r\nMethod) when submitting a new message request. This allows an application to receive the \r\ndelivery report instantaneously when the status of a message has changed.",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Message unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryReport"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryReport"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Messages"
        ],
        "summary": "This method allows application to update the details of an already submitted \r\nmessage stored by the Notifications Portal. If the message is awaiting delivery (Pending status), \r\ndue to a future scheduled delivery date, the application will be able to update any \r\nof the details submitted. If the message is enroute through the service provider channels, \r\nan update will not be possible. Note that the method allows only for the update of a single \r\nmessage, single recipient as identified by the provided Message Unique Identifier.",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Message unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Message object containing the new message details to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMessageRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMessageRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageBatch"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageBatch"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Messages"
        ],
        "summary": "This method allows an application to delete a message stored \r\nby the Notifications Portal. If the message is awaiting delivery (Pending status), \r\ndue to a future scheduled delivery date, the application will be able to \r\ndelete the message. If the message is enroute through the service provider channels, \r\ndeletion will not be possible. Note that the method allows only for the deletion \r\nof a single message, single recipient as identified by the provided Message \r\nUnique Identifier.",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Message unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "410": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/messages": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "This method allows for the retrieval of all messages stored by the system. \r\nTo limit the amount of data returned, the application consuming the API has \r\nthe option to control the amount of data received using the available pagination \r\nparameters. The PageSize parameter is used to limit the number of records \r\nreturned per page. If this is not provided, it defaults to a limit of 50 records. \r\nThe PageIndex parameter is used to navigate through pages. SortField and \r\nSortDirection parameters are used to control the sorting of the results. \r\nThe supported sorting fields are as follows: Subject, MessageType, MessagePriority, \r\nMessageStatus, ScheduledDeliveryDate (default), and DateCreated.",
        "parameters": [
          {
            "name": "BatchId",
            "in": "query",
            "description": "Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ClientReference",
            "in": "query",
            "description": "Unique reference provided by the client application while submitting a new message.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MessageType",
            "in": "query",
            "description": "Message Type.",
            "schema": {
              "$ref": "#/components/schemas/MessageType"
            }
          },
          {
            "name": "MessageStatus",
            "in": "query",
            "description": "Message Status.",
            "schema": {
              "$ref": "#/components/schemas/MessageStatus"
            }
          },
          {
            "name": "SenderId",
            "in": "query",
            "description": "Sender unqiue identifier.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ScheduledDeliveryDateFrom",
            "in": "query",
            "description": "From date and time when the message is scheduled for delivery.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ScheduledDeliveryDateTo",
            "in": "query",
            "description": "To date and time when the message is scheduled for delivery.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "PageIndex",
            "in": "query",
            "description": "Page index (defaults to 1 if not provided).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Page size (defaults to 50 if not provided).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortField",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDirection",
            "in": "query",
            "description": "Sort direction",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryReports"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryReports"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "This method allows an application to send a new Message Request. \r\nThe method supports various message types (currently SMS or Email) and \r\ncan be used by the application to send a message to either  \r\nindividual or multiple recipients.",
        "requestBody": {
          "description": "MessageRequest object containing the message data to be sent.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundMessageBatch"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/InboundMessageBatch"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/messages/{messageId}/schedules": {
      "put": {
        "tags": [
          "Messages"
        ],
        "summary": "This method allows an application to update the Scheduled Delivery Date field \r\nfor a single message as specified by the messageId parameter. Note, a message \r\ncan only be updated if the message is awaiting delivery (Pending status). \r\nIf the message is enroute through the service provider channels, an update \r\nwill not be possible.",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Message unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "MessageSchedule object containing the Scheduled Delivery Date to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScheduledMessageRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScheduledMessageRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageBatch"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageBatch"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/subscribers/{subscriberId}": {
      "get": {
        "tags": [
          "Subscribers"
        ],
        "summary": "This method allows for the retrieval of a Subscriber object details.",
        "parameters": [
          {
            "name": "subscriberId",
            "in": "path",
            "description": "Subscriber unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subscribers"
        ],
        "summary": "This method allows for an application to update an existing Subscriber object.",
        "parameters": [
          {
            "name": "subscriberId",
            "in": "path",
            "description": "Subscriber unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Subscriber object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriberRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriberRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subscribers"
        ],
        "summary": "This method allows for the deletion of a subscriber stored by the Notifications Portal.",
        "parameters": [
          {
            "name": "subscriberId",
            "in": "path",
            "description": "Subscriber unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/subscribers": {
      "get": {
        "tags": [
          "Subscribers"
        ],
        "summary": "This method allows for the retrieval of all subscribers stored by the system. \r\n\r\nTo limit the amount of data returned, the application consuming the API has \r\nthe option to control the amount of data received using the available pagination \r\nparameters. The PageSize parameter is used to limit the number of records \r\nreturned per page. If this is not provided, it defaults to a limit of 50 records. \r\nThe PageIndex parameter is used to navigate through pages. SortField and \r\nSortDirection parameters are used to control the sorting of the results. \r\nThe supported sorting fields are as follows: FirstName, LastName (default), \r\nDisplayName, Email, and MobileNo.",
        "parameters": [
          {
            "name": "GroupId",
            "in": "query",
            "description": "Group unique identifier",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Email",
            "in": "query",
            "description": "Email Address",
            "schema": {
              "pattern": "[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}",
              "type": "string"
            }
          },
          {
            "name": "MobileNo",
            "in": "query",
            "description": "Mobile Number",
            "schema": {
              "pattern": "^\\d{10,15}$",
              "type": "string"
            }
          },
          {
            "name": "PageIndex",
            "in": "query",
            "description": "Page index (defaults to 1 if not provided).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Page size (defaults to 50 if not provided).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortField",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDirection",
            "in": "query",
            "description": "Sort direction",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscribers"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Subscribers"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Subscribers"
        ],
        "summary": "This method allows for the creation of a new Subscriber.",
        "requestBody": {
          "description": "Subscriber object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriberRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriberRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/subscribers/{subscriberId}/groups": {
      "get": {
        "tags": [
          "Subscribers"
        ],
        "summary": "This method allows for the retrieval of the list of groups a subscriber is subscribed to.",
        "parameters": [
          {
            "name": "subscriberId",
            "in": "path",
            "description": "Subscriber unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  },
                  "description": "Subscriber Group Collection",
                  "xml": {
                    "name": "Groups",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  },
                  "description": "Subscriber Group Collection",
                  "xml": {
                    "name": "Groups",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/groups/{groupId}": {
      "get": {
        "tags": [
          "Subscriptions (Contact Groups)"
        ],
        "summary": "This method allows for the retrieval of a Group object.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subscriptions (Contact Groups)"
        ],
        "summary": "This method allows for an application to update a existing group object.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Group object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriberGroupRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriberGroupRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subscriptions (Contact Groups)"
        ],
        "summary": "This method allows for the deletion of a group stored by the Notifications Portal.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/groups": {
      "get": {
        "tags": [
          "Subscriptions (Contact Groups)"
        ],
        "summary": "This method allows for the retrieval of the available contact groups stored by the Notifications Portal.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  },
                  "description": "Subscriber Group Collection",
                  "xml": {
                    "name": "Groups",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  },
                  "description": "Subscriber Group Collection",
                  "xml": {
                    "name": "Groups",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Subscriptions (Contact Groups)"
        ],
        "summary": "This method allows for the creation of a new Group.",
        "requestBody": {
          "description": "Group object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/groups/{groupId}/messages": {
      "post": {
        "tags": [
          "Subscriptions (Contact Groups)"
        ],
        "summary": "This method allows an application to send a new Message Request to all contacts within a Group.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Message object containing the message data to be sent.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageGroupRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageGroupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundMessageBatch"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/InboundMessageBatch"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/groups/{groupId}/subscribers": {
      "get": {
        "tags": [
          "Subscriptions (Contact Groups)"
        ],
        "summary": "This method allows for the retrieval of contacts subscribed to a group. \r\n\r\nTo limit the amount of data returned, the application consuming the API has \r\nthe option to control the amount of data received using the available pagination \r\nparameters. The PageSize parameter is used to limit the number of records \r\nreturned per page. If this is not provided, it defaults to a limit of 50 records. \r\nThe PageIndex parameter is used to navigate through pages. SortField and \r\nSortDirection parameters are used to control the sorting of the results. \r\nThe supported sorting fields are as follows: FirstName, LastName (default), DisplayName, \r\nEmail, and MobileNo.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "PageIndex",
            "in": "query",
            "description": "Page index (defaults to 1 if not provided).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Page size (defaults to 50 if not provided).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortField",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDirection",
            "in": "query",
            "description": "Sort direction",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscribers"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Subscribers"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Subscriptions (Contact Groups)"
        ],
        "summary": "This method allows for the creation of a new Subscriber \r\nand subscription to a specific Group identified by the \r\ngroupId parameter.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Subscriber object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriberRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriberRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/groups/{groupId}/subscriptions": {
      "post": {
        "tags": [
          "Subscriptions (Contact Groups)"
        ],
        "summary": "This method allows an application to bind an existing subscriber as \r\nspecified by the subscriberId to a specific Group identified by \r\nthe groupId parameter.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Subscription object containing Subscriber unique identifier.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/groups/{groupId}/subscribers/{subscriberId}": {
      "delete": {
        "tags": [
          "Subscriptions (Contact Groups)"
        ],
        "summary": "This method allows for an application to manage opt-outs and unbind \r\nan existing subscriber as specified by the subscriberId from a \r\nspecific Group identified by the groupId parameter.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "subscriberId",
            "in": "path",
            "description": "Subscriber unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Validation"
                  },
                  "description": "Message Request Collection",
                  "xml": {
                    "name": "Validations",
                    "wrapped": true
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiKey": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Friendly name to identify the usage of the API Key.",
            "nullable": true
          },
          "Key": {
            "type": "string",
            "description": "API Key unique identifier.",
            "nullable": true
          },
          "Secret": {
            "type": "string",
            "description": "Secret Key (Must be refreshed every seven days or as per the indicated Expiry Date field).",
            "nullable": true
          },
          "ExpiryDate": {
            "type": "string",
            "description": "Expiry Date. If null the Secret Key never expires (only used for testing).",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "API Key Information.",
        "xml": {
          "name": "ApiKey"
        }
      },
      "Attachment": {
        "required": [
          "ContentStream",
          "ContentType",
          "FileName"
        ],
        "type": "object",
        "properties": {
          "ContentStream": {
            "type": "string",
            "description": "The file content stream for this attachment.",
            "format": "byte"
          },
          "FileName": {
            "minLength": 1,
            "type": "string",
            "description": "File name."
          },
          "ContentType": {
            "minLength": 1,
            "type": "string",
            "description": "Content type (MIME) associated with this attachment."
          }
        },
        "additionalProperties": false,
        "description": "Message Attachment object.",
        "xml": {
          "name": "Attachment"
        }
      },
      "AttachmentUri": {
        "required": [
          "ContentType",
          "FileName"
        ],
        "type": "object",
        "properties": {
          "Uri": {
            "type": "string",
            "description": "URI to download attachement.",
            "nullable": true
          },
          "Size": {
            "type": "integer",
            "description": "File size.",
            "format": "int32"
          },
          "MD5": {
            "type": "string",
            "description": "File checksum.",
            "nullable": true
          },
          "FileName": {
            "minLength": 1,
            "type": "string",
            "description": "File name."
          },
          "ContentType": {
            "minLength": 1,
            "type": "string",
            "description": "Content type (MIME) associated with this attachment."
          }
        },
        "additionalProperties": false,
        "description": "Uniform Resource Identifier used to identify an attachement and location to download it.",
        "xml": {
          "name": "Attachment"
        }
      },
      "CalculateMessageCost": {
        "required": [
          "MessagePriority",
          "MessageType",
          "SenderId"
        ],
        "type": "object",
        "properties": {
          "SenderId": {
            "type": "string",
            "description": "Sender identifier. This field is used by the Notifications Portal to specify the sender name for the message.",
            "format": "uuid"
          },
          "MessageType": {
            "$ref": "#/components/schemas/MessageType"
          },
          "MessagePriority": {
            "$ref": "#/components/schemas/MessagePriority"
          },
          "Contacts": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            },
            "description": "The Contact Address is the delivery address where the message will be sent to.\r\nThis can be either an MSISDN or e-mail address depending on the message type.",
            "nullable": true,
            "xml": {
              "name": "Contacts",
              "wrapped": true
            }
          },
          "MessageContent": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageContent"
            },
            "description": "Message Content.",
            "nullable": true,
            "xml": {
              "name": "MessageContent",
              "wrapped": true
            }
          }
        },
        "additionalProperties": false,
        "description": "Message Quote Request",
        "xml": {
          "name": "MessageQuote"
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "DisplayName": {
            "maxLength": 400,
            "minLength": 0,
            "type": "string",
            "description": "Display Name",
            "nullable": true
          },
          "Title": {
            "$ref": "#/components/schemas/Salutation"
          },
          "FirstName": {
            "maxLength": 160,
            "minLength": 0,
            "type": "string",
            "description": "First Name",
            "nullable": true
          },
          "LastName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Last Email",
            "nullable": true
          },
          "Email": {
            "pattern": "[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}",
            "type": "string",
            "description": "Email Address",
            "nullable": true,
            "example": "email@domain.com"
          },
          "MobileNo": {
            "pattern": "^\\d{10,15}$",
            "type": "string",
            "description": "Mobile Number",
            "nullable": true,
            "example": "0035699999999"
          },
          "PreferredLanguage": {
            "$ref": "#/components/schemas/Language"
          }
        },
        "additionalProperties": false,
        "description": "Contact object",
        "xml": {
          "name": "Contact"
        }
      },
      "CreateGroupRequest": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Group Name"
          }
        },
        "additionalProperties": false,
        "description": "Create Group Request",
        "xml": {
          "name": "Group"
        }
      },
      "CreateMessageGroupRequest": {
        "required": [
          "ClientReference",
          "MessagePriority",
          "MessageType",
          "ScheduledDeliveryDate",
          "SenderId"
        ],
        "type": "object",
        "properties": {
          "MessageContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageContent"
            },
            "description": "Message Content.",
            "nullable": true,
            "xml": {
              "name": "MessageContent",
              "wrapped": true
            }
          },
          "ClientReference": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Unique reference generated by the client application."
          },
          "MessageType": {
            "$ref": "#/components/schemas/MessageType"
          },
          "MessagePriority": {
            "$ref": "#/components/schemas/MessagePriority"
          },
          "SenderId": {
            "type": "string",
            "description": "Sender identifier. This field is used by the Notifications Portal to specify the sender name for the message.",
            "format": "uuid"
          },
          "CallbackUrl": {
            "maxLength": 800,
            "minLength": 0,
            "type": "string",
            "description": "If provided, the Notifications Portal will deliver a receipt back to the application \r\nthrough the HTTP POST method for the provided URL. \r\nIf URL is not provided the default API URL will be used.",
            "nullable": true,
            "example": "https://domain.com/listener"
          },
          "ScheduledDeliveryDate": {
            "type": "string",
            "description": "The date and time when the message will be scheduled for delivery. \r\nFor instant messaging provide the current date and time.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Message Request",
        "xml": {
          "name": "Message"
        }
      },
      "CreateMessageRequest": {
        "required": [
          "ClientReference",
          "MessagePriority",
          "MessageType",
          "ScheduledDeliveryDate",
          "SenderId"
        ],
        "type": "object",
        "properties": {
          "Contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            },
            "description": "The Contact Address is the delivery address where the message will be sent to.\r\nThis can be either an MSISDN or e-mail address depending on the message type.",
            "nullable": true,
            "xml": {
              "name": "Contacts",
              "wrapped": true
            }
          },
          "MessageContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageContent"
            },
            "description": "Message Content.",
            "nullable": true,
            "xml": {
              "name": "MessageContent",
              "wrapped": true
            }
          },
          "ClientReference": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Unique reference generated by the client application."
          },
          "MessageType": {
            "$ref": "#/components/schemas/MessageType"
          },
          "MessagePriority": {
            "$ref": "#/components/schemas/MessagePriority"
          },
          "SenderId": {
            "type": "string",
            "description": "Sender identifier. This field is used by the Notifications Portal to specify the sender name for the message.",
            "format": "uuid"
          },
          "CallbackUrl": {
            "maxLength": 800,
            "minLength": 0,
            "type": "string",
            "description": "If provided, the Notifications Portal will deliver a receipt back to the application \r\nthrough the HTTP POST method for the provided URL. \r\nIf URL is not provided the default API URL will be used.",
            "nullable": true,
            "example": "https://domain.com/listener"
          },
          "ScheduledDeliveryDate": {
            "type": "string",
            "description": "The date and time when the message will be scheduled for delivery. \r\nFor instant messaging provide the current date and time.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Message Request",
        "xml": {
          "name": "Message"
        }
      },
      "CreateSubscriberRequest": {
        "type": "object",
        "properties": {
          "Address": {
            "type": "string",
            "description": "Full Address Details",
            "nullable": true
          },
          "Locality": {
            "type": "string",
            "description": "Locality",
            "nullable": true
          },
          "PostCode": {
            "type": "string",
            "description": "Post Code",
            "nullable": true
          },
          "PhoneNo": {
            "type": "string",
            "description": "Phone Number",
            "nullable": true
          },
          "PhoneNoAlt": {
            "type": "string",
            "description": "Alternate Phone Number",
            "nullable": true
          },
          "Country": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 Alpha-2 Country Code",
            "nullable": true
          },
          "DisplayName": {
            "maxLength": 400,
            "minLength": 0,
            "type": "string",
            "description": "Display Name",
            "nullable": true
          },
          "Title": {
            "$ref": "#/components/schemas/Salutation"
          },
          "FirstName": {
            "maxLength": 160,
            "minLength": 0,
            "type": "string",
            "description": "First Name",
            "nullable": true
          },
          "LastName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Last Email",
            "nullable": true
          },
          "Email": {
            "pattern": "[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}",
            "type": "string",
            "description": "Email Address",
            "nullable": true,
            "example": "email@domain.com"
          },
          "MobileNo": {
            "pattern": "^\\d{10,15}$",
            "type": "string",
            "description": "Mobile Number",
            "nullable": true,
            "example": "0035699999999"
          },
          "PreferredLanguage": {
            "$ref": "#/components/schemas/Language"
          }
        },
        "additionalProperties": false,
        "description": "Create Subscriber Request",
        "xml": {
          "name": "Subscriber"
        }
      },
      "CreateSubscriptionRequest": {
        "required": [
          "SubscriberId"
        ],
        "type": "object",
        "properties": {
          "SubscriberId": {
            "type": "string",
            "description": "Subscriber unique identifier",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Create Subscription Request",
        "xml": {
          "name": "Subscription"
        }
      },
      "DeliveryReport": {
        "required": [
          "ClientReference",
          "MessagePriority",
          "MessageType",
          "ScheduledDeliveryDate",
          "SenderId"
        ],
        "type": "object",
        "properties": {
          "MessageId": {
            "type": "string",
            "description": "Notifications Portal unique identifier.",
            "format": "uuid"
          },
          "BatchId": {
            "type": "string",
            "description": "Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. \r\nThis is useful when in situations where a group of messages needs to be updated or deleted.",
            "format": "uuid"
          },
          "Contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "Language": {
            "$ref": "#/components/schemas/Language"
          },
          "Subject": {
            "type": "string",
            "description": "Message Subject.\r\nConditional - Used only for e-mail message types or message types requiring a Subject.",
            "nullable": true
          },
          "MessageBody": {
            "type": "string",
            "description": "Message Body.",
            "nullable": true
          },
          "Attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentUri"
            },
            "description": "Message attachment list.\r\nOptional - Used only for e-mail message types or message types allowing an attachment.",
            "nullable": true,
            "xml": {
              "name": "Attachments",
              "wrapped": true
            }
          },
          "MessageStatus": {
            "$ref": "#/components/schemas/MessageStatus"
          },
          "DateCreated": {
            "type": "string",
            "description": "Date/time when the message was created.",
            "format": "date-time"
          },
          "DateUpdated": {
            "type": "string",
            "description": "Date/time when the message was last updated.",
            "format": "date-time",
            "nullable": true
          },
          "ClientReference": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Unique reference generated by the client application."
          },
          "MessageType": {
            "$ref": "#/components/schemas/MessageType"
          },
          "MessagePriority": {
            "$ref": "#/components/schemas/MessagePriority"
          },
          "SenderId": {
            "type": "string",
            "description": "Sender identifier. This field is used by the Notifications Portal to specify the sender name for the message.",
            "format": "uuid"
          },
          "CallbackUrl": {
            "maxLength": 800,
            "minLength": 0,
            "type": "string",
            "description": "If provided, the Notifications Portal will deliver a receipt back to the application \r\nthrough the HTTP POST method for the provided URL. \r\nIf URL is not provided the default API URL will be used.",
            "nullable": true,
            "example": "https://domain.com/listener"
          },
          "ScheduledDeliveryDate": {
            "type": "string",
            "description": "The date and time when the message will be scheduled for delivery. \r\nFor instant messaging provide the current date and time.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Delivery Report object",
        "xml": {
          "name": "DeliveryReport"
        }
      },
      "DeliveryReports": {
        "type": "object",
        "properties": {
          "Page": {
            "$ref": "#/components/schemas/Page"
          },
          "Collection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeliveryReport"
            },
            "description": "Collection of Delivery Reports",
            "nullable": true,
            "xml": {
              "name": "Collection",
              "wrapped": true
            }
          }
        },
        "additionalProperties": false,
        "description": "Delivery Reports collection object",
        "xml": {
          "name": "DeliveryReports"
        }
      },
      "Encoding": {
        "enum": [
          "GSM7",
          "UCS2"
        ],
        "type": "string",
        "description": "Represents the character encoding detected for the message text."
      },
      "Error": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string",
            "description": "Error messagee.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Error Message object.",
        "xml": {
          "name": "Error"
        }
      },
      "Group": {
        "required": [
          "GroupId",
          "Name"
        ],
        "type": "object",
        "properties": {
          "GroupId": {
            "type": "string",
            "description": "Group unique identifier",
            "format": "uuid"
          },
          "Name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Group Name"
          }
        },
        "additionalProperties": false,
        "description": "SubscriberGroup object.",
        "xml": {
          "name": "Group"
        }
      },
      "InboundMessage": {
        "type": "object",
        "properties": {
          "InboundMessageId": {
            "type": "string",
            "description": "Unique reference used to identify a message waiting processing in the inbound queue.",
            "format": "uuid"
          },
          "TransactionId": {
            "type": "string",
            "description": "Unique reference used to identify a group of batches in the inbound queue.",
            "format": "uuid"
          },
          "BatchId": {
            "type": "string",
            "description": "Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. \r\nThis is useful when in situations where a group of messages needs to be updated or deleted.",
            "format": "uuid"
          },
          "SenderId": {
            "type": "string",
            "description": "Sender identifier. This field is used by the Notifications Portal to specify the sender name for the message.",
            "format": "uuid"
          },
          "MessageType": {
            "$ref": "#/components/schemas/MessageType"
          },
          "MessagePriority": {
            "$ref": "#/components/schemas/MessagePriority"
          },
          "InboundMessageStatus": {
            "$ref": "#/components/schemas/InboundMessageStatus"
          },
          "FailedAttempts": {
            "type": "integer",
            "description": "Number of failed attempts by the Notifications System Backend.",
            "format": "int32"
          },
          "ProcessingReport": {
            "type": "string",
            "description": "This field contains the details of any failed attempts or system errors.",
            "nullable": true
          },
          "DateCreated": {
            "type": "string",
            "description": "Date/time when the message was created.",
            "format": "date-time"
          },
          "DateUpdated": {
            "type": "string",
            "description": "Date/time when the message was last updated.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Inbound Message object containing details about a message request in the Notifications System inbound queue.",
        "xml": {
          "name": "InboundMessage"
        }
      },
      "InboundMessageBatch": {
        "type": "object",
        "properties": {
          "InboundMessageId": {
            "type": "string",
            "description": "Unique reference used to identify a message waiting processing in the inbound queue.",
            "format": "uuid"
          },
          "TransactionId": {
            "type": "string",
            "description": "Unique reference used to identify a group of batches in the inbound queue.",
            "format": "uuid"
          },
          "BatchId": {
            "type": "string",
            "description": "Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. \r\nThis is useful when in situations where a group of messages needs to be updated or deleted.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Inbound Message batch containing information \r\nabout the batch and reference to query \r\ninbound queue processing status.",
        "xml": {
          "name": "MessageBatch"
        }
      },
      "InboundMessageStatus": {
        "enum": [
          "100",
          "200",
          "300",
          "400",
          "500"
        ],
        "type": "string",
        "description": "Inbound Message Status"
      },
      "InboundMessages": {
        "type": "object",
        "properties": {
          "Page": {
            "$ref": "#/components/schemas/Page"
          },
          "Collection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InboundMessage"
            },
            "description": "Collection of Inbound Messages",
            "nullable": true,
            "xml": {
              "name": "Collection",
              "wrapped": true
            }
          }
        },
        "additionalProperties": false,
        "description": "Inbound Messages collection object",
        "xml": {
          "name": "InboundMessages"
        }
      },
      "Language": {
        "enum": [
          "en",
          "it",
          "de",
          "fr",
          "es",
          "mt"
        ],
        "type": "string"
      },
      "MessageBatch": {
        "type": "object",
        "properties": {
          "BatchId": {
            "type": "string",
            "description": "Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. \r\nThis is useful when in situations where a group of messages needs to be updated or deleted.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Message batch information",
        "xml": {
          "name": "MessageBatch"
        }
      },
      "MessageContent": {
        "required": [
          "Language",
          "MessageBody"
        ],
        "type": "object",
        "properties": {
          "Language": {
            "$ref": "#/components/schemas/Language"
          },
          "Subject": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Message Subject.\r\nConditional - Used only for e-mail message types or message types requiring a Subject.",
            "nullable": true
          },
          "MessageBody": {
            "minLength": 1,
            "type": "string",
            "description": "Message Body."
          },
          "Attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            },
            "description": "Message attachment list.\r\nOptional - Used only for e-mail message types or message types allowing an attachment.",
            "nullable": true,
            "xml": {
              "name": "Attachments",
              "wrapped": true
            }
          }
        },
        "additionalProperties": false,
        "description": "The MessageContent object contains the data associated with \r\nthe message to be sent and the Language the message is drafted in.",
        "xml": {
          "name": "MessageContent"
        }
      },
      "MessagePriority": {
        "enum": [
          "100",
          "200"
        ],
        "type": "string",
        "description": "Message Priority"
      },
      "MessageReceipt": {
        "type": "object",
        "properties": {
          "Language": {
            "$ref": "#/components/schemas/Language"
          },
          "CharacterCount": {
            "type": "integer",
            "description": "The number of characters in the message. For SMS type messages, depending on the \"Encoding\" \r\nof the text provided, SMS text messages are limited to either 160 (GSM-7 encoding equating to \r\n7-bits per character) or 70 (UTF encoded messages, such as Maltese, using 16 bits per character) \r\ncharacters in length. If a message length exceeds 160 characters in case of 7-bit encoding (or \r\n70 characters for UTF encoding), the message is split up to multiple separate SMS and sent to \r\nthe handset separately, to be concatenated on the receiver's end. For GSM-7 encoded long messages, \r\nexceeding 160 characters, these are split into 153 character chunks (7 characters used for  \r\nsegmentation information and for concatenation individual messages back together). For UTF \r\nencoded long messages, they are split into 67 character chunks (with 3 characters used for \r\nsegmentation information and to concatenate the individual messages back together). Note that the \r\nstandard SMS message can only contain a maximum of 1120 bits, therefore messages will be \r\nlimited to 7 concatenated messages.",
            "format": "int32"
          },
          "MessagePartsCount": {
            "type": "integer",
            "description": "The number of messages the message text will be split into. \r\nFor SMS Type Messages, MessageCount will range from 1 to 7, \r\nwhile for Email Type Messages, the MessageCount property \r\nwill always be set to 1.",
            "format": "int32"
          },
          "MessagePartMaxCharacters": {
            "type": "integer",
            "description": "The calculated maximum number of characters for each Message \r\nPart, based on the message text encoding. This field will only \r\nbe populated for SMS Type Messages.",
            "format": "int32",
            "nullable": true
          },
          "MessageParts": {
            "type": "array",
            "items": {
              "type": "string",
              "xml": {
                "name": "string"
              }
            },
            "description": "This provides a preview for SMS Type Messages of how the message text will be \r\nsplit into parts as per the SMS standard.",
            "nullable": true,
            "xml": {
              "name": "MessageParts",
              "wrapped": true
            }
          },
          "Encoding": {
            "$ref": "#/components/schemas/Encoding"
          },
          "LocalMessagePrice": {
            "type": "number",
            "description": "The Local Price per Message in Euro including VAT.",
            "format": "double"
          },
          "InternationalMessagePrice": {
            "type": "number",
            "description": "The International Price per Message in Euro including VAT.",
            "format": "double"
          },
          "TotalRecipientsCount": {
            "type": "integer",
            "description": "The total number of recipients that the message will be sent.\r\nRecipients will be grouped by the Country Dialing Code provided.",
            "format": "int32"
          },
          "TotalMessagesCount": {
            "type": "integer",
            "description": "The actual total number of messages to be sent. For SMS Type Messages this is the \r\ntotal \"MessagePartsCount\" multiplied by the \"TotalRecipientsCount\".",
            "format": "int32"
          },
          "TotalCost": {
            "type": "number",
            "description": "The Total Cost to send the Message in Euro including VAT.",
            "format": "double"
          },
          "WarningMessages": {
            "type": "array",
            "items": {
              "type": "string",
              "xml": {
                "name": "string"
              }
            },
            "description": "Warning Messages provided by the Notifications System to be \r\ndisplayed by the client application.",
            "nullable": true,
            "xml": {
              "name": "WarningMessages",
              "wrapped": true
            }
          }
        },
        "additionalProperties": false,
        "description": "Message Receipt details.",
        "xml": {
          "name": "MessageReceipt"
        }
      },
      "MessageRequest": {
        "required": [
          "ClientReference",
          "MessagePriority",
          "MessageType",
          "ScheduledDeliveryDate",
          "SenderId"
        ],
        "type": "object",
        "properties": {
          "Contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            },
            "description": "The Contact Address is the delivery address where the message will be sent to.\r\nThis can be either an MSISDN or e-mail address depending on the message type.",
            "nullable": true,
            "xml": {
              "name": "Contacts",
              "wrapped": true
            }
          },
          "MessageContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageContent"
            },
            "description": "Message Content.",
            "nullable": true,
            "xml": {
              "name": "MessageContent",
              "wrapped": true
            }
          },
          "ClientReference": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Unique reference generated by the client application."
          },
          "MessageType": {
            "$ref": "#/components/schemas/MessageType"
          },
          "MessagePriority": {
            "$ref": "#/components/schemas/MessagePriority"
          },
          "SenderId": {
            "type": "string",
            "description": "Sender identifier. This field is used by the Notifications Portal to specify the sender name for the message.",
            "format": "uuid"
          },
          "CallbackUrl": {
            "maxLength": 800,
            "minLength": 0,
            "type": "string",
            "description": "If provided, the Notifications Portal will deliver a receipt back to the application \r\nthrough the HTTP POST method for the provided URL. \r\nIf URL is not provided the default API URL will be used.",
            "nullable": true,
            "example": "https://domain.com/listener"
          },
          "ScheduledDeliveryDate": {
            "type": "string",
            "description": "The date and time when the message will be scheduled for delivery. \r\nFor instant messaging provide the current date and time.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Message Request",
        "xml": {
          "name": "MessageRequest"
        }
      },
      "MessageStatus": {
        "enum": [
          "100",
          "105",
          "110",
          "115",
          "120",
          "125",
          "130",
          "135",
          "140",
          "145",
          "150",
          "160",
          "112",
          "170",
          "180"
        ],
        "type": "string",
        "description": "Message Status"
      },
      "MessageType": {
        "enum": [
          "email",
          "sms"
        ],
        "type": "string",
        "description": "Supported Message Types"
      },
      "Page": {
        "type": "object",
        "properties": {
          "Index": {
            "type": "integer",
            "description": "Page index.",
            "format": "int32"
          },
          "Size": {
            "type": "integer",
            "description": "Page size.",
            "format": "int32"
          },
          "Count": {
            "type": "integer",
            "description": "Total number of objects in collection.",
            "format": "int64"
          },
          "PreviousUri": {
            "type": "string",
            "description": "URI for the previous page. Empty if on the first page.",
            "nullable": true
          },
          "NextUri": {
            "type": "string",
            "description": "URI for the next page. Empty if on the last page.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Pagination meta data",
        "xml": {
          "name": "Page"
        }
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {
          "xml": {
            "name": "Object"
          }
        },
        "xml": {
          "name": "ProblemDetails"
        }
      },
      "Salutation": {
        "enum": [
          "Mr",
          "Miss",
          "Mrs",
          "Ms",
          "Dr",
          "Prof"
        ],
        "type": "string"
      },
      "SortDirection": {
        "enum": [
          "asc",
          "desc"
        ],
        "type": "string",
        "description": "Sort direction"
      },
      "Subscriber": {
        "required": [
          "SubscriberId"
        ],
        "type": "object",
        "properties": {
          "SubscriberId": {
            "type": "string",
            "description": "Subscriber unique identifier",
            "format": "uuid"
          },
          "Address": {
            "type": "string",
            "description": "Full Address Details",
            "nullable": true
          },
          "Locality": {
            "type": "string",
            "description": "Locality",
            "nullable": true
          },
          "PostCode": {
            "type": "string",
            "description": "Post Code",
            "nullable": true
          },
          "PhoneNo": {
            "type": "string",
            "description": "Phone Number",
            "nullable": true
          },
          "PhoneNoAlt": {
            "type": "string",
            "description": "Alternate Phone Number",
            "nullable": true
          },
          "Country": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 Alpha-2 Country Code",
            "nullable": true
          },
          "DisplayName": {
            "maxLength": 400,
            "minLength": 0,
            "type": "string",
            "description": "Display Name",
            "nullable": true
          },
          "Title": {
            "$ref": "#/components/schemas/Salutation"
          },
          "FirstName": {
            "maxLength": 160,
            "minLength": 0,
            "type": "string",
            "description": "First Name",
            "nullable": true
          },
          "LastName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Last Email",
            "nullable": true
          },
          "Email": {
            "pattern": "[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}",
            "type": "string",
            "description": "Email Address",
            "nullable": true,
            "example": "email@domain.com"
          },
          "MobileNo": {
            "pattern": "^\\d{10,15}$",
            "type": "string",
            "description": "Mobile Number",
            "nullable": true,
            "example": "0035699999999"
          },
          "PreferredLanguage": {
            "$ref": "#/components/schemas/Language"
          }
        },
        "additionalProperties": false,
        "description": "Subscriber object.",
        "xml": {
          "name": "Subscriber"
        }
      },
      "Subscribers": {
        "type": "object",
        "properties": {
          "Page": {
            "$ref": "#/components/schemas/Page"
          },
          "Collection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscriber"
            },
            "description": "Represents a Collection of Subscriber objects.",
            "nullable": true,
            "xml": {
              "name": "Collection",
              "wrapped": true
            }
          }
        },
        "additionalProperties": false,
        "description": "Subscribers object.",
        "xml": {
          "name": "Subscribers"
        }
      },
      "UpdateMessageBatchRequest": {
        "required": [
          "ClientReference",
          "MessagePriority",
          "MessageType",
          "ScheduledDeliveryDate",
          "SenderId"
        ],
        "type": "object",
        "properties": {
          "MessageContent": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageContent"
            },
            "description": "Message Content.",
            "nullable": true,
            "xml": {
              "name": "MessageContent",
              "wrapped": true
            }
          },
          "ClientReference": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Unique reference generated by the client application."
          },
          "MessageType": {
            "$ref": "#/components/schemas/MessageType"
          },
          "MessagePriority": {
            "$ref": "#/components/schemas/MessagePriority"
          },
          "SenderId": {
            "type": "string",
            "description": "Sender identifier. This field is used by the Notifications Portal to specify the sender name for the message.",
            "format": "uuid"
          },
          "CallbackUrl": {
            "maxLength": 800,
            "minLength": 0,
            "type": "string",
            "description": "If provided, the Notifications Portal will deliver a receipt back to the application \r\nthrough the HTTP POST method for the provided URL. \r\nIf URL is not provided the default API URL will be used.",
            "nullable": true,
            "example": "https://domain.com/listener"
          },
          "ScheduledDeliveryDate": {
            "type": "string",
            "description": "The date and time when the message will be scheduled for delivery. \r\nFor instant messaging provide the current date and time.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Message Request",
        "xml": {
          "name": "Message"
        }
      },
      "UpdateMessageRequest": {
        "required": [
          "ClientReference",
          "Contact",
          "MessageBody",
          "MessagePriority",
          "MessageType",
          "ScheduledDeliveryDate",
          "SenderId"
        ],
        "type": "object",
        "properties": {
          "Contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "Subject": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Message Subject.\r\nConditional - Used only for e-mail message types or message types requiring a Subject.",
            "nullable": true
          },
          "MessageBody": {
            "minLength": 1,
            "type": "string",
            "description": "Message Body."
          },
          "Attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            },
            "description": "Message attachment list.\r\nOptional - Used only for e-mail message types or message types allowing an attachement.",
            "nullable": true,
            "xml": {
              "name": "Attachments",
              "wrapped": true
            }
          },
          "ClientReference": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Unique reference generated by the client application."
          },
          "MessageType": {
            "$ref": "#/components/schemas/MessageType"
          },
          "MessagePriority": {
            "$ref": "#/components/schemas/MessagePriority"
          },
          "SenderId": {
            "type": "string",
            "description": "Sender identifier. This field is used by the Notifications Portal to specify the sender name for the message.",
            "format": "uuid"
          },
          "CallbackUrl": {
            "maxLength": 800,
            "minLength": 0,
            "type": "string",
            "description": "If provided, the Notifications Portal will deliver a receipt back to the application \r\nthrough the HTTP POST method for the provided URL. \r\nIf URL is not provided the default API URL will be used.",
            "nullable": true,
            "example": "https://domain.com/listener"
          },
          "ScheduledDeliveryDate": {
            "type": "string",
            "description": "The date and time when the message will be scheduled for delivery. \r\nFor instant messaging provide the current date and time.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Message Request",
        "xml": {
          "name": "Message"
        }
      },
      "UpdateScheduledMessageBatchRequest": {
        "required": [
          "ScheduledDeliveryDate"
        ],
        "type": "object",
        "properties": {
          "ScheduledDeliveryDate": {
            "type": "string",
            "description": "The date and time when the message will be scheduled for delivery.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Message Schedule",
        "xml": {
          "name": "MessageSchedule"
        }
      },
      "UpdateScheduledMessageRequest": {
        "required": [
          "ScheduledDeliveryDate"
        ],
        "type": "object",
        "properties": {
          "ScheduledDeliveryDate": {
            "type": "string",
            "description": "The date and time when the message will be scheduled for delivery.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Message Schedule",
        "xml": {
          "name": "MessageSchedule"
        }
      },
      "UpdateSubscriberGroupRequest": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Group Name"
          }
        },
        "additionalProperties": false,
        "description": "Update Subscriber GroupRequest",
        "xml": {
          "name": "Group"
        }
      },
      "UpdateSubscriberRequest": {
        "type": "object",
        "properties": {
          "Address": {
            "type": "string",
            "description": "Full Address Details",
            "nullable": true
          },
          "Locality": {
            "type": "string",
            "description": "Locality",
            "nullable": true
          },
          "PostCode": {
            "type": "string",
            "description": "Post Code",
            "nullable": true
          },
          "PhoneNo": {
            "type": "string",
            "description": "Phone Number",
            "nullable": true
          },
          "PhoneNoAlt": {
            "type": "string",
            "description": "Alternate Phone Number",
            "nullable": true
          },
          "Country": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "ISO 3166-1 Alpha-2 Country Code",
            "nullable": true
          },
          "DisplayName": {
            "maxLength": 400,
            "minLength": 0,
            "type": "string",
            "description": "Display Name",
            "nullable": true
          },
          "Title": {
            "$ref": "#/components/schemas/Salutation"
          },
          "FirstName": {
            "maxLength": 160,
            "minLength": 0,
            "type": "string",
            "description": "First Name",
            "nullable": true
          },
          "LastName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Last Email",
            "nullable": true
          },
          "Email": {
            "pattern": "[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}",
            "type": "string",
            "description": "Email Address",
            "nullable": true,
            "example": "email@domain.com"
          },
          "MobileNo": {
            "pattern": "^\\d{10,15}$",
            "type": "string",
            "description": "Mobile Number",
            "nullable": true,
            "example": "0035699999999"
          },
          "PreferredLanguage": {
            "$ref": "#/components/schemas/Language"
          }
        },
        "additionalProperties": false,
        "description": "Update Subscriber Request",
        "xml": {
          "name": "Subscriber"
        }
      },
      "Validation": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "description": "Key representing the failed filed.",
            "nullable": true
          },
          "ErrorMessage": {
            "type": "string",
            "description": "Error message for the failed field.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Validation Error Information",
        "xml": {
          "name": "Validation"
        }
      }
    },
    "securitySchemes": {
      "SMG-V1-HMAC-SHA256": {
        "type": "apiKey",
        "description": "The Notifications API uses an authentication scheme based on the OAuth 2 specification (<a href=\"https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-http-mac-01\" target=\"_blank\">IETF Oauth v2 HTTP MAC{/a}). All requests to resources must be accompanied by a correct \"Authorization\" header as per this specification.  The client includes the MAC key identifier, nonce, and request MAC with the request.",
        "in": "query",
        "name": "SmgV1HmacSha256"
      }
    }
  }
}