/*
 * Norsk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: helpdesk@norsk-global.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DA.Systems.Cube.Norsk.Client.FileParameter;
using OpenAPIDateConverter = DA.Systems.Cube.Norsk.Client.OpenAPIDateConverter;

namespace DA.Systems.Cube.Norsk.Model
{
    /// <summary>
    /// ShipmentBookingResponse
    /// </summary>
    [DataContract(Name = "ShipmentBookingResponse")]
    public class ShipmentBookingResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentBookingResponse" /> class.
        /// </summary>
        /// <param name="barcode">the barcode shown on the shipment label..</param>
        /// <param name="label">Consolidated multi page pdf of the label and archive documents.  Base64 encoded copy of the default shipment labels in 6x4 in PDF format.</param>
        /// <param name="norskBarcode">Barcode/identifier allocated for the shipment  by Norsk for tracking of the shipment.  May not be displayed on the label..</param>
        /// <param name="items">A collection containing details for each shipment item.</param>
        /// <param name="archiveDocuments">A collection of any non label documents to go with the shipment..</param>
        /// <param name="collectionReferenceNumber">Supplier collection reference number for shipment with collection.  Will be null for non collection shipment.</param>
        /// <param name="collectionDateTime">Supplier collection date with time number for shipment with collection.  Will be null for non collection shipment.</param>
        public ShipmentBookingResponse(string barcode = default(string), byte[] label = default(byte[]), string norskBarcode = default(string), List<ShipmentBookingItem> items = default(List<ShipmentBookingItem>), List<ShipmentArchiveDocument> archiveDocuments = default(List<ShipmentArchiveDocument>), string collectionReferenceNumber = default(string), DateTimeOffset? collectionDateTime = default(DateTimeOffset?))
        {
            Barcode = barcode;
            Label = label;
            NorskBarcode = norskBarcode;
            Items = items;
            ArchiveDocuments = archiveDocuments;
            CollectionReferenceNumber = collectionReferenceNumber;
            CollectionDateTime = collectionDateTime;
        }

        /// <summary>
        /// the barcode shown on the shipment label.
        /// </summary>
        /// <value>the barcode shown on the shipment label.</value>
        [DataMember(Name = "Barcode", EmitDefaultValue = true)]
        public string Barcode { get; set; }

        /// <summary>
        /// Consolidated multi page pdf of the label and archive documents.  Base64 encoded copy of the default shipment labels in 6x4 in PDF format
        /// </summary>
        /// <value>Consolidated multi page pdf of the label and archive documents.  Base64 encoded copy of the default shipment labels in 6x4 in PDF format</value>
        [DataMember(Name = "Label", EmitDefaultValue = true)]
        public byte[] Label { get; set; }

        /// <summary>
        /// Barcode/identifier allocated for the shipment  by Norsk for tracking of the shipment.  May not be displayed on the label.
        /// </summary>
        /// <value>Barcode/identifier allocated for the shipment  by Norsk for tracking of the shipment.  May not be displayed on the label.</value>
        [DataMember(Name = "NorskBarcode", EmitDefaultValue = true)]
        public string NorskBarcode { get; set; }

        /// <summary>
        /// A collection containing details for each shipment item
        /// </summary>
        /// <value>A collection containing details for each shipment item</value>
        [DataMember(Name = "Items", EmitDefaultValue = true)]
        public List<ShipmentBookingItem> Items { get; set; }

        /// <summary>
        /// A collection of any non label documents to go with the shipment.
        /// </summary>
        /// <value>A collection of any non label documents to go with the shipment.</value>
        [DataMember(Name = "ArchiveDocuments", EmitDefaultValue = true)]
        public List<ShipmentArchiveDocument> ArchiveDocuments { get; set; }

        /// <summary>
        /// Supplier collection reference number for shipment with collection.  Will be null for non collection shipment
        /// </summary>
        /// <value>Supplier collection reference number for shipment with collection.  Will be null for non collection shipment</value>
        [DataMember(Name = "CollectionReferenceNumber", EmitDefaultValue = true)]
        public string CollectionReferenceNumber { get; set; }

        /// <summary>
        /// Supplier collection date with time number for shipment with collection.  Will be null for non collection shipment
        /// </summary>
        /// <value>Supplier collection date with time number for shipment with collection.  Will be null for non collection shipment</value>
        [DataMember(Name = "CollectionDateTime", EmitDefaultValue = true)]
        public DateTimeOffset? CollectionDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentBookingResponse {\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  NorskBarcode: ").Append(NorskBarcode).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  ArchiveDocuments: ").Append(ArchiveDocuments).Append("\n");
            sb.Append("  CollectionReferenceNumber: ").Append(CollectionReferenceNumber).Append("\n");
            sb.Append("  CollectionDateTime: ").Append(CollectionDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
