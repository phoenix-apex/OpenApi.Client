/*
 * Norsk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: helpdesk@norsk-global.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DA.Systems.Cube.Norsk.Client.FileParameter;
using OpenAPIDateConverter = DA.Systems.Cube.Norsk.Client.OpenAPIDateConverter;

namespace DA.Systems.Cube.Norsk.Model
{
    /// <summary>
    /// Address
    /// </summary>
    [DataContract(Name = "Address")]
    public class Address : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Address() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="contactName">contactName (required).</param>
        /// <param name="company">company.</param>
        /// <param name="address1">address1 (required).</param>
        /// <param name="address2">address2.</param>
        /// <param name="address3">address3.</param>
        /// <param name="city">city (required).</param>
        /// <param name="division">division.</param>
        /// <param name="email">email.</param>
        /// <param name="divisionCode">divisionCode.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="fax">fax.</param>
        /// <param name="zipcode">zipcode.</param>
        /// <param name="mobileNumber">mobileNumber.</param>
        /// <param name="countryCode">Country specifed as a two letter ISO code (required).</param>
        /// <param name="vAT">Optional.</param>
        /// <param name="eORI">Optional.</param>
        /// <param name="taxId">Optional.</param>
        public Address(string contactName = default(string), string company = default(string), string address1 = default(string), string address2 = default(string), string address3 = default(string), string city = default(string), string division = default(string), string email = default(string), string divisionCode = default(string), string phoneNumber = default(string), string fax = default(string), string zipcode = default(string), string mobileNumber = default(string), string countryCode = default(string), string vAT = default(string), string eORI = default(string), string taxId = default(string))
        {
            // to ensure "contactName" is required (not null)
            if (contactName == null)
            {
                throw new ArgumentNullException("contactName is a required property for Address and cannot be null");
            }
            ContactName = contactName;
            // to ensure "address1" is required (not null)
            if (address1 == null)
            {
                throw new ArgumentNullException("address1 is a required property for Address and cannot be null");
            }
            Address1 = address1;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for Address and cannot be null");
            }
            City = city;
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new ArgumentNullException("countryCode is a required property for Address and cannot be null");
            }
            CountryCode = countryCode;
            Company = company;
            Address2 = address2;
            Address3 = address3;
            Division = division;
            Email = email;
            DivisionCode = divisionCode;
            PhoneNumber = phoneNumber;
            Fax = fax;
            Zipcode = zipcode;
            MobileNumber = mobileNumber;
            VAT = vAT;
            EORI = eORI;
            TaxId = taxId;
        }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name = "ContactName", IsRequired = true, EmitDefaultValue = true)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "Company", EmitDefaultValue = true)]
        public string Company { get; set; }

        /// <summary>
        /// Gets or Sets Address1
        /// </summary>
        [DataMember(Name = "Address1", IsRequired = true, EmitDefaultValue = true)]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or Sets Address2
        /// </summary>
        [DataMember(Name = "Address2", EmitDefaultValue = true)]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or Sets Address3
        /// </summary>
        [DataMember(Name = "Address3", EmitDefaultValue = true)]
        public string Address3 { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "City", IsRequired = true, EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Division
        /// </summary>
        [DataMember(Name = "Division", EmitDefaultValue = true)]
        public string Division { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "Email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets DivisionCode
        /// </summary>
        [DataMember(Name = "DivisionCode", EmitDefaultValue = true)]
        public string DivisionCode { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "PhoneNumber", EmitDefaultValue = true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Fax
        /// </summary>
        [DataMember(Name = "Fax", EmitDefaultValue = true)]
        public string Fax { get; set; }

        /// <summary>
        /// Gets or Sets Zipcode
        /// </summary>
        [DataMember(Name = "Zipcode", EmitDefaultValue = true)]
        public string Zipcode { get; set; }

        /// <summary>
        /// Gets or Sets MobileNumber
        /// </summary>
        [DataMember(Name = "MobileNumber", EmitDefaultValue = true)]
        public string MobileNumber { get; set; }

        /// <summary>
        /// Country specifed as a two letter ISO code
        /// </summary>
        /// <value>Country specifed as a two letter ISO code</value>
        [DataMember(Name = "CountryCode", IsRequired = true, EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name = "VAT", EmitDefaultValue = true)]
        public string VAT { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name = "EORI", EmitDefaultValue = true)]
        public string EORI { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>
        [DataMember(Name = "TaxId", EmitDefaultValue = true)]
        public string TaxId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  Address3: ").Append(Address3).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Division: ").Append(Division).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  DivisionCode: ").Append(DivisionCode).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("  MobileNumber: ").Append(MobileNumber).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  VAT: ").Append(VAT).Append("\n");
            sb.Append("  EORI: ").Append(EORI).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContactName (string) maxLength
            if (ContactName != null && ContactName.Length > 35)
            {
                yield return new ValidationResult("Invalid value for ContactName, length must be less than 35.", new [] { "ContactName" });
            }

            // ContactName (string) minLength
            if (ContactName != null && ContactName.Length < 2)
            {
                yield return new ValidationResult("Invalid value for ContactName, length must be greater than 2.", new [] { "ContactName" });
            }

            // Company (string) maxLength
            if (Company != null && Company.Length > 35)
            {
                yield return new ValidationResult("Invalid value for Company, length must be less than 35.", new [] { "Company" });
            }

            // Address1 (string) maxLength
            if (Address1 != null && Address1.Length > 45)
            {
                yield return new ValidationResult("Invalid value for Address1, length must be less than 45.", new [] { "Address1" });
            }

            // Address1 (string) minLength
            if (Address1 != null && Address1.Length < 2)
            {
                yield return new ValidationResult("Invalid value for Address1, length must be greater than 2.", new [] { "Address1" });
            }

            // Address2 (string) maxLength
            if (Address2 != null && Address2.Length > 45)
            {
                yield return new ValidationResult("Invalid value for Address2, length must be less than 45.", new [] { "Address2" });
            }

            // Address3 (string) maxLength
            if (Address3 != null && Address3.Length > 45)
            {
                yield return new ValidationResult("Invalid value for Address3, length must be less than 45.", new [] { "Address3" });
            }

            // City (string) maxLength
            if (City != null && City.Length > 35)
            {
                yield return new ValidationResult("Invalid value for City, length must be less than 35.", new [] { "City" });
            }

            // City (string) minLength
            if (City != null && City.Length < 2)
            {
                yield return new ValidationResult("Invalid value for City, length must be greater than 2.", new [] { "City" });
            }

            // Division (string) maxLength
            if (Division != null && Division.Length > 35)
            {
                yield return new ValidationResult("Invalid value for Division, length must be less than 35.", new [] { "Division" });
            }

            // Email (string) maxLength
            if (Email != null && Email.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Email, length must be less than 50.", new [] { "Email" });
            }

            // PhoneNumber (string) maxLength
            if (PhoneNumber != null && PhoneNumber.Length > 20)
            {
                yield return new ValidationResult("Invalid value for PhoneNumber, length must be less than 20.", new [] { "PhoneNumber" });
            }

            // CountryCode (string) minLength
            if (CountryCode != null && CountryCode.Length < 1)
            {
                yield return new ValidationResult("Invalid value for CountryCode, length must be greater than 1.", new [] { "CountryCode" });
            }

            yield break;
        }
    }

}
