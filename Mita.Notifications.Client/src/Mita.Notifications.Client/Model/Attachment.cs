/*
 * MITA Notifications Platform REST API
 *
 * The Notifications REST API allows programmatic access to the Notifications Portal message funtionality. To use the REST API, you will need a Notifications Portal Account and an API key and secret. You can generate from the Notifications Portal using the API Key Manager.The REST API takes full advantage of all HTTP headers. Each part of a request and response is meaningful, including the request method (GET/POST, etc.), the individual headers (Location, Content-Type, Accept, etc.), and the response status code (200, 400, 404, etc.). Use of this API assumes a working knowledge of these HTTP components, and general use of RESTful web APIs.
 *
 * The version of the OpenAPI document: v1
 * Contact: notifications.mita@gov.mt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mita.Notifications.Client.Client.OpenAPIDateConverter;

namespace Mita.Notifications.Client.Model;

/// <summary>
/// Message Attachment object.
/// </summary>
[DataContract(Name = "Attachment")]
public partial class Attachment : IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="Attachment" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected Attachment() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="Attachment" /> class.
    /// </summary>
    /// <param name="contentStream">The file content stream for this attachment. (required).</param>
    /// <param name="fileName">File name. (required).</param>
    /// <param name="contentType">Content type (MIME) associated with this attachment. (required).</param>
    public Attachment(byte[] contentStream = default(byte[]), string fileName = default(string), string contentType = default(string))
    {
            // to ensure "contentStream" is required (not null)
            if (contentStream == null)
            {
                throw new ArgumentNullException("contentStream is a required property for Attachment and cannot be null");
            }
            this.ContentStream = contentStream;
            // to ensure "fileName" is required (not null)
            if (fileName == null)
            {
                throw new ArgumentNullException("fileName is a required property for Attachment and cannot be null");
            }
            this.FileName = fileName;
            // to ensure "contentType" is required (not null)
            if (contentType == null)
            {
                throw new ArgumentNullException("contentType is a required property for Attachment and cannot be null");
            }
            this.ContentType = contentType;
        }

    /// <summary>
    /// The file content stream for this attachment.
    /// </summary>
    /// <value>The file content stream for this attachment.</value>
    [DataMember(Name = "ContentStream", IsRequired = true, EmitDefaultValue = true)]
    public byte[] ContentStream { get; set; }

    /// <summary>
    /// File name.
    /// </summary>
    /// <value>File name.</value>
    [DataMember(Name = "FileName", IsRequired = true, EmitDefaultValue = true)]
    public string FileName { get; set; }

    /// <summary>
    /// Content type (MIME) associated with this attachment.
    /// </summary>
    /// <value>Content type (MIME) associated with this attachment.</value>
    [DataMember(Name = "ContentType", IsRequired = true, EmitDefaultValue = true)]
    public string ContentType { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Attachment {\n");
            sb.Append("  ContentStream: ").Append(ContentStream).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
            // FileName (string) minLength
            if (this.FileName != null && this.FileName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileName, length must be greater than 1.", new [] { "FileName" });
            }

            // ContentType (string) minLength
            if (this.ContentType != null && this.ContentType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContentType, length must be greater than 1.", new [] { "ContentType" });
            }

            yield break;
        }
}