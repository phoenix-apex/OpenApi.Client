/*
 * MITA Notifications Platform REST API
 *
 * The Notifications REST API allows programmatic access to the Notifications Portal message funtionality. To use the REST API, you will need a Notifications Portal Account and an API key and secret. You can generate from the Notifications Portal using the API Key Manager.The REST API takes full advantage of all HTTP headers. Each part of a request and response is meaningful, including the request method (GET/POST, etc.), the individual headers (Location, Content-Type, Accept, etc.), and the response status code (200, 400, 404, etc.). Use of this API assumes a working knowledge of these HTTP components, and general use of RESTful web APIs.
 *
 * The version of the OpenAPI document: v1
 * Contact: notifications.mita@gov.mt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mita.Notifications.Client.Client.OpenAPIDateConverter;

namespace Mita.Notifications.Client.Model;

/// <summary>
/// Message Receipt details.
/// </summary>
[DataContract(Name = "MessageReceipt")]
public partial class MessageReceipt : IValidatableObject
{

    /// <summary>
    /// Gets or Sets Language
    /// </summary>
    [DataMember(Name = "Language", EmitDefaultValue = true)]
    public Language? Language { get; set; }

    /// <summary>
    /// Gets or Sets Encoding
    /// </summary>
    [DataMember(Name = "Encoding", EmitDefaultValue = true)]
    public Encoding? Encoding { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="MessageReceipt" /> class.
    /// </summary>
    /// <param name="language">language.</param>
    /// <param name="characterCount">The number of characters in the message. For SMS type messages, depending on the \&quot;Encoding\&quot;   of the text provided, SMS text messages are limited to either 160 (GSM-7 encoding equating to   7-bits per character) or 70 (UTF encoded messages, such as Maltese, using 16 bits per character)   characters in length. If a message length exceeds 160 characters in case of 7-bit encoding (or   70 characters for UTF encoding), the message is split up to multiple separate SMS and sent to   the handset separately, to be concatenated on the receiver&#39;s end. For GSM-7 encoded long messages,   exceeding 160 characters, these are split into 153 character chunks (7 characters used for    segmentation information and for concatenation individual messages back together). For UTF   encoded long messages, they are split into 67 character chunks (with 3 characters used for   segmentation information and to concatenate the individual messages back together). Note that the   standard SMS message can only contain a maximum of 1120 bits, therefore messages will be   limited to 7 concatenated messages..</param>
    /// <param name="messagePartsCount">The number of messages the message text will be split into.   For SMS Type Messages, MessageCount will range from 1 to 7,   while for Email Type Messages, the MessageCount property   will always be set to 1..</param>
    /// <param name="messagePartMaxCharacters">The calculated maximum number of characters for each Message   Part, based on the message text encoding. This field will only   be populated for SMS Type Messages..</param>
    /// <param name="messageParts">This provides a preview for SMS Type Messages of how the message text will be   split into parts as per the SMS standard..</param>
    /// <param name="encoding">encoding.</param>
    /// <param name="localMessagePrice">The Local Price per Message in Euro including VAT..</param>
    /// <param name="internationalMessagePrice">The International Price per Message in Euro including VAT..</param>
    /// <param name="totalRecipientsCount">The total number of recipients that the message will be sent.  Recipients will be grouped by the Country Dialing Code provided..</param>
    /// <param name="totalMessagesCount">The actual total number of messages to be sent. For SMS Type Messages this is the   total \&quot;MessagePartsCount\&quot; multiplied by the \&quot;TotalRecipientsCount\&quot;..</param>
    /// <param name="totalCost">The Total Cost to send the Message in Euro including VAT..</param>
    /// <param name="warningMessages">Warning Messages provided by the Notifications System to be   displayed by the client application..</param>
    public MessageReceipt(Language? language = default(Language?), int characterCount = default(int), int messagePartsCount = default(int), int? messagePartMaxCharacters = default(int?), List<string> messageParts = default(List<string>), Encoding? encoding = default(Encoding?), double localMessagePrice = default(double), double internationalMessagePrice = default(double), int totalRecipientsCount = default(int), int totalMessagesCount = default(int), double totalCost = default(double), List<string> warningMessages = default(List<string>))
    {
            this.Language = language;
            this.CharacterCount = characterCount;
            this.MessagePartsCount = messagePartsCount;
            this.MessagePartMaxCharacters = messagePartMaxCharacters;
            this.MessageParts = messageParts;
            this.Encoding = encoding;
            this.LocalMessagePrice = localMessagePrice;
            this.InternationalMessagePrice = internationalMessagePrice;
            this.TotalRecipientsCount = totalRecipientsCount;
            this.TotalMessagesCount = totalMessagesCount;
            this.TotalCost = totalCost;
            this.WarningMessages = warningMessages;
        }

    /// <summary>
    /// The number of characters in the message. For SMS type messages, depending on the \&quot;Encoding\&quot;   of the text provided, SMS text messages are limited to either 160 (GSM-7 encoding equating to   7-bits per character) or 70 (UTF encoded messages, such as Maltese, using 16 bits per character)   characters in length. If a message length exceeds 160 characters in case of 7-bit encoding (or   70 characters for UTF encoding), the message is split up to multiple separate SMS and sent to   the handset separately, to be concatenated on the receiver&#39;s end. For GSM-7 encoded long messages,   exceeding 160 characters, these are split into 153 character chunks (7 characters used for    segmentation information and for concatenation individual messages back together). For UTF   encoded long messages, they are split into 67 character chunks (with 3 characters used for   segmentation information and to concatenate the individual messages back together). Note that the   standard SMS message can only contain a maximum of 1120 bits, therefore messages will be   limited to 7 concatenated messages.
    /// </summary>
    /// <value>The number of characters in the message. For SMS type messages, depending on the \&quot;Encoding\&quot;   of the text provided, SMS text messages are limited to either 160 (GSM-7 encoding equating to   7-bits per character) or 70 (UTF encoded messages, such as Maltese, using 16 bits per character)   characters in length. If a message length exceeds 160 characters in case of 7-bit encoding (or   70 characters for UTF encoding), the message is split up to multiple separate SMS and sent to   the handset separately, to be concatenated on the receiver&#39;s end. For GSM-7 encoded long messages,   exceeding 160 characters, these are split into 153 character chunks (7 characters used for    segmentation information and for concatenation individual messages back together). For UTF   encoded long messages, they are split into 67 character chunks (with 3 characters used for   segmentation information and to concatenate the individual messages back together). Note that the   standard SMS message can only contain a maximum of 1120 bits, therefore messages will be   limited to 7 concatenated messages.</value>
    [DataMember(Name = "CharacterCount", EmitDefaultValue = true)]
    public int CharacterCount { get; set; }

    /// <summary>
    /// The number of messages the message text will be split into.   For SMS Type Messages, MessageCount will range from 1 to 7,   while for Email Type Messages, the MessageCount property   will always be set to 1.
    /// </summary>
    /// <value>The number of messages the message text will be split into.   For SMS Type Messages, MessageCount will range from 1 to 7,   while for Email Type Messages, the MessageCount property   will always be set to 1.</value>
    [DataMember(Name = "MessagePartsCount", EmitDefaultValue = true)]
    public int MessagePartsCount { get; set; }

    /// <summary>
    /// The calculated maximum number of characters for each Message   Part, based on the message text encoding. This field will only   be populated for SMS Type Messages.
    /// </summary>
    /// <value>The calculated maximum number of characters for each Message   Part, based on the message text encoding. This field will only   be populated for SMS Type Messages.</value>
    [DataMember(Name = "MessagePartMaxCharacters", EmitDefaultValue = true)]
    public int? MessagePartMaxCharacters { get; set; }

    /// <summary>
    /// This provides a preview for SMS Type Messages of how the message text will be   split into parts as per the SMS standard.
    /// </summary>
    /// <value>This provides a preview for SMS Type Messages of how the message text will be   split into parts as per the SMS standard.</value>
    [DataMember(Name = "MessageParts", EmitDefaultValue = true)]
    public List<string> MessageParts { get; set; }

    /// <summary>
    /// The Local Price per Message in Euro including VAT.
    /// </summary>
    /// <value>The Local Price per Message in Euro including VAT.</value>
    [DataMember(Name = "LocalMessagePrice", EmitDefaultValue = true)]
    public double LocalMessagePrice { get; set; }

    /// <summary>
    /// The International Price per Message in Euro including VAT.
    /// </summary>
    /// <value>The International Price per Message in Euro including VAT.</value>
    [DataMember(Name = "InternationalMessagePrice", EmitDefaultValue = true)]
    public double InternationalMessagePrice { get; set; }

    /// <summary>
    /// The total number of recipients that the message will be sent.  Recipients will be grouped by the Country Dialing Code provided.
    /// </summary>
    /// <value>The total number of recipients that the message will be sent.  Recipients will be grouped by the Country Dialing Code provided.</value>
    [DataMember(Name = "TotalRecipientsCount", EmitDefaultValue = true)]
    public int TotalRecipientsCount { get; set; }

    /// <summary>
    /// The actual total number of messages to be sent. For SMS Type Messages this is the   total \&quot;MessagePartsCount\&quot; multiplied by the \&quot;TotalRecipientsCount\&quot;.
    /// </summary>
    /// <value>The actual total number of messages to be sent. For SMS Type Messages this is the   total \&quot;MessagePartsCount\&quot; multiplied by the \&quot;TotalRecipientsCount\&quot;.</value>
    [DataMember(Name = "TotalMessagesCount", EmitDefaultValue = true)]
    public int TotalMessagesCount { get; set; }

    /// <summary>
    /// The Total Cost to send the Message in Euro including VAT.
    /// </summary>
    /// <value>The Total Cost to send the Message in Euro including VAT.</value>
    [DataMember(Name = "TotalCost", EmitDefaultValue = true)]
    public double TotalCost { get; set; }

    /// <summary>
    /// Warning Messages provided by the Notifications System to be   displayed by the client application.
    /// </summary>
    /// <value>Warning Messages provided by the Notifications System to be   displayed by the client application.</value>
    [DataMember(Name = "WarningMessages", EmitDefaultValue = true)]
    public List<string> WarningMessages { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageReceipt {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  CharacterCount: ").Append(CharacterCount).Append("\n");
            sb.Append("  MessagePartsCount: ").Append(MessagePartsCount).Append("\n");
            sb.Append("  MessagePartMaxCharacters: ").Append(MessagePartMaxCharacters).Append("\n");
            sb.Append("  MessageParts: ").Append(MessageParts).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  LocalMessagePrice: ").Append(LocalMessagePrice).Append("\n");
            sb.Append("  InternationalMessagePrice: ").Append(InternationalMessagePrice).Append("\n");
            sb.Append("  TotalRecipientsCount: ").Append(TotalRecipientsCount).Append("\n");
            sb.Append("  TotalMessagesCount: ").Append(TotalMessagesCount).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  WarningMessages: ").Append(WarningMessages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
            yield break;
        }
}