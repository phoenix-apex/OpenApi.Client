/*
 * MITA Notifications Platform REST API
 *
 * The Notifications REST API allows programmatic access to the Notifications Portal message funtionality. To use the REST API, you will need a Notifications Portal Account and an API key and secret. You can generate from the Notifications Portal using the API Key Manager.The REST API takes full advantage of all HTTP headers. Each part of a request and response is meaningful, including the request method (GET/POST, etc.), the individual headers (Location, Content-Type, Accept, etc.), and the response status code (200, 400, 404, etc.). Use of this API assumes a working knowledge of these HTTP components, and general use of RESTful web APIs.
 *
 * The version of the OpenAPI document: v1
 * Contact: notifications.mita@gov.mt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mita.Notifications.Client.Client.OpenAPIDateConverter;

namespace Mita.Notifications.Client.Model;

/// <summary>
/// The MessageContent object contains the data associated with   the message to be sent and the Language the message is drafted in.
/// </summary>
[DataContract(Name = "MessageContent")]
public partial class MessageContent : IValidatableObject
{

    /// <summary>
    /// Gets or Sets Language
    /// </summary>
    [DataMember(Name = "Language", IsRequired = true, EmitDefaultValue = true)]
    public Language Language { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="MessageContent" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected MessageContent() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="MessageContent" /> class.
    /// </summary>
    /// <param name="language">language (required).</param>
    /// <param name="subject">Message Subject.  Conditional - Used only for e-mail message types or message types requiring a Subject..</param>
    /// <param name="messageBody">Message Body. (required).</param>
    /// <param name="attachments">Message attachment list.  Optional - Used only for e-mail message types or message types allowing an attachment..</param>
    public MessageContent(Language language = default(Language), string subject = default(string), string messageBody = default(string), List<Attachment> attachments = default(List<Attachment>))
    {
            this.Language = language;
            // to ensure "messageBody" is required (not null)
            if (messageBody == null)
            {
                throw new ArgumentNullException("messageBody is a required property for MessageContent and cannot be null");
            }
            this.MessageBody = messageBody;
            this.Subject = subject;
            this.Attachments = attachments;
        }

    /// <summary>
    /// Message Subject.  Conditional - Used only for e-mail message types or message types requiring a Subject.
    /// </summary>
    /// <value>Message Subject.  Conditional - Used only for e-mail message types or message types requiring a Subject.</value>
    [DataMember(Name = "Subject", EmitDefaultValue = true)]
    public string Subject { get; set; }

    /// <summary>
    /// Message Body.
    /// </summary>
    /// <value>Message Body.</value>
    [DataMember(Name = "MessageBody", IsRequired = true, EmitDefaultValue = true)]
    public string MessageBody { get; set; }

    /// <summary>
    /// Message attachment list.  Optional - Used only for e-mail message types or message types allowing an attachment.
    /// </summary>
    /// <value>Message attachment list.  Optional - Used only for e-mail message types or message types allowing an attachment.</value>
    [DataMember(Name = "Attachments", EmitDefaultValue = true)]
    public List<Attachment> Attachments { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageContent {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  MessageBody: ").Append(MessageBody).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
            // Subject (string) maxLength
            if (this.Subject != null && this.Subject.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Subject, length must be less than 255.", new [] { "Subject" });
            }

            // Subject (string) minLength
            if (this.Subject != null && this.Subject.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Subject, length must be greater than 0.", new [] { "Subject" });
            }

            // MessageBody (string) minLength
            if (this.MessageBody != null && this.MessageBody.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MessageBody, length must be greater than 1.", new [] { "MessageBody" });
            }

            yield break;
        }
}