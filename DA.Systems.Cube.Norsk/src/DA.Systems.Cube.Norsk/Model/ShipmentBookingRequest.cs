/*
 * Norsk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: helpdesk@norsk-global.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DA.Systems.Cube.Norsk.Client.FileParameter;
using OpenAPIDateConverter = DA.Systems.Cube.Norsk.Client.OpenAPIDateConverter;

namespace DA.Systems.Cube.Norsk.Model
{
    /// <summary>
    /// ShipmentBookingRequest
    /// </summary>
    [DataContract(Name = "ShipmentBookingRequest")]
    public class ShipmentBookingRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets LabelFormat
        /// </summary>
        [DataMember(Name = "LabelFormat", EmitDefaultValue = true)]
        public LabelFormat? LabelFormat { get; set; }

        /// <summary>
        /// Gets or Sets LabelSize
        /// </summary>
        [DataMember(Name = "LabelSize", EmitDefaultValue = true)]
        public LabelSize? LabelSize { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentBookingRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipmentBookingRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentBookingRequest" /> class.
        /// </summary>
        /// <param name="pieces">pieces (required).</param>
        /// <param name="readyByDate">DateTime provided must included the Time and be in GMT format. (required).</param>
        /// <param name="hawb">The Hawb (House Airway Bill) is your own unique reference number for the shipment, for example it could be the order reference. (required).</param>
        /// <param name="description">description.</param>
        /// <param name="value">Total value of the shipment (ex. VAT).</param>
        /// <param name="currency">Currency of the shipment value as a three letter ISO code.  If left unspecified then GBP will be used..</param>
        /// <param name="nonDox">Uses to indicate of the shipment is documents or non-documents..</param>
        /// <param name="dDP">dDP.</param>
        /// <param name="pallet">pallet.</param>
        /// <param name="invoice">Optional - Base64 string can be provided to use PLT services with DHL for select countries..</param>
        /// <param name="requestor">requestor.</param>
        /// <param name="consignee">consignee (required).</param>
        /// <param name="collection">collection.</param>
        /// <param name="shipper">shipper.</param>
        /// <param name="service">service (required).</param>
        /// <param name="specials">specials.</param>
        /// <param name="picking">picking.</param>
        /// <param name="labelFormat">labelFormat.</param>
        /// <param name="site">site.</param>
        /// <param name="exportCustoms">exportCustoms.</param>
        /// <param name="customDeclarations">customDeclarations.</param>
        /// <param name="labelSize">labelSize.</param>
        public ShipmentBookingRequest(List<Piece> pieces = default(List<Piece>), DateTimeOffset readyByDate = default(DateTimeOffset), string hawb = default(string), string description = default(string), double value = default(double), string currency = default(string), bool nonDox = default(bool), bool dDP = default(bool), bool pallet = default(bool), string invoice = default(string), Requester requestor = default(Requester), Address consignee = default(Address), CollectionAddress collection = default(CollectionAddress), ShipperAddress shipper = default(ShipperAddress), Service service = default(Service), Specials specials = default(Specials), Picking picking = default(Picking), LabelFormat? labelFormat = default(LabelFormat?), SiteDetails site = default(SiteDetails), ExportCustoms exportCustoms = default(ExportCustoms), Declarations customDeclarations = default(Declarations), LabelSize? labelSize = default(LabelSize?))
        {
            // to ensure "pieces" is required (not null)
            if (pieces == null)
            {
                throw new ArgumentNullException("pieces is a required property for ShipmentBookingRequest and cannot be null");
            }
            Pieces = pieces;
            ReadyByDate = readyByDate;
            // to ensure "hawb" is required (not null)
            if (hawb == null)
            {
                throw new ArgumentNullException("hawb is a required property for ShipmentBookingRequest and cannot be null");
            }
            Hawb = hawb;
            // to ensure "consignee" is required (not null)
            if (consignee == null)
            {
                throw new ArgumentNullException("consignee is a required property for ShipmentBookingRequest and cannot be null");
            }
            Consignee = consignee;
            // to ensure "service" is required (not null)
            if (service == null)
            {
                throw new ArgumentNullException("service is a required property for ShipmentBookingRequest and cannot be null");
            }
            Service = service;
            Description = description;
            Value = value;
            Currency = currency;
            NonDox = nonDox;
            DDP = dDP;
            Pallet = pallet;
            Invoice = invoice;
            Requestor = requestor;
            Collection = collection;
            Shipper = shipper;
            Specials = specials;
            Picking = picking;
            LabelFormat = labelFormat;
            Site = site;
            ExportCustoms = exportCustoms;
            CustomDeclarations = customDeclarations;
            LabelSize = labelSize;
        }

        /// <summary>
        /// Gets or Sets Pieces
        /// </summary>
        [DataMember(Name = "Pieces", IsRequired = true, EmitDefaultValue = true)]
        public List<Piece> Pieces { get; set; }

        /// <summary>
        /// DateTime provided must included the Time and be in GMT format.
        /// </summary>
        /// <value>DateTime provided must included the Time and be in GMT format.</value>
        [DataMember(Name = "ReadyByDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ReadyByDate { get; set; }

        /// <summary>
        /// The Hawb (House Airway Bill) is your own unique reference number for the shipment, for example it could be the order reference.
        /// </summary>
        /// <value>The Hawb (House Airway Bill) is your own unique reference number for the shipment, for example it could be the order reference.</value>
        [DataMember(Name = "Hawb", IsRequired = true, EmitDefaultValue = true)]
        public string Hawb { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Total value of the shipment (ex. VAT)
        /// </summary>
        /// <value>Total value of the shipment (ex. VAT)</value>
        [DataMember(Name = "Value", EmitDefaultValue = true)]
        public double Value { get; set; }

        /// <summary>
        /// Currency of the shipment value as a three letter ISO code.  If left unspecified then GBP will be used.
        /// </summary>
        /// <value>Currency of the shipment value as a three letter ISO code.  If left unspecified then GBP will be used.</value>
        [DataMember(Name = "Currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Uses to indicate of the shipment is documents or non-documents.
        /// </summary>
        /// <value>Uses to indicate of the shipment is documents or non-documents.</value>
        [DataMember(Name = "NonDox", EmitDefaultValue = true)]
        public bool NonDox { get; set; }

        /// <summary>
        /// Gets or Sets DDP
        /// </summary>
        [DataMember(Name = "DDP", EmitDefaultValue = true)]
        public bool DDP { get; set; }

        /// <summary>
        /// Gets or Sets Pallet
        /// </summary>
        [DataMember(Name = "Pallet", EmitDefaultValue = true)]
        public bool Pallet { get; set; }

        /// <summary>
        /// Optional - Base64 string can be provided to use PLT services with DHL for select countries.
        /// </summary>
        /// <value>Optional - Base64 string can be provided to use PLT services with DHL for select countries.</value>
        [DataMember(Name = "Invoice", EmitDefaultValue = true)]
        public string Invoice { get; set; }

        /// <summary>
        /// Gets or Sets Requestor
        /// </summary>
        [DataMember(Name = "Requestor", EmitDefaultValue = true)]
        public Requester Requestor { get; set; }

        /// <summary>
        /// Gets or Sets Consignee
        /// </summary>
        [DataMember(Name = "Consignee", IsRequired = true, EmitDefaultValue = true)]
        public Address Consignee { get; set; }

        /// <summary>
        /// Gets or Sets Collection
        /// </summary>
        [DataMember(Name = "Collection", EmitDefaultValue = true)]
        public CollectionAddress Collection { get; set; }

        /// <summary>
        /// Gets or Sets Shipper
        /// </summary>
        [DataMember(Name = "Shipper", EmitDefaultValue = true)]
        public ShipperAddress Shipper { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name = "Service", IsRequired = true, EmitDefaultValue = true)]
        public Service Service { get; set; }

        /// <summary>
        /// Gets or Sets Specials
        /// </summary>
        [DataMember(Name = "Specials", EmitDefaultValue = true)]
        public Specials Specials { get; set; }

        /// <summary>
        /// Gets or Sets Picking
        /// </summary>
        [DataMember(Name = "Picking", EmitDefaultValue = true)]
        public Picking Picking { get; set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [DataMember(Name = "Site", EmitDefaultValue = true)]
        public SiteDetails Site { get; set; }

        /// <summary>
        /// Gets or Sets ExportCustoms
        /// </summary>
        [DataMember(Name = "ExportCustoms", EmitDefaultValue = true)]
        public ExportCustoms ExportCustoms { get; set; }

        /// <summary>
        /// Gets or Sets CustomDeclarations
        /// </summary>
        [DataMember(Name = "CustomDeclarations", EmitDefaultValue = true)]
        public Declarations CustomDeclarations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentBookingRequest {\n");
            sb.Append("  Pieces: ").Append(Pieces).Append("\n");
            sb.Append("  ReadyByDate: ").Append(ReadyByDate).Append("\n");
            sb.Append("  Hawb: ").Append(Hawb).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  NonDox: ").Append(NonDox).Append("\n");
            sb.Append("  DDP: ").Append(DDP).Append("\n");
            sb.Append("  Pallet: ").Append(Pallet).Append("\n");
            sb.Append("  Invoice: ").Append(Invoice).Append("\n");
            sb.Append("  Requestor: ").Append(Requestor).Append("\n");
            sb.Append("  Consignee: ").Append(Consignee).Append("\n");
            sb.Append("  Collection: ").Append(Collection).Append("\n");
            sb.Append("  Shipper: ").Append(Shipper).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Specials: ").Append(Specials).Append("\n");
            sb.Append("  Picking: ").Append(Picking).Append("\n");
            sb.Append("  LabelFormat: ").Append(LabelFormat).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  ExportCustoms: ").Append(ExportCustoms).Append("\n");
            sb.Append("  CustomDeclarations: ").Append(CustomDeclarations).Append("\n");
            sb.Append("  LabelSize: ").Append(LabelSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ReadyByDate (DateTimeOffset) minLength
            if (ReadyByDate != null && ReadyByDate == DateTimeOffset.MinValue)
            {
                yield return new ValidationResult("Invalid value for ReadyByDate, must be a value greater than or equal to DateTimeOffset.MinValue.", new [] { "ReadyByDate" });
            }

            // Hawb (string) minLength
            if (Hawb != null && Hawb.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Hawb, length must be greater than 1.", new [] { "Hawb" });
            }

            // Description (string) maxLength
            if (Description != null && Description.Length > 90)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 90.", new [] { "Description" });
            }

            yield break;
        }
    }

}
