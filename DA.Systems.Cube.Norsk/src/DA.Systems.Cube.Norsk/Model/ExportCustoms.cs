/*
 * Norsk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: helpdesk@norsk-global.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DA.Systems.Cube.Norsk.Client.FileParameter;
using OpenAPIDateConverter = DA.Systems.Cube.Norsk.Client.OpenAPIDateConverter;

namespace DA.Systems.Cube.Norsk.Model
{
    /// <summary>
    /// Invoice Information
    /// </summary>
    [DataContract(Name = "ExportCustoms")]
    public class ExportCustoms : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets InvoiceType
        /// </summary>
        [DataMember(Name = "InvoiceType", EmitDefaultValue = true)]
        public InvoiceType? InvoiceType { get; set; }

        /// <summary>
        /// Gets or Sets TypeOfExport
        /// </summary>
        [DataMember(Name = "TypeOfExport", EmitDefaultValue = true)]
        public TypeOfExport? TypeOfExport { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportCustoms" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExportCustoms() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportCustoms" /> class.
        /// </summary>
        /// <param name="invoiceNumber">invoiceNumber (required).</param>
        /// <param name="payeeOfGST">payeeOfGST.</param>
        /// <param name="invoiceType">invoiceType.</param>
        /// <param name="termsOfPayment">termsOfPayment (required).</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="typeOfExport">typeOfExport.</param>
        /// <param name="termsOfTrade">termsOfTrade (required).</param>
        /// <param name="invoiceConsignee">invoiceConsignee.</param>
        public ExportCustoms(string invoiceNumber = default(string), string payeeOfGST = default(string), InvoiceType? invoiceType = default(InvoiceType?), string termsOfPayment = default(string), string currencyCode = default(string), TypeOfExport? typeOfExport = default(TypeOfExport?), string termsOfTrade = default(string), string invoiceConsignee = default(string))
        {
            // to ensure "invoiceNumber" is required (not null)
            if (invoiceNumber == null)
            {
                throw new ArgumentNullException("invoiceNumber is a required property for ExportCustoms and cannot be null");
            }
            InvoiceNumber = invoiceNumber;
            // to ensure "termsOfPayment" is required (not null)
            if (termsOfPayment == null)
            {
                throw new ArgumentNullException("termsOfPayment is a required property for ExportCustoms and cannot be null");
            }
            TermsOfPayment = termsOfPayment;
            // to ensure "termsOfTrade" is required (not null)
            if (termsOfTrade == null)
            {
                throw new ArgumentNullException("termsOfTrade is a required property for ExportCustoms and cannot be null");
            }
            TermsOfTrade = termsOfTrade;
            PayeeOfGST = payeeOfGST;
            InvoiceType = invoiceType;
            CurrencyCode = currencyCode;
            TypeOfExport = typeOfExport;
            InvoiceConsignee = invoiceConsignee;
        }

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name = "InvoiceNumber", IsRequired = true, EmitDefaultValue = true)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets PayeeOfGST
        /// </summary>
        [DataMember(Name = "PayeeOfGST", EmitDefaultValue = true)]
        public string PayeeOfGST { get; set; }

        /// <summary>
        /// Gets or Sets TermsOfPayment
        /// </summary>
        [DataMember(Name = "TermsOfPayment", IsRequired = true, EmitDefaultValue = true)]
        public string TermsOfPayment { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name = "CurrencyCode", EmitDefaultValue = true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets TermsOfTrade
        /// </summary>
        [DataMember(Name = "TermsOfTrade", IsRequired = true, EmitDefaultValue = true)]
        public string TermsOfTrade { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceConsignee
        /// </summary>
        [DataMember(Name = "InvoiceConsignee", EmitDefaultValue = true)]
        public string InvoiceConsignee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExportCustoms {\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  PayeeOfGST: ").Append(PayeeOfGST).Append("\n");
            sb.Append("  InvoiceType: ").Append(InvoiceType).Append("\n");
            sb.Append("  TermsOfPayment: ").Append(TermsOfPayment).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  TypeOfExport: ").Append(TypeOfExport).Append("\n");
            sb.Append("  TermsOfTrade: ").Append(TermsOfTrade).Append("\n");
            sb.Append("  InvoiceConsignee: ").Append(InvoiceConsignee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InvoiceNumber (string) minLength
            if (InvoiceNumber != null && InvoiceNumber.Length < 1)
            {
                yield return new ValidationResult("Invalid value for InvoiceNumber, length must be greater than 1.", new [] { "InvoiceNumber" });
            }

            // PayeeOfGST (string) maxLength
            if (PayeeOfGST != null && PayeeOfGST.Length > 35)
            {
                yield return new ValidationResult("Invalid value for PayeeOfGST, length must be less than 35.", new [] { "PayeeOfGST" });
            }

            // PayeeOfGST (string) minLength
            if (PayeeOfGST != null && PayeeOfGST.Length < 1)
            {
                yield return new ValidationResult("Invalid value for PayeeOfGST, length must be greater than 1.", new [] { "PayeeOfGST" });
            }

            // TermsOfPayment (string) minLength
            if (TermsOfPayment != null && TermsOfPayment.Length < 1)
            {
                yield return new ValidationResult("Invalid value for TermsOfPayment, length must be greater than 1.", new [] { "TermsOfPayment" });
            }

            // TermsOfTrade (string) minLength
            if (TermsOfTrade != null && TermsOfTrade.Length < 1)
            {
                yield return new ValidationResult("Invalid value for TermsOfTrade, length must be greater than 1.", new [] { "TermsOfTrade" });
            }

            // InvoiceConsignee (string) maxLength
            if (InvoiceConsignee != null && InvoiceConsignee.Length > 35)
            {
                yield return new ValidationResult("Invalid value for InvoiceConsignee, length must be less than 35.", new [] { "InvoiceConsignee" });
            }

            // InvoiceConsignee (string) minLength
            if (InvoiceConsignee != null && InvoiceConsignee.Length < 1)
            {
                yield return new ValidationResult("Invalid value for InvoiceConsignee, length must be greater than 1.", new [] { "InvoiceConsignee" });
            }

            yield break;
        }
    }

}
