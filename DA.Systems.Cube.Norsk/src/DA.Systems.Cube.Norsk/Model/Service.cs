/*
 * Norsk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: helpdesk@norsk-global.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DA.Systems.Cube.Norsk.Client.FileParameter;
using OpenAPIDateConverter = DA.Systems.Cube.Norsk.Client.OpenAPIDateConverter;

namespace DA.Systems.Cube.Norsk.Model
{
    /// <summary>
    /// Service
    /// </summary>
    [DataContract(Name = "Service")]
    public class Service : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Service" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Service() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Service" /> class.
        /// </summary>
        /// <param name="code">code (required).</param>
        /// <param name="enhancements">enhancements.</param>
        /// <param name="supplier">Optional preferred supplier code.</param>
        /// <param name="route">Optional routing code.</param>
        public Service(string code = default(string), List<Enhancement> enhancements = default(List<Enhancement>), string supplier = default(string), string route = default(string))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for Service and cannot be null");
            }
            Code = code;
            Enhancements = enhancements;
            Supplier = supplier;
            Route = route;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "Code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Enhancements
        /// </summary>
        [DataMember(Name = "Enhancements", EmitDefaultValue = true)]
        public List<Enhancement> Enhancements { get; set; }

        /// <summary>
        /// Optional preferred supplier code
        /// </summary>
        /// <value>Optional preferred supplier code</value>
        [DataMember(Name = "Supplier", EmitDefaultValue = true)]
        public string Supplier { get; set; }

        /// <summary>
        /// Optional routing code
        /// </summary>
        /// <value>Optional routing code</value>
        [DataMember(Name = "Route", EmitDefaultValue = true)]
        public string Route { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Service {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Enhancements: ").Append(Enhancements).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  Route: ").Append(Route).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) minLength
            if (Code != null && Code.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            yield break;
        }
    }

}
