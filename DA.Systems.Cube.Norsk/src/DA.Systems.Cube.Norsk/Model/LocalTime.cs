/*
 * Norsk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: helpdesk@norsk-global.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DA.Systems.Cube.Norsk.Client.FileParameter;
using OpenAPIDateConverter = DA.Systems.Cube.Norsk.Client.OpenAPIDateConverter;

namespace DA.Systems.Cube.Norsk.Model
{
    /// <summary>
    /// LocalTime
    /// </summary>
    [DataContract(Name = "LocalTime")]
    public class LocalTime : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalTime" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public LocalTime()
        {
        }

        /// <summary>
        /// Gets or Sets Hour
        /// </summary>
        [DataMember(Name = "Hour", EmitDefaultValue = true)]
        public int Hour { get; private set; }

        /// <summary>
        /// Returns false as Hour should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHour()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ClockHourOfHalfDay
        /// </summary>
        [DataMember(Name = "ClockHourOfHalfDay", EmitDefaultValue = true)]
        public int ClockHourOfHalfDay { get; private set; }

        /// <summary>
        /// Returns false as ClockHourOfHalfDay should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClockHourOfHalfDay()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Minute
        /// </summary>
        [DataMember(Name = "Minute", EmitDefaultValue = true)]
        public int Minute { get; private set; }

        /// <summary>
        /// Returns false as Minute should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMinute()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Second
        /// </summary>
        [DataMember(Name = "Second", EmitDefaultValue = true)]
        public int Second { get; private set; }

        /// <summary>
        /// Returns false as Second should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSecond()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Millisecond
        /// </summary>
        [DataMember(Name = "Millisecond", EmitDefaultValue = true)]
        public int Millisecond { get; private set; }

        /// <summary>
        /// Returns false as Millisecond should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMillisecond()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TickOfSecond
        /// </summary>
        [DataMember(Name = "TickOfSecond", EmitDefaultValue = true)]
        public int TickOfSecond { get; private set; }

        /// <summary>
        /// Returns false as TickOfSecond should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTickOfSecond()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TickOfDay
        /// </summary>
        [DataMember(Name = "TickOfDay", EmitDefaultValue = true)]
        public long TickOfDay { get; private set; }

        /// <summary>
        /// Returns false as TickOfDay should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTickOfDay()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets NanosecondOfSecond
        /// </summary>
        [DataMember(Name = "NanosecondOfSecond", EmitDefaultValue = true)]
        public int NanosecondOfSecond { get; private set; }

        /// <summary>
        /// Returns false as NanosecondOfSecond should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNanosecondOfSecond()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets NanosecondOfDay
        /// </summary>
        [DataMember(Name = "NanosecondOfDay", EmitDefaultValue = true)]
        public long NanosecondOfDay { get; private set; }

        /// <summary>
        /// Returns false as NanosecondOfDay should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNanosecondOfDay()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LocalTime {\n");
            sb.Append("  Hour: ").Append(Hour).Append("\n");
            sb.Append("  ClockHourOfHalfDay: ").Append(ClockHourOfHalfDay).Append("\n");
            sb.Append("  Minute: ").Append(Minute).Append("\n");
            sb.Append("  Second: ").Append(Second).Append("\n");
            sb.Append("  Millisecond: ").Append(Millisecond).Append("\n");
            sb.Append("  TickOfSecond: ").Append(TickOfSecond).Append("\n");
            sb.Append("  TickOfDay: ").Append(TickOfDay).Append("\n");
            sb.Append("  NanosecondOfSecond: ").Append(NanosecondOfSecond).Append("\n");
            sb.Append("  NanosecondOfDay: ").Append(NanosecondOfDay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
