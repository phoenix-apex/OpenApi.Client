/*
 * MITA Notifications Platform REST API
 *
 * The Notifications REST API allows programmatic access to the Notifications Portal message funtionality. To use the REST API, you will need a Notifications Portal Account and an API key and secret. You can generate from the Notifications Portal using the API Key Manager.The REST API takes full advantage of all HTTP headers. Each part of a request and response is meaningful, including the request method (GET/POST, etc.), the individual headers (Location, Content-Type, Accept, etc.), and the response status code (200, 400, 404, etc.). Use of this API assumes a working knowledge of these HTTP components, and general use of RESTful web APIs.
 *
 * The version of the OpenAPI document: v1
 * Contact: notifications.mita@gov.mt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mita.Notifications.Client.Client.OpenAPIDateConverter;

namespace Mita.Notifications.Client.Model;

/// <summary>
/// Contact object
/// </summary>
[DataContract(Name = "Contact")]
public partial class Contact : IValidatableObject
{

    /// <summary>
    /// Gets or Sets Title
    /// </summary>
    [DataMember(Name = "Title", EmitDefaultValue = true)]
    public Salutation? Title { get; set; }

    /// <summary>
    /// Gets or Sets PreferredLanguage
    /// </summary>
    [DataMember(Name = "PreferredLanguage", EmitDefaultValue = true)]
    public Language? PreferredLanguage { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="Contact" /> class.
    /// </summary>
    /// <param name="displayName">Display Name.</param>
    /// <param name="title">title.</param>
    /// <param name="firstName">First Name.</param>
    /// <param name="lastName">Last Email.</param>
    /// <param name="email">Email Address.</param>
    /// <param name="mobileNo">Mobile Number.</param>
    /// <param name="preferredLanguage">preferredLanguage.</param>
    public Contact(string displayName = default(string), Salutation? title = default(Salutation?), string firstName = default(string), string lastName = default(string), string email = default(string), string mobileNo = default(string), Language? preferredLanguage = default(Language?))
    {
            this.DisplayName = displayName;
            this.Title = title;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Email = email;
            this.MobileNo = mobileNo;
            this.PreferredLanguage = preferredLanguage;
        }

    /// <summary>
    /// Display Name
    /// </summary>
    /// <value>Display Name</value>
    [DataMember(Name = "DisplayName", EmitDefaultValue = true)]
    public string DisplayName { get; set; }

    /// <summary>
    /// First Name
    /// </summary>
    /// <value>First Name</value>
    [DataMember(Name = "FirstName", EmitDefaultValue = true)]
    public string FirstName { get; set; }

    /// <summary>
    /// Last Email
    /// </summary>
    /// <value>Last Email</value>
    [DataMember(Name = "LastName", EmitDefaultValue = true)]
    public string LastName { get; set; }

    /// <summary>
    /// Email Address
    /// </summary>
    /// <value>Email Address</value>
    /// <example>email@domain.com</example>
    [DataMember(Name = "Email", EmitDefaultValue = true)]
    public string Email { get; set; }

    /// <summary>
    /// Mobile Number
    /// </summary>
    /// <value>Mobile Number</value>
    /// <example>0035699999999</example>
    [DataMember(Name = "MobileNo", EmitDefaultValue = true)]
    public string MobileNo { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Contact {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  MobileNo: ").Append(MobileNo).Append("\n");
            sb.Append("  PreferredLanguage: ").Append(PreferredLanguage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 400.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 0.", new [] { "DisplayName" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 160)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 160.", new [] { "FirstName" });
            }

            // FirstName (string) minLength
            if (this.FirstName != null && this.FirstName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be greater than 0.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 200.", new [] { "LastName" });
            }

            // LastName (string) minLength
            if (this.LastName != null && this.LastName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be greater than 0.", new [] { "LastName" });
            }

            if (this.Email != null) {
                // Email (string) pattern
                Regex regexEmail = new Regex(@"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,64}", RegexOptions.CultureInvariant);
                if (!regexEmail.Match(this.Email).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, must match a pattern of " + regexEmail, new [] { "Email" });
                }
            }

            if (this.MobileNo != null) {
                // MobileNo (string) pattern
                Regex regexMobileNo = new Regex(@"^\d{10,15}$", RegexOptions.CultureInvariant);
                if (!regexMobileNo.Match(this.MobileNo).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MobileNo, must match a pattern of " + regexMobileNo, new [] { "MobileNo" });
                }
            }

            yield break;
        }
}