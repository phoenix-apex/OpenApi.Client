/*
 * MITA Notifications Platform REST API
 *
 * The Notifications REST API allows programmatic access to the Notifications Portal message funtionality. To use the REST API, you will need a Notifications Portal Account and an API key and secret. You can generate from the Notifications Portal using the API Key Manager.The REST API takes full advantage of all HTTP headers. Each part of a request and response is meaningful, including the request method (GET/POST, etc.), the individual headers (Location, Content-Type, Accept, etc.), and the response status code (200, 400, 404, etc.). Use of this API assumes a working knowledge of these HTTP components, and general use of RESTful web APIs.
 *
 * The version of the OpenAPI document: v1
 * Contact: notifications.mita@gov.mt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Mita.Notifications.Client.Client;
using Mita.Notifications.Client.Model;

namespace Mita.Notifications.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsContactGroupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method allows for the retrieval of the available contact groups stored by the Notifications Portal.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Group&gt;</returns>
        List<Group> GetApiV1Groups();

        /// <summary>
        /// This method allows for the retrieval of the available contact groups stored by the Notifications Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        ApiResponse<List<Group>> GetApiV1GroupsWithHttpInfo();
        /// <summary>
        /// This method allows for the deletion of a group stored by the Notifications Portal.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <returns></returns>
        void DeleteApiV1GroupsByGroupId(Guid groupId);

        /// <summary>
        /// This method allows for the deletion of a group stored by the Notifications Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApiV1GroupsByGroupIdWithHttpInfo(Guid groupId);
        /// <summary>
        /// This method allows for the retrieval of a Group object.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <returns>Group</returns>
        Group GetApiV1GroupsByGroupId(Guid groupId);

        /// <summary>
        /// This method allows for the retrieval of a Group object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> GetApiV1GroupsByGroupIdWithHttpInfo(Guid groupId);
        /// <summary>
        /// This method allows an application to send a new Message Request to all contacts within a Group.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createMessageGroupRequest">Message object containing the message data to be sent. (optional)</param>
        /// <returns>InboundMessageBatch</returns>
        InboundMessageBatch PostApiV1GroupsMessagesByGroupId(Guid groupId, CreateMessageGroupRequest createMessageGroupRequest = default(CreateMessageGroupRequest));

        /// <summary>
        /// This method allows an application to send a new Message Request to all contacts within a Group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createMessageGroupRequest">Message object containing the message data to be sent. (optional)</param>
        /// <returns>ApiResponse of InboundMessageBatch</returns>
        ApiResponse<InboundMessageBatch> PostApiV1GroupsMessagesByGroupIdWithHttpInfo(Guid groupId, CreateMessageGroupRequest createMessageGroupRequest = default(CreateMessageGroupRequest));
        /// <summary>
        /// This method allows for an application to update a existing group object.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="updateSubscriberGroupRequest">Group object. (optional)</param>
        /// <returns></returns>
        void PutApiV1GroupsByGroupId(Guid groupId, UpdateSubscriberGroupRequest updateSubscriberGroupRequest = default(UpdateSubscriberGroupRequest));

        /// <summary>
        /// This method allows for an application to update a existing group object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="updateSubscriberGroupRequest">Group object. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutApiV1GroupsByGroupIdWithHttpInfo(Guid groupId, UpdateSubscriberGroupRequest updateSubscriberGroupRequest = default(UpdateSubscriberGroupRequest));
        /// <summary>
        /// This method allows for the retrieval of contacts subscribed to a group.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: FirstName, LastName (default), DisplayName,   Email, and MobileNo.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>Subscribers</returns>
        Subscribers GetApiV1GroupsSubscribersByGroupId(Guid groupId, int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?));

        /// <summary>
        /// This method allows for the retrieval of contacts subscribed to a group.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: FirstName, LastName (default), DisplayName,   Email, and MobileNo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>ApiResponse of Subscribers</returns>
        ApiResponse<Subscribers> GetApiV1GroupsSubscribersByGroupIdWithHttpInfo(Guid groupId, int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?));
        /// <summary>
        /// This method allows for the creation of a new Subscriber   and subscription to a specific Group identified by the   groupId parameter.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createSubscriberRequest">Subscriber object. (optional)</param>
        /// <returns>Guid</returns>
        Guid PostApiV1GroupsSubscribersByGroupId(Guid groupId, CreateSubscriberRequest createSubscriberRequest = default(CreateSubscriberRequest));

        /// <summary>
        /// This method allows for the creation of a new Subscriber   and subscription to a specific Group identified by the   groupId parameter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createSubscriberRequest">Subscriber object. (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> PostApiV1GroupsSubscribersByGroupIdWithHttpInfo(Guid groupId, CreateSubscriberRequest createSubscriberRequest = default(CreateSubscriberRequest));
        /// <summary>
        /// This method allows for an application to manage opt-outs and unbind   an existing subscriber as specified by the subscriberId from a   specific Group identified by the groupId parameter.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <returns></returns>
        void DeleteApiV1GroupsSubscribersByGroupIdAndSubscriberId(Guid groupId, Guid subscriberId);

        /// <summary>
        /// This method allows for an application to manage opt-outs and unbind   an existing subscriber as specified by the subscriberId from a   specific Group identified by the groupId parameter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApiV1GroupsSubscribersByGroupIdAndSubscriberIdWithHttpInfo(Guid groupId, Guid subscriberId);
        /// <summary>
        /// This method allows an application to bind an existing subscriber as   specified by the subscriberId to a specific Group identified by   the groupId parameter.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createSubscriptionRequest">Subscription object containing Subscriber unique identifier. (optional)</param>
        /// <returns></returns>
        void PostApiV1GroupsSubscriptionsByGroupId(Guid groupId, CreateSubscriptionRequest createSubscriptionRequest = default(CreateSubscriptionRequest));

        /// <summary>
        /// This method allows an application to bind an existing subscriber as   specified by the subscriberId to a specific Group identified by   the groupId parameter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createSubscriptionRequest">Subscription object containing Subscriber unique identifier. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostApiV1GroupsSubscriptionsByGroupIdWithHttpInfo(Guid groupId, CreateSubscriptionRequest createSubscriptionRequest = default(CreateSubscriptionRequest));
        /// <summary>
        /// This method allows for the creation of a new Group.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest">Group object. (optional)</param>
        /// <returns>Group</returns>
        Group PostApiV1Groups(CreateGroupRequest createGroupRequest = default(CreateGroupRequest));

        /// <summary>
        /// This method allows for the creation of a new Group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest">Group object. (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> PostApiV1GroupsWithHttpInfo(CreateGroupRequest createGroupRequest = default(CreateGroupRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsContactGroupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// This method allows for the retrieval of the available contact groups stored by the Notifications Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        System.Threading.Tasks.Task<List<Group>> GetApiV1GroupsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for the retrieval of the available contact groups stored by the Notifications Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Group>>> GetApiV1GroupsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows for the deletion of a group stored by the Notifications Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApiV1GroupsByGroupIdAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for the deletion of a group stored by the Notifications Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApiV1GroupsByGroupIdWithHttpInfoAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows for the retrieval of a Group object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> GetApiV1GroupsByGroupIdAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for the retrieval of a Group object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> GetApiV1GroupsByGroupIdWithHttpInfoAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows an application to send a new Message Request to all contacts within a Group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createMessageGroupRequest">Message object containing the message data to be sent. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboundMessageBatch</returns>
        System.Threading.Tasks.Task<InboundMessageBatch> PostApiV1GroupsMessagesByGroupIdAsync(Guid groupId, CreateMessageGroupRequest createMessageGroupRequest = default(CreateMessageGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows an application to send a new Message Request to all contacts within a Group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createMessageGroupRequest">Message object containing the message data to be sent. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboundMessageBatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboundMessageBatch>> PostApiV1GroupsMessagesByGroupIdWithHttpInfoAsync(Guid groupId, CreateMessageGroupRequest createMessageGroupRequest = default(CreateMessageGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows for an application to update a existing group object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="updateSubscriberGroupRequest">Group object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutApiV1GroupsByGroupIdAsync(Guid groupId, UpdateSubscriberGroupRequest updateSubscriberGroupRequest = default(UpdateSubscriberGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for an application to update a existing group object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="updateSubscriberGroupRequest">Group object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutApiV1GroupsByGroupIdWithHttpInfoAsync(Guid groupId, UpdateSubscriberGroupRequest updateSubscriberGroupRequest = default(UpdateSubscriberGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows for the retrieval of contacts subscribed to a group.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: FirstName, LastName (default), DisplayName,   Email, and MobileNo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subscribers</returns>
        System.Threading.Tasks.Task<Subscribers> GetApiV1GroupsSubscribersByGroupIdAsync(Guid groupId, int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for the retrieval of contacts subscribed to a group.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: FirstName, LastName (default), DisplayName,   Email, and MobileNo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subscribers)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscribers>> GetApiV1GroupsSubscribersByGroupIdWithHttpInfoAsync(Guid groupId, int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows for the creation of a new Subscriber   and subscription to a specific Group identified by the   groupId parameter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createSubscriberRequest">Subscriber object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> PostApiV1GroupsSubscribersByGroupIdAsync(Guid groupId, CreateSubscriberRequest createSubscriberRequest = default(CreateSubscriberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for the creation of a new Subscriber   and subscription to a specific Group identified by the   groupId parameter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createSubscriberRequest">Subscriber object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> PostApiV1GroupsSubscribersByGroupIdWithHttpInfoAsync(Guid groupId, CreateSubscriberRequest createSubscriberRequest = default(CreateSubscriberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows for an application to manage opt-outs and unbind   an existing subscriber as specified by the subscriberId from a   specific Group identified by the groupId parameter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApiV1GroupsSubscribersByGroupIdAndSubscriberIdAsync(Guid groupId, Guid subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for an application to manage opt-outs and unbind   an existing subscriber as specified by the subscriberId from a   specific Group identified by the groupId parameter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApiV1GroupsSubscribersByGroupIdAndSubscriberIdWithHttpInfoAsync(Guid groupId, Guid subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows an application to bind an existing subscriber as   specified by the subscriberId to a specific Group identified by   the groupId parameter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createSubscriptionRequest">Subscription object containing Subscriber unique identifier. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostApiV1GroupsSubscriptionsByGroupIdAsync(Guid groupId, CreateSubscriptionRequest createSubscriptionRequest = default(CreateSubscriptionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows an application to bind an existing subscriber as   specified by the subscriberId to a specific Group identified by   the groupId parameter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createSubscriptionRequest">Subscription object containing Subscriber unique identifier. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostApiV1GroupsSubscriptionsByGroupIdWithHttpInfoAsync(Guid groupId, CreateSubscriptionRequest createSubscriptionRequest = default(CreateSubscriptionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows for the creation of a new Group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest">Group object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> PostApiV1GroupsAsync(CreateGroupRequest createGroupRequest = default(CreateGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for the creation of a new Group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest">Group object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> PostApiV1GroupsWithHttpInfoAsync(CreateGroupRequest createGroupRequest = default(CreateGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsContactGroupsApi : ISubscriptionsContactGroupsApiSync, ISubscriptionsContactGroupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionsContactGroupsApi : ISubscriptionsContactGroupsApi
    {
        private Mita.Notifications.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsContactGroupsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public SubscriptionsContactGroupsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsContactGroupsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SubscriptionsContactGroupsApi(string basePath)
        {
            this.Configuration = Mita.Notifications.Client.Client.Configuration.MergeConfigurations(
                Mita.Notifications.Client.Client.GlobalConfiguration.Instance,
                new Mita.Notifications.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Mita.Notifications.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Mita.Notifications.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsContactGroupsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SubscriptionsContactGroupsApi(Mita.Notifications.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Mita.Notifications.Client.Client.Configuration.MergeConfigurations(
                Mita.Notifications.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Mita.Notifications.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Mita.Notifications.Client.Client.Configuration.DefaultExceptionFactory;
        }
        
        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Mita.Notifications.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Mita.Notifications.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Mita.Notifications.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mita.Notifications.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mita.Notifications.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// This method allows for the retrieval of the available contact groups stored by the Notifications Portal. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Group&gt;</returns>
        public List<Group> GetApiV1Groups()
        {
            Mita.Notifications.Client.Client.ApiResponse<List<Group>> localVarResponse = GetApiV1GroupsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of the available contact groups stored by the Notifications Portal. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        public Mita.Notifications.Client.Client.ApiResponse<List<Group>> GetApiV1GroupsWithHttpInfo()
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Group>>("/api/v1/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1Groups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the retrieval of the available contact groups stored by the Notifications Portal. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        public async System.Threading.Tasks.Task<List<Group>> GetApiV1GroupsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<List<Group>> localVarResponse = await GetApiV1GroupsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of the available contact groups stored by the Notifications Portal. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<List<Group>>> GetApiV1GroupsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Group>>("/api/v1/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1Groups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the deletion of a group stored by the Notifications Portal. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <returns></returns>
        public void DeleteApiV1GroupsByGroupId(Guid groupId)
        {
            DeleteApiV1GroupsByGroupIdWithHttpInfo(groupId);
        }

        /// <summary>
        /// This method allows for the deletion of a group stored by the Notifications Portal. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mita.Notifications.Client.Client.ApiResponse<Object> DeleteApiV1GroupsByGroupIdWithHttpInfo(Guid groupId)
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/groups/{groupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiV1GroupsByGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the deletion of a group stored by the Notifications Portal. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApiV1GroupsByGroupIdAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteApiV1GroupsByGroupIdWithHttpInfoAsync(groupId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This method allows for the deletion of a group stored by the Notifications Portal. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<Object>> DeleteApiV1GroupsByGroupIdWithHttpInfoAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiV1GroupsByGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the retrieval of a Group object. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <returns>Group</returns>
        public Group GetApiV1GroupsByGroupId(Guid groupId)
        {
            Mita.Notifications.Client.Client.ApiResponse<Group> localVarResponse = GetApiV1GroupsByGroupIdWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of a Group object. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <returns>ApiResponse of Group</returns>
        public Mita.Notifications.Client.Client.ApiResponse<Group> GetApiV1GroupsByGroupIdWithHttpInfo(Guid groupId)
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Group>("/api/v1/groups/{groupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1GroupsByGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the retrieval of a Group object. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> GetApiV1GroupsByGroupIdAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<Group> localVarResponse = await GetApiV1GroupsByGroupIdWithHttpInfoAsync(groupId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of a Group object. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<Group>> GetApiV1GroupsByGroupIdWithHttpInfoAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Group>("/api/v1/groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1GroupsByGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to send a new Message Request to all contacts within a Group. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createMessageGroupRequest">Message object containing the message data to be sent. (optional)</param>
        /// <returns>InboundMessageBatch</returns>
        public InboundMessageBatch PostApiV1GroupsMessagesByGroupId(Guid groupId, CreateMessageGroupRequest createMessageGroupRequest = default(CreateMessageGroupRequest))
        {
            Mita.Notifications.Client.Client.ApiResponse<InboundMessageBatch> localVarResponse = PostApiV1GroupsMessagesByGroupIdWithHttpInfo(groupId, createMessageGroupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows an application to send a new Message Request to all contacts within a Group. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createMessageGroupRequest">Message object containing the message data to be sent. (optional)</param>
        /// <returns>ApiResponse of InboundMessageBatch</returns>
        public Mita.Notifications.Client.Client.ApiResponse<InboundMessageBatch> PostApiV1GroupsMessagesByGroupIdWithHttpInfo(Guid groupId, CreateMessageGroupRequest createMessageGroupRequest = default(CreateMessageGroupRequest))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createMessageGroupRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<InboundMessageBatch>("/api/v1/groups/{groupId}/messages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiV1GroupsMessagesByGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to send a new Message Request to all contacts within a Group. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createMessageGroupRequest">Message object containing the message data to be sent. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboundMessageBatch</returns>
        public async System.Threading.Tasks.Task<InboundMessageBatch> PostApiV1GroupsMessagesByGroupIdAsync(Guid groupId, CreateMessageGroupRequest createMessageGroupRequest = default(CreateMessageGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<InboundMessageBatch> localVarResponse = await PostApiV1GroupsMessagesByGroupIdWithHttpInfoAsync(groupId, createMessageGroupRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows an application to send a new Message Request to all contacts within a Group. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createMessageGroupRequest">Message object containing the message data to be sent. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboundMessageBatch)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<InboundMessageBatch>> PostApiV1GroupsMessagesByGroupIdWithHttpInfoAsync(Guid groupId, CreateMessageGroupRequest createMessageGroupRequest = default(CreateMessageGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createMessageGroupRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InboundMessageBatch>("/api/v1/groups/{groupId}/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiV1GroupsMessagesByGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for an application to update a existing group object. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="updateSubscriberGroupRequest">Group object. (optional)</param>
        /// <returns></returns>
        public void PutApiV1GroupsByGroupId(Guid groupId, UpdateSubscriberGroupRequest updateSubscriberGroupRequest = default(UpdateSubscriberGroupRequest))
        {
            PutApiV1GroupsByGroupIdWithHttpInfo(groupId, updateSubscriberGroupRequest);
        }

        /// <summary>
        /// This method allows for an application to update a existing group object. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="updateSubscriberGroupRequest">Group object. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mita.Notifications.Client.Client.ApiResponse<Object> PutApiV1GroupsByGroupIdWithHttpInfo(Guid groupId, UpdateSubscriberGroupRequest updateSubscriberGroupRequest = default(UpdateSubscriberGroupRequest))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = updateSubscriberGroupRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v1/groups/{groupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutApiV1GroupsByGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for an application to update a existing group object. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="updateSubscriberGroupRequest">Group object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutApiV1GroupsByGroupIdAsync(Guid groupId, UpdateSubscriberGroupRequest updateSubscriberGroupRequest = default(UpdateSubscriberGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PutApiV1GroupsByGroupIdWithHttpInfoAsync(groupId, updateSubscriberGroupRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This method allows for an application to update a existing group object. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="updateSubscriberGroupRequest">Group object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<Object>> PutApiV1GroupsByGroupIdWithHttpInfoAsync(Guid groupId, UpdateSubscriberGroupRequest updateSubscriberGroupRequest = default(UpdateSubscriberGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = updateSubscriberGroupRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v1/groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutApiV1GroupsByGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the retrieval of contacts subscribed to a group.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: FirstName, LastName (default), DisplayName,   Email, and MobileNo. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>Subscribers</returns>
        public Subscribers GetApiV1GroupsSubscribersByGroupId(Guid groupId, int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?))
        {
            Mita.Notifications.Client.Client.ApiResponse<Subscribers> localVarResponse = GetApiV1GroupsSubscribersByGroupIdWithHttpInfo(groupId, pageIndex, pageSize, sortField, sortDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of contacts subscribed to a group.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: FirstName, LastName (default), DisplayName,   Email, and MobileNo. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>ApiResponse of Subscribers</returns>
        public Mita.Notifications.Client.Client.ApiResponse<Subscribers> GetApiV1GroupsSubscribersByGroupIdWithHttpInfo(Guid groupId, int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (sortField != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortField", sortField));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Subscribers>("/api/v1/groups/{groupId}/subscribers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1GroupsSubscribersByGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the retrieval of contacts subscribed to a group.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: FirstName, LastName (default), DisplayName,   Email, and MobileNo. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subscribers</returns>
        public async System.Threading.Tasks.Task<Subscribers> GetApiV1GroupsSubscribersByGroupIdAsync(Guid groupId, int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<Subscribers> localVarResponse = await GetApiV1GroupsSubscribersByGroupIdWithHttpInfoAsync(groupId, pageIndex, pageSize, sortField, sortDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of contacts subscribed to a group.     To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: FirstName, LastName (default), DisplayName,   Email, and MobileNo. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subscribers)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<Subscribers>> GetApiV1GroupsSubscribersByGroupIdWithHttpInfoAsync(Guid groupId, int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (sortField != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortField", sortField));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Subscribers>("/api/v1/groups/{groupId}/subscribers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1GroupsSubscribersByGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the creation of a new Subscriber   and subscription to a specific Group identified by the   groupId parameter. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createSubscriberRequest">Subscriber object. (optional)</param>
        /// <returns>Guid</returns>
        public Guid PostApiV1GroupsSubscribersByGroupId(Guid groupId, CreateSubscriberRequest createSubscriberRequest = default(CreateSubscriberRequest))
        {
            Mita.Notifications.Client.Client.ApiResponse<Guid> localVarResponse = PostApiV1GroupsSubscribersByGroupIdWithHttpInfo(groupId, createSubscriberRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the creation of a new Subscriber   and subscription to a specific Group identified by the   groupId parameter. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createSubscriberRequest">Subscriber object. (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public Mita.Notifications.Client.Client.ApiResponse<Guid> PostApiV1GroupsSubscribersByGroupIdWithHttpInfo(Guid groupId, CreateSubscriberRequest createSubscriberRequest = default(CreateSubscriberRequest))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createSubscriberRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Guid>("/api/v1/groups/{groupId}/subscribers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiV1GroupsSubscribersByGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the creation of a new Subscriber   and subscription to a specific Group identified by the   groupId parameter. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createSubscriberRequest">Subscriber object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> PostApiV1GroupsSubscribersByGroupIdAsync(Guid groupId, CreateSubscriberRequest createSubscriberRequest = default(CreateSubscriberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<Guid> localVarResponse = await PostApiV1GroupsSubscribersByGroupIdWithHttpInfoAsync(groupId, createSubscriberRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the creation of a new Subscriber   and subscription to a specific Group identified by the   groupId parameter. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createSubscriberRequest">Subscriber object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<Guid>> PostApiV1GroupsSubscribersByGroupIdWithHttpInfoAsync(Guid groupId, CreateSubscriberRequest createSubscriberRequest = default(CreateSubscriberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createSubscriberRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Guid>("/api/v1/groups/{groupId}/subscribers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiV1GroupsSubscribersByGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for an application to manage opt-outs and unbind   an existing subscriber as specified by the subscriberId from a   specific Group identified by the groupId parameter. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <returns></returns>
        public void DeleteApiV1GroupsSubscribersByGroupIdAndSubscriberId(Guid groupId, Guid subscriberId)
        {
            DeleteApiV1GroupsSubscribersByGroupIdAndSubscriberIdWithHttpInfo(groupId, subscriberId);
        }

        /// <summary>
        /// This method allows for an application to manage opt-outs and unbind   an existing subscriber as specified by the subscriberId from a   specific Group identified by the groupId parameter. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mita.Notifications.Client.Client.ApiResponse<Object> DeleteApiV1GroupsSubscribersByGroupIdAndSubscriberIdWithHttpInfo(Guid groupId, Guid subscriberId)
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriberId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/groups/{groupId}/subscribers/{subscriberId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiV1GroupsSubscribersByGroupIdAndSubscriberId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for an application to manage opt-outs and unbind   an existing subscriber as specified by the subscriberId from a   specific Group identified by the groupId parameter. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApiV1GroupsSubscribersByGroupIdAndSubscriberIdAsync(Guid groupId, Guid subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteApiV1GroupsSubscribersByGroupIdAndSubscriberIdWithHttpInfoAsync(groupId, subscriberId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This method allows for an application to manage opt-outs and unbind   an existing subscriber as specified by the subscriberId from a   specific Group identified by the groupId parameter. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="subscriberId">Subscriber unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<Object>> DeleteApiV1GroupsSubscribersByGroupIdAndSubscriberIdWithHttpInfoAsync(Guid groupId, Guid subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriberId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/groups/{groupId}/subscribers/{subscriberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiV1GroupsSubscribersByGroupIdAndSubscriberId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to bind an existing subscriber as   specified by the subscriberId to a specific Group identified by   the groupId parameter. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createSubscriptionRequest">Subscription object containing Subscriber unique identifier. (optional)</param>
        /// <returns></returns>
        public void PostApiV1GroupsSubscriptionsByGroupId(Guid groupId, CreateSubscriptionRequest createSubscriptionRequest = default(CreateSubscriptionRequest))
        {
            PostApiV1GroupsSubscriptionsByGroupIdWithHttpInfo(groupId, createSubscriptionRequest);
        }

        /// <summary>
        /// This method allows an application to bind an existing subscriber as   specified by the subscriberId to a specific Group identified by   the groupId parameter. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createSubscriptionRequest">Subscription object containing Subscriber unique identifier. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mita.Notifications.Client.Client.ApiResponse<Object> PostApiV1GroupsSubscriptionsByGroupIdWithHttpInfo(Guid groupId, CreateSubscriptionRequest createSubscriptionRequest = default(CreateSubscriptionRequest))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createSubscriptionRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/groups/{groupId}/subscriptions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiV1GroupsSubscriptionsByGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to bind an existing subscriber as   specified by the subscriberId to a specific Group identified by   the groupId parameter. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createSubscriptionRequest">Subscription object containing Subscriber unique identifier. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostApiV1GroupsSubscriptionsByGroupIdAsync(Guid groupId, CreateSubscriptionRequest createSubscriptionRequest = default(CreateSubscriptionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostApiV1GroupsSubscriptionsByGroupIdWithHttpInfoAsync(groupId, createSubscriptionRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This method allows an application to bind an existing subscriber as   specified by the subscriberId to a specific Group identified by   the groupId parameter. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group unique identifier.</param>
        /// <param name="createSubscriptionRequest">Subscription object containing Subscriber unique identifier. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<Object>> PostApiV1GroupsSubscriptionsByGroupIdWithHttpInfoAsync(Guid groupId, CreateSubscriptionRequest createSubscriptionRequest = default(CreateSubscriptionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = createSubscriptionRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/groups/{groupId}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiV1GroupsSubscriptionsByGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the creation of a new Group. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest">Group object. (optional)</param>
        /// <returns>Group</returns>
        public Group PostApiV1Groups(CreateGroupRequest createGroupRequest = default(CreateGroupRequest))
        {
            Mita.Notifications.Client.Client.ApiResponse<Group> localVarResponse = PostApiV1GroupsWithHttpInfo(createGroupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the creation of a new Group. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest">Group object. (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        public Mita.Notifications.Client.Client.ApiResponse<Group> PostApiV1GroupsWithHttpInfo(CreateGroupRequest createGroupRequest = default(CreateGroupRequest))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createGroupRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Group>("/api/v1/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiV1Groups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the creation of a new Group. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest">Group object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> PostApiV1GroupsAsync(CreateGroupRequest createGroupRequest = default(CreateGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<Group> localVarResponse = await PostApiV1GroupsWithHttpInfoAsync(createGroupRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the creation of a new Group. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupRequest">Group object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<Group>> PostApiV1GroupsWithHttpInfoAsync(CreateGroupRequest createGroupRequest = default(CreateGroupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createGroupRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Group>("/api/v1/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiV1Groups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
