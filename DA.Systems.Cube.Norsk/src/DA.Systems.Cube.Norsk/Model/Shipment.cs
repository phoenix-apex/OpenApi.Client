/*
 * Norsk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: helpdesk@norsk-global.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DA.Systems.Cube.Norsk.Client.FileParameter;
using OpenAPIDateConverter = DA.Systems.Cube.Norsk.Client.OpenAPIDateConverter;

namespace DA.Systems.Cube.Norsk.Model
{
    /// <summary>
    /// Shipment
    /// </summary>
    [DataContract(Name = "Shipment")]
    public class Shipment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Shipment" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="proofOfDelivery">proofOfDelivery.</param>
        public Shipment(NarrativeVm status = default(NarrativeVm), ProofOfDelivery proofOfDelivery = default(ProofOfDelivery))
        {
            Status = status;
            ProofOfDelivery = proofOfDelivery;
        }

        /// <summary>
        /// Barcode/identifier allocated for the shipment  by Norsk for tracking of the shipment.  May not be displayed on the label.
        /// </summary>
        /// <value>Barcode/identifier allocated for the shipment  by Norsk for tracking of the shipment.  May not be displayed on the label.</value>
        [DataMember(Name = "NorskBarcode", EmitDefaultValue = true)]
        public string NorskBarcode { get; private set; }

        /// <summary>
        /// Returns false as NorskBarcode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNorskBarcode()
        {
            return false;
        }
        /// <summary>
        /// the barcode shown on the shipment label.
        /// </summary>
        /// <value>the barcode shown on the shipment label.</value>
        [DataMember(Name = "Barcode", EmitDefaultValue = true)]
        public string Barcode { get; private set; }

        /// <summary>
        /// Returns false as Barcode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBarcode()
        {
            return false;
        }
        /// <summary>
        /// The Hawb (House Airway Bill) is your own unique reference number for the shipment, for example it could be the order reference.
        /// </summary>
        /// <value>The Hawb (House Airway Bill) is your own unique reference number for the shipment, for example it could be the order reference.</value>
        [DataMember(Name = "Hawb", EmitDefaultValue = true)]
        public string Hawb { get; private set; }

        /// <summary>
        /// Returns false as Hawb should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHawb()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = true)]
        public NarrativeVm Status { get; set; }

        /// <summary>
        /// History of shipment statuses
        /// </summary>
        /// <value>History of shipment statuses</value>
        [DataMember(Name = "Narrative", EmitDefaultValue = true)]
        public List<NarrativeVm> Narrative { get; private set; }

        /// <summary>
        /// Returns false as Narrative should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNarrative()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ProofOfDelivery
        /// </summary>
        [DataMember(Name = "ProofOfDelivery", EmitDefaultValue = true)]
        public ProofOfDelivery ProofOfDelivery { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Shipment {\n");
            sb.Append("  NorskBarcode: ").Append(NorskBarcode).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  Hawb: ").Append(Hawb).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Narrative: ").Append(Narrative).Append("\n");
            sb.Append("  ProofOfDelivery: ").Append(ProofOfDelivery).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
