/*
 * MITA Notifications Platform REST API
 *
 * The Notifications REST API allows programmatic access to the Notifications Portal message funtionality. To use the REST API, you will need a Notifications Portal Account and an API key and secret. You can generate from the Notifications Portal using the API Key Manager.The REST API takes full advantage of all HTTP headers. Each part of a request and response is meaningful, including the request method (GET/POST, etc.), the individual headers (Location, Content-Type, Accept, etc.), and the response status code (200, 400, 404, etc.). Use of this API assumes a working knowledge of these HTTP components, and general use of RESTful web APIs.
 *
 * The version of the OpenAPI document: v1
 * Contact: notifications.mita@gov.mt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mita.Notifications.Client.Client.OpenAPIDateConverter;

namespace Mita.Notifications.Client.Model;

/// <summary>
/// Pagination meta data
/// </summary>
[DataContract(Name = "Page")]
public partial class Page : IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="Page" /> class.
    /// </summary>
    /// <param name="index">Page index..</param>
    /// <param name="size">Page size..</param>
    /// <param name="count">Total number of objects in collection..</param>
    /// <param name="previousUri">URI for the previous page. Empty if on the first page..</param>
    /// <param name="nextUri">URI for the next page. Empty if on the last page..</param>
    public Page(int index = default(int), int size = default(int), long count = default(long), string previousUri = default(string), string nextUri = default(string))
    {
            this.Index = index;
            this.Size = size;
            this.Count = count;
            this.PreviousUri = previousUri;
            this.NextUri = nextUri;
        }

    /// <summary>
    /// Page index.
    /// </summary>
    /// <value>Page index.</value>
    [DataMember(Name = "Index", EmitDefaultValue = true)]
    public int Index { get; set; }

    /// <summary>
    /// Page size.
    /// </summary>
    /// <value>Page size.</value>
    [DataMember(Name = "Size", EmitDefaultValue = true)]
    public int Size { get; set; }

    /// <summary>
    /// Total number of objects in collection.
    /// </summary>
    /// <value>Total number of objects in collection.</value>
    [DataMember(Name = "Count", EmitDefaultValue = true)]
    public long Count { get; set; }

    /// <summary>
    /// URI for the previous page. Empty if on the first page.
    /// </summary>
    /// <value>URI for the previous page. Empty if on the first page.</value>
    [DataMember(Name = "PreviousUri", EmitDefaultValue = true)]
    public string PreviousUri { get; set; }

    /// <summary>
    /// URI for the next page. Empty if on the last page.
    /// </summary>
    /// <value>URI for the next page. Empty if on the last page.</value>
    [DataMember(Name = "NextUri", EmitDefaultValue = true)]
    public string NextUri { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Page {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  PreviousUri: ").Append(PreviousUri).Append("\n");
            sb.Append("  NextUri: ").Append(NextUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
            yield break;
        }
}