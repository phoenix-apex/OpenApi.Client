/*
 * MITA Notifications Platform REST API
 *
 * The Notifications REST API allows programmatic access to the Notifications Portal message funtionality. To use the REST API, you will need a Notifications Portal Account and an API key and secret. You can generate from the Notifications Portal using the API Key Manager.The REST API takes full advantage of all HTTP headers. Each part of a request and response is meaningful, including the request method (GET/POST, etc.), the individual headers (Location, Content-Type, Accept, etc.), and the response status code (200, 400, 404, etc.). Use of this API assumes a working knowledge of these HTTP components, and general use of RESTful web APIs.
 *
 * The version of the OpenAPI document: v1
 * Contact: notifications.mita@gov.mt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mita.Notifications.Client.Client.OpenAPIDateConverter;

namespace Mita.Notifications.Client.Model;

/// <summary>
/// Uniform Resource Identifier used to identify an attachement and location to download it.
/// </summary>
[DataContract(Name = "AttachmentUri")]
public partial class AttachmentUri : IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="AttachmentUri" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected AttachmentUri() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="AttachmentUri" /> class.
    /// </summary>
    /// <param name="uri">URI to download attachement..</param>
    /// <param name="size">File size..</param>
    /// <param name="mD5">File checksum..</param>
    /// <param name="fileName">File name. (required).</param>
    /// <param name="contentType">Content type (MIME) associated with this attachment. (required).</param>
    public AttachmentUri(string uri = default(string), int size = default(int), string mD5 = default(string), string fileName = default(string), string contentType = default(string))
    {
            // to ensure "fileName" is required (not null)
            if (fileName == null)
            {
                throw new ArgumentNullException("fileName is a required property for AttachmentUri and cannot be null");
            }
            this.FileName = fileName;
            // to ensure "contentType" is required (not null)
            if (contentType == null)
            {
                throw new ArgumentNullException("contentType is a required property for AttachmentUri and cannot be null");
            }
            this.ContentType = contentType;
            this.Uri = uri;
            this.Size = size;
            this.MD5 = mD5;
        }

    /// <summary>
    /// URI to download attachement.
    /// </summary>
    /// <value>URI to download attachement.</value>
    [DataMember(Name = "Uri", EmitDefaultValue = true)]
    public string Uri { get; set; }

    /// <summary>
    /// File size.
    /// </summary>
    /// <value>File size.</value>
    [DataMember(Name = "Size", EmitDefaultValue = true)]
    public int Size { get; set; }

    /// <summary>
    /// File checksum.
    /// </summary>
    /// <value>File checksum.</value>
    [DataMember(Name = "MD5", EmitDefaultValue = true)]
    public string MD5 { get; set; }

    /// <summary>
    /// File name.
    /// </summary>
    /// <value>File name.</value>
    [DataMember(Name = "FileName", IsRequired = true, EmitDefaultValue = true)]
    public string FileName { get; set; }

    /// <summary>
    /// Content type (MIME) associated with this attachment.
    /// </summary>
    /// <value>Content type (MIME) associated with this attachment.</value>
    [DataMember(Name = "ContentType", IsRequired = true, EmitDefaultValue = true)]
    public string ContentType { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachmentUri {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  MD5: ").Append(MD5).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
            // FileName (string) minLength
            if (this.FileName != null && this.FileName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileName, length must be greater than 1.", new [] { "FileName" });
            }

            // ContentType (string) minLength
            if (this.ContentType != null && this.ContentType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContentType, length must be greater than 1.", new [] { "ContentType" });
            }

            yield break;
        }
}