/*
 * Norsk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: helpdesk@norsk-global.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DA.Systems.Cube.Norsk.Client.FileParameter;
using OpenAPIDateConverter = DA.Systems.Cube.Norsk.Client.OpenAPIDateConverter;

namespace DA.Systems.Cube.Norsk.Model
{
    /// <summary>
    /// Piece
    /// </summary>
    [DataContract(Name = "Piece")]
    public class Piece : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Piece" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Piece() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Piece" /> class.
        /// </summary>
        /// <param name="depth">The depth/length specified in CM (required).</param>
        /// <param name="height">The height specified in CM (required).</param>
        /// <param name="width">The width specified in CM (required).</param>
        /// <param name="weight">The weight specified in KG (required).</param>
        /// <param name="numberOfPieces">The number of packages with the same dimensions (required).</param>
        /// <param name="products">Product detail list in a Piece.</param>
        public Piece(double depth = default(double), double height = default(double), double width = default(double), double weight = default(double), int numberOfPieces = default(int), List<Product> products = default(List<Product>))
        {
            Depth = depth;
            Height = height;
            Width = width;
            Weight = weight;
            NumberOfPieces = numberOfPieces;
            Products = products;
        }

        /// <summary>
        /// The depth/length specified in CM
        /// </summary>
        /// <value>The depth/length specified in CM</value>
        [DataMember(Name = "Depth", IsRequired = true, EmitDefaultValue = true)]
        public double Depth { get; set; }

        /// <summary>
        /// The height specified in CM
        /// </summary>
        /// <value>The height specified in CM</value>
        [DataMember(Name = "Height", IsRequired = true, EmitDefaultValue = true)]
        public double Height { get; set; }

        /// <summary>
        /// The width specified in CM
        /// </summary>
        /// <value>The width specified in CM</value>
        [DataMember(Name = "Width", IsRequired = true, EmitDefaultValue = true)]
        public double Width { get; set; }

        /// <summary>
        /// The weight specified in KG
        /// </summary>
        /// <value>The weight specified in KG</value>
        [DataMember(Name = "Weight", IsRequired = true, EmitDefaultValue = true)]
        public double Weight { get; set; }

        /// <summary>
        /// The number of packages with the same dimensions
        /// </summary>
        /// <value>The number of packages with the same dimensions</value>
        [DataMember(Name = "NumberOfPieces", IsRequired = true, EmitDefaultValue = true)]
        public int NumberOfPieces { get; set; }

        /// <summary>
        /// Product detail list in a Piece
        /// </summary>
        /// <value>Product detail list in a Piece</value>
        [DataMember(Name = "Products", EmitDefaultValue = true)]
        public List<Product> Products { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Piece {\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  NumberOfPieces: ").Append(NumberOfPieces).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Weight (double) maximum
            if (Weight > (double)1000)
            {
                yield return new ValidationResult("Invalid value for Weight, must be a value less than or equal to 1000.", new [] { "Weight" });
            }

            // Weight (double) minimum
            if (Weight < (double)0)
            {
                yield return new ValidationResult("Invalid value for Weight, must be a value greater than or equal to 0.", new [] { "Weight" });
            }

            // NumberOfPieces (int) minimum
            if (NumberOfPieces < (int)0)
            {
                yield return new ValidationResult("Invalid value for NumberOfPieces, must be a value greater than or equal to 0.", new [] { "NumberOfPieces" });
            }

            yield break;
        }
    }

}
