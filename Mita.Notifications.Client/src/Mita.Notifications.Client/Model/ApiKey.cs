/*
 * MITA Notifications Platform REST API
 *
 * The Notifications REST API allows programmatic access to the Notifications Portal message funtionality. To use the REST API, you will need a Notifications Portal Account and an API key and secret. You can generate from the Notifications Portal using the API Key Manager.The REST API takes full advantage of all HTTP headers. Each part of a request and response is meaningful, including the request method (GET/POST, etc.), the individual headers (Location, Content-Type, Accept, etc.), and the response status code (200, 400, 404, etc.). Use of this API assumes a working knowledge of these HTTP components, and general use of RESTful web APIs.
 *
 * The version of the OpenAPI document: v1
 * Contact: notifications.mita@gov.mt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mita.Notifications.Client.Client.OpenAPIDateConverter;

namespace Mita.Notifications.Client.Model;

/// <summary>
/// API Key Information.
/// </summary>
[DataContract(Name = "ApiKey")]
public partial class ApiKey : IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="ApiKey" /> class.
    /// </summary>
    /// <param name="name">Friendly name to identify the usage of the API Key..</param>
    /// <param name="key">API Key unique identifier..</param>
    /// <param name="secret">Secret Key (Must be refreshed every seven days or as per the indicated Expiry Date field)..</param>
    /// <param name="expiryDate">Expiry Date. If null the Secret Key never expires (only used for testing)..</param>
    public ApiKey(string name = default(string), string key = default(string), string secret = default(string), DateTimeOffset? expiryDate = default(DateTimeOffset?))
    {
            this.Name = name;
            this.Key = key;
            this.Secret = secret;
            this.ExpiryDate = expiryDate;
        }

    /// <summary>
    /// Friendly name to identify the usage of the API Key.
    /// </summary>
    /// <value>Friendly name to identify the usage of the API Key.</value>
    [DataMember(Name = "Name", EmitDefaultValue = true)]
    public string Name { get; set; }

    /// <summary>
    /// API Key unique identifier.
    /// </summary>
    /// <value>API Key unique identifier.</value>
    [DataMember(Name = "Key", EmitDefaultValue = true)]
    public string Key { get; set; }

    /// <summary>
    /// Secret Key (Must be refreshed every seven days or as per the indicated Expiry Date field).
    /// </summary>
    /// <value>Secret Key (Must be refreshed every seven days or as per the indicated Expiry Date field).</value>
    [DataMember(Name = "Secret", EmitDefaultValue = true)]
    public string Secret { get; set; }

    /// <summary>
    /// Expiry Date. If null the Secret Key never expires (only used for testing).
    /// </summary>
    /// <value>Expiry Date. If null the Secret Key never expires (only used for testing).</value>
    [DataMember(Name = "ExpiryDate", EmitDefaultValue = true)]
    public DateTimeOffset? ExpiryDate { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiKey {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
            yield break;
        }
}