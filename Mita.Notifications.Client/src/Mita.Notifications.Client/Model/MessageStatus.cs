/*
 * MITA Notifications Platform REST API
 *
 * The Notifications REST API allows programmatic access to the Notifications Portal message funtionality. To use the REST API, you will need a Notifications Portal Account and an API key and secret. You can generate from the Notifications Portal using the API Key Manager.The REST API takes full advantage of all HTTP headers. Each part of a request and response is meaningful, including the request method (GET/POST, etc.), the individual headers (Location, Content-Type, Accept, etc.), and the response status code (200, 400, 404, etc.). Use of this API assumes a working knowledge of these HTTP components, and general use of RESTful web APIs.
 *
 * The version of the OpenAPI document: v1
 * Contact: notifications.mita@gov.mt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mita.Notifications.Client.Client.OpenAPIDateConverter;

namespace Mita.Notifications.Client.Model;

/// <summary>
/// Message Status
/// </summary>
/// <value>Message Status</value>
[JsonConverter(typeof(StringEnumConverter))]
public enum MessageStatus
{
    /// <summary>
    /// Enum _100 for value: 100
    /// </summary>
    [EnumMember(Value = "100")]
    _100 = 1,

    /// <summary>
    /// Enum _105 for value: 105
    /// </summary>
    [EnumMember(Value = "105")]
    _105 = 2,

    /// <summary>
    /// Enum _110 for value: 110
    /// </summary>
    [EnumMember(Value = "110")]
    _110 = 3,

    /// <summary>
    /// Enum _115 for value: 115
    /// </summary>
    [EnumMember(Value = "115")]
    _115 = 4,

    /// <summary>
    /// Enum _120 for value: 120
    /// </summary>
    [EnumMember(Value = "120")]
    _120 = 5,

    /// <summary>
    /// Enum _125 for value: 125
    /// </summary>
    [EnumMember(Value = "125")]
    _125 = 6,

    /// <summary>
    /// Enum _130 for value: 130
    /// </summary>
    [EnumMember(Value = "130")]
    _130 = 7,

    /// <summary>
    /// Enum _135 for value: 135
    /// </summary>
    [EnumMember(Value = "135")]
    _135 = 8,

    /// <summary>
    /// Enum _140 for value: 140
    /// </summary>
    [EnumMember(Value = "140")]
    _140 = 9,

    /// <summary>
    /// Enum _145 for value: 145
    /// </summary>
    [EnumMember(Value = "145")]
    _145 = 10,

    /// <summary>
    /// Enum _150 for value: 150
    /// </summary>
    [EnumMember(Value = "150")]
    _150 = 11,

    /// <summary>
    /// Enum _160 for value: 160
    /// </summary>
    [EnumMember(Value = "160")]
    _160 = 12,

    /// <summary>
    /// Enum _112 for value: 112
    /// </summary>
    [EnumMember(Value = "112")]
    _112 = 13,

    /// <summary>
    /// Enum _170 for value: 170
    /// </summary>
    [EnumMember(Value = "170")]
    _170 = 14,

    /// <summary>
    /// Enum _180 for value: 180
    /// </summary>
    [EnumMember(Value = "180")]
    _180 = 15
}