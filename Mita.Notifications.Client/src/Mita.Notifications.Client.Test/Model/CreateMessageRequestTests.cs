/*
 * MITA Notifications Platform REST API
 *
 * The Notifications REST API allows programmatic access to the Notifications Portal message funtionality. To use the REST API, you will need a Notifications Portal Account and an API key and secret. You can generate from the Notifications Portal using the API Key Manager.The REST API takes full advantage of all HTTP headers. Each part of a request and response is meaningful, including the request method (GET/POST, etc.), the individual headers (Location, Content-Type, Accept, etc.), and the response status code (200, 400, 404, etc.). Use of this API assumes a working knowledge of these HTTP components, and general use of RESTful web APIs.
 *
 * The version of the OpenAPI document: v1
 * Contact: notifications.mita@gov.mt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Mita.Notifications.Client.Model;
using Mita.Notifications.Client.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Mita.Notifications.Client.Test.Model;

/// <summary>
///  Class for testing CreateMessageRequest
/// </summary>
/// <remarks>
/// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
/// Please update the test case below to test the model.
/// </remarks>
public class CreateMessageRequestTests : IDisposable
{
    // TODO uncomment below to declare an instance variable for CreateMessageRequest
    //private CreateMessageRequest instance;

    public CreateMessageRequestTests()
    {
            // TODO uncomment below to create an instance of CreateMessageRequest
            //instance = new CreateMessageRequest();
        }

    public void Dispose()
    {
            // Cleanup when everything is done.
        }

    /// <summary>
    /// Test an instance of CreateMessageRequest
    /// </summary>
    [Fact]
    public void CreateMessageRequestInstanceTest()
    {
            // TODO uncomment below to test "IsType" CreateMessageRequest
            //Assert.IsType<CreateMessageRequest>(instance);
        }

    /// <summary>
    /// Test the property 'Contacts'
    /// </summary>
    [Fact]
    public void ContactsTest()
    {
            // TODO unit test for the property 'Contacts'
        }

    /// <summary>
    /// Test the property 'MessageContent'
    /// </summary>
    [Fact]
    public void MessageContentTest()
    {
            // TODO unit test for the property 'MessageContent'
        }

    /// <summary>
    /// Test the property 'ClientReference'
    /// </summary>
    [Fact]
    public void ClientReferenceTest()
    {
            // TODO unit test for the property 'ClientReference'
        }

    /// <summary>
    /// Test the property 'MessageType'
    /// </summary>
    [Fact]
    public void MessageTypeTest()
    {
            // TODO unit test for the property 'MessageType'
        }

    /// <summary>
    /// Test the property 'MessagePriority'
    /// </summary>
    [Fact]
    public void MessagePriorityTest()
    {
            // TODO unit test for the property 'MessagePriority'
        }

    /// <summary>
    /// Test the property 'SenderId'
    /// </summary>
    [Fact]
    public void SenderIdTest()
    {
            // TODO unit test for the property 'SenderId'
        }

    /// <summary>
    /// Test the property 'CallbackUrl'
    /// </summary>
    [Fact]
    public void CallbackUrlTest()
    {
            // TODO unit test for the property 'CallbackUrl'
        }

    /// <summary>
    /// Test the property 'ScheduledDeliveryDate'
    /// </summary>
    [Fact]
    public void ScheduledDeliveryDateTest()
    {
            // TODO unit test for the property 'ScheduledDeliveryDate'
        }
}