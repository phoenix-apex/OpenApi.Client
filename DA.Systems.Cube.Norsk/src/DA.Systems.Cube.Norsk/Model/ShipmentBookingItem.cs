/*
 * Norsk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: helpdesk@norsk-global.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DA.Systems.Cube.Norsk.Client.FileParameter;
using OpenAPIDateConverter = DA.Systems.Cube.Norsk.Client.OpenAPIDateConverter;

namespace DA.Systems.Cube.Norsk.Model
{
    /// <summary>
    /// ShipmentBookingItem
    /// </summary>
    [DataContract(Name = "ShipmentBookingItem")]
    public class ShipmentBookingItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentBookingItem" /> class.
        /// </summary>
        /// <param name="norskBarcode">Barcode/identifier allocated for the shipment item   by Norsk may not be displayed on the label..</param>
        /// <param name="barcode">The barcode shown on the label for the shipment item..</param>
        /// <param name="label">Separate label for the shipment item.  Base64 encoded in pdf format..</param>
        /// <param name="scanBarcode">Barcode that is used when scanning an item.  May be different from numeric barcode displayed on the label..</param>
        /// <param name="weight">Weight for the item specified by the booking  May be different from specified depending on dimensions.</param>
        public ShipmentBookingItem(string norskBarcode = default(string), string barcode = default(string), byte[] label = default(byte[]), string scanBarcode = default(string), double weight = default(double))
        {
            NorskBarcode = norskBarcode;
            Barcode = barcode;
            Label = label;
            ScanBarcode = scanBarcode;
            Weight = weight;
        }

        /// <summary>
        /// Barcode/identifier allocated for the shipment item   by Norsk may not be displayed on the label.
        /// </summary>
        /// <value>Barcode/identifier allocated for the shipment item   by Norsk may not be displayed on the label.</value>
        [DataMember(Name = "NorskBarcode", EmitDefaultValue = true)]
        public string NorskBarcode { get; set; }

        /// <summary>
        /// The barcode shown on the label for the shipment item.
        /// </summary>
        /// <value>The barcode shown on the label for the shipment item.</value>
        [DataMember(Name = "Barcode", EmitDefaultValue = true)]
        public string Barcode { get; set; }

        /// <summary>
        /// Separate label for the shipment item.  Base64 encoded in pdf format.
        /// </summary>
        /// <value>Separate label for the shipment item.  Base64 encoded in pdf format.</value>
        [DataMember(Name = "Label", EmitDefaultValue = true)]
        public byte[] Label { get; set; }

        /// <summary>
        /// Barcode that is used when scanning an item.  May be different from numeric barcode displayed on the label.
        /// </summary>
        /// <value>Barcode that is used when scanning an item.  May be different from numeric barcode displayed on the label.</value>
        [DataMember(Name = "ScanBarcode", EmitDefaultValue = true)]
        public string ScanBarcode { get; set; }

        /// <summary>
        /// Weight for the item specified by the booking  May be different from specified depending on dimensions
        /// </summary>
        /// <value>Weight for the item specified by the booking  May be different from specified depending on dimensions</value>
        [DataMember(Name = "Weight", EmitDefaultValue = true)]
        public double Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentBookingItem {\n");
            sb.Append("  NorskBarcode: ").Append(NorskBarcode).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  ScanBarcode: ").Append(ScanBarcode).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
