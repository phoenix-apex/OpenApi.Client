/*
 * Norsk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: helpdesk@norsk-global.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using DA.Systems.Cube.Norsk.Model;

namespace DA.Systems.Cube.Norsk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShipmentApi : IDisposable, IShipmentApi
    {
        private DA.Systems.Cube.Norsk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ShipmentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ShipmentApi(string basePath)
        {
            this.Configuration = DA.Systems.Cube.Norsk.Client.Configuration.MergeConfigurations(
                DA.Systems.Cube.Norsk.Client.GlobalConfiguration.Instance,
                new DA.Systems.Cube.Norsk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new DA.Systems.Cube.Norsk.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = DA.Systems.Cube.Norsk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ShipmentApi(DA.Systems.Cube.Norsk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DA.Systems.Cube.Norsk.Client.Configuration.MergeConfigurations(
                DA.Systems.Cube.Norsk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new DA.Systems.Cube.Norsk.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = DA.Systems.Cube.Norsk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ShipmentApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ShipmentApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = DA.Systems.Cube.Norsk.Client.Configuration.MergeConfigurations(
                DA.Systems.Cube.Norsk.Client.GlobalConfiguration.Instance,
                new DA.Systems.Cube.Norsk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new DA.Systems.Cube.Norsk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = DA.Systems.Cube.Norsk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ShipmentApi(HttpClient client, DA.Systems.Cube.Norsk.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = DA.Systems.Cube.Norsk.Client.Configuration.MergeConfigurations(
                DA.Systems.Cube.Norsk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new DA.Systems.Cube.Norsk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = DA.Systems.Cube.Norsk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ShipmentApi(DA.Systems.Cube.Norsk.Client.ISynchronousClient client, DA.Systems.Cube.Norsk.Client.IAsynchronousClient asyncClient, DA.Systems.Cube.Norsk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DA.Systems.Cube.Norsk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public DA.Systems.Cube.Norsk.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DA.Systems.Cube.Norsk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DA.Systems.Cube.Norsk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DA.Systems.Cube.Norsk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DA.Systems.Cube.Norsk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve captured weight/dimensions for a shipment items May return not found if the dimensions haven&#39;t yet been captured
        /// </summary>
        /// <exception cref="DA.Systems.Cube.Norsk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode">String containing a reference for the searched shipment</param>
        /// <returns>ShipmentDimensionsResponse</returns>
        public ShipmentDimensionsResponse GetApiShipmentDimensionsByBarcode(string barcode)
        {
            DA.Systems.Cube.Norsk.Client.ApiResponse<ShipmentDimensionsResponse> localVarResponse = GetApiShipmentDimensionsByBarcodeWithHttpInfo(barcode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve captured weight/dimensions for a shipment items May return not found if the dimensions haven&#39;t yet been captured
        /// </summary>
        /// <exception cref="DA.Systems.Cube.Norsk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode">String containing a reference for the searched shipment</param>
        /// <returns>ApiResponse of ShipmentDimensionsResponse</returns>
        public DA.Systems.Cube.Norsk.Client.ApiResponse<ShipmentDimensionsResponse> GetApiShipmentDimensionsByBarcodeWithHttpInfo(string barcode)
        {
            // verify the required parameter 'barcode' is set
            if (barcode == null)
                throw new DA.Systems.Cube.Norsk.Client.ApiException(400, "Missing required parameter 'barcode' when calling ShipmentApi->");

            DA.Systems.Cube.Norsk.Client.RequestOptions localVarRequestOptions = new DA.Systems.Cube.Norsk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DA.Systems.Cube.Norsk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DA.Systems.Cube.Norsk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("barcode", DA.Systems.Cube.Norsk.Client.ClientUtils.ParameterToString(barcode)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ShipmentDimensionsResponse>("/api/shipment/{barcode}/dimensions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiShipmentDimensionsByBarcode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve captured weight/dimensions for a shipment items May return not found if the dimensions haven&#39;t yet been captured
        /// </summary>
        /// <exception cref="DA.Systems.Cube.Norsk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode">String containing a reference for the searched shipment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentDimensionsResponse</returns>
        public async System.Threading.Tasks.Task<ShipmentDimensionsResponse> GetApiShipmentDimensionsByBarcodeAsync(string barcode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DA.Systems.Cube.Norsk.Client.ApiResponse<ShipmentDimensionsResponse> localVarResponse = await GetApiShipmentDimensionsByBarcodeWithHttpInfoAsync(barcode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve captured weight/dimensions for a shipment items May return not found if the dimensions haven&#39;t yet been captured
        /// </summary>
        /// <exception cref="DA.Systems.Cube.Norsk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode">String containing a reference for the searched shipment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentDimensionsResponse)</returns>
        public async System.Threading.Tasks.Task<DA.Systems.Cube.Norsk.Client.ApiResponse<ShipmentDimensionsResponse>> GetApiShipmentDimensionsByBarcodeWithHttpInfoAsync(string barcode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'barcode' is set
            if (barcode == null)
                throw new DA.Systems.Cube.Norsk.Client.ApiException(400, "Missing required parameter 'barcode' when calling ShipmentApi->");


            DA.Systems.Cube.Norsk.Client.RequestOptions localVarRequestOptions = new DA.Systems.Cube.Norsk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DA.Systems.Cube.Norsk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DA.Systems.Cube.Norsk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("barcode", DA.Systems.Cube.Norsk.Client.ClientUtils.ParameterToString(barcode)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ShipmentDimensionsResponse>("/api/shipment/{barcode}/dimensions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiShipmentDimensionsByBarcode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an object with all corresponding data for \&quot;ExternalApi.Models.Shipment\&quot;. 
        /// </summary>
        /// <exception cref="DA.Systems.Cube.Norsk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode">String containing a reference for the searched shipment</param>
        /// <returns>Shipment</returns>
        public Shipment GetApiShipmentByBarcode(string barcode)
        {
            DA.Systems.Cube.Norsk.Client.ApiResponse<Shipment> localVarResponse = GetApiShipmentByBarcodeWithHttpInfo(barcode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an object with all corresponding data for \&quot;ExternalApi.Models.Shipment\&quot;. 
        /// </summary>
        /// <exception cref="DA.Systems.Cube.Norsk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode">String containing a reference for the searched shipment</param>
        /// <returns>ApiResponse of Shipment</returns>
        public DA.Systems.Cube.Norsk.Client.ApiResponse<Shipment> GetApiShipmentByBarcodeWithHttpInfo(string barcode)
        {
            // verify the required parameter 'barcode' is set
            if (barcode == null)
                throw new DA.Systems.Cube.Norsk.Client.ApiException(400, "Missing required parameter 'barcode' when calling ShipmentApi->");

            DA.Systems.Cube.Norsk.Client.RequestOptions localVarRequestOptions = new DA.Systems.Cube.Norsk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DA.Systems.Cube.Norsk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DA.Systems.Cube.Norsk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("barcode", DA.Systems.Cube.Norsk.Client.ClientUtils.ParameterToString(barcode)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Shipment>("/api/shipment/{barcode}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiShipmentByBarcode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an object with all corresponding data for \&quot;ExternalApi.Models.Shipment\&quot;. 
        /// </summary>
        /// <exception cref="DA.Systems.Cube.Norsk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode">String containing a reference for the searched shipment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Shipment</returns>
        public async System.Threading.Tasks.Task<Shipment> GetApiShipmentByBarcodeAsync(string barcode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DA.Systems.Cube.Norsk.Client.ApiResponse<Shipment> localVarResponse = await GetApiShipmentByBarcodeWithHttpInfoAsync(barcode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an object with all corresponding data for \&quot;ExternalApi.Models.Shipment\&quot;. 
        /// </summary>
        /// <exception cref="DA.Systems.Cube.Norsk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode">String containing a reference for the searched shipment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        public async System.Threading.Tasks.Task<DA.Systems.Cube.Norsk.Client.ApiResponse<Shipment>> GetApiShipmentByBarcodeWithHttpInfoAsync(string barcode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'barcode' is set
            if (barcode == null)
                throw new DA.Systems.Cube.Norsk.Client.ApiException(400, "Missing required parameter 'barcode' when calling ShipmentApi->");


            DA.Systems.Cube.Norsk.Client.RequestOptions localVarRequestOptions = new DA.Systems.Cube.Norsk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DA.Systems.Cube.Norsk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DA.Systems.Cube.Norsk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("barcode", DA.Systems.Cube.Norsk.Client.ClientUtils.ParameterToString(barcode)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Shipment>("/api/shipment/{barcode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiShipmentByBarcode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DA.Systems.Cube.Norsk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode"></param>
        /// <param name="format"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] GetApiShipmentLabelByBarcode(string barcode, LabelFormat? format = default(LabelFormat?), LabelSize? size = default(LabelSize?))
        {
            DA.Systems.Cube.Norsk.Client.ApiResponse<byte[]> localVarResponse = GetApiShipmentLabelByBarcodeWithHttpInfo(barcode, format, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DA.Systems.Cube.Norsk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode"></param>
        /// <param name="format"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public DA.Systems.Cube.Norsk.Client.ApiResponse<byte[]> GetApiShipmentLabelByBarcodeWithHttpInfo(string barcode, LabelFormat? format = default(LabelFormat?), LabelSize? size = default(LabelSize?))
        {
            // verify the required parameter 'barcode' is set
            if (barcode == null)
                throw new DA.Systems.Cube.Norsk.Client.ApiException(400, "Missing required parameter 'barcode' when calling ShipmentApi->");

            DA.Systems.Cube.Norsk.Client.RequestOptions localVarRequestOptions = new DA.Systems.Cube.Norsk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf",
                "text/vnd.eltron-epl",
                "application/json"
            };

            var localVarContentType = DA.Systems.Cube.Norsk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DA.Systems.Cube.Norsk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("barcode", DA.Systems.Cube.Norsk.Client.ClientUtils.ParameterToString(barcode)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(DA.Systems.Cube.Norsk.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(DA.Systems.Cube.Norsk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<byte[]>("/api/shipment/{barcode}/label", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiShipmentLabelByBarcode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DA.Systems.Cube.Norsk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode"></param>
        /// <param name="format"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetApiShipmentLabelByBarcodeAsync(string barcode, LabelFormat? format = default(LabelFormat?), LabelSize? size = default(LabelSize?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DA.Systems.Cube.Norsk.Client.ApiResponse<byte[]> localVarResponse = await GetApiShipmentLabelByBarcodeWithHttpInfoAsync(barcode, format, size, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DA.Systems.Cube.Norsk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcode"></param>
        /// <param name="format"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<DA.Systems.Cube.Norsk.Client.ApiResponse<byte[]>> GetApiShipmentLabelByBarcodeWithHttpInfoAsync(string barcode, LabelFormat? format = default(LabelFormat?), LabelSize? size = default(LabelSize?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'barcode' is set
            if (barcode == null)
                throw new DA.Systems.Cube.Norsk.Client.ApiException(400, "Missing required parameter 'barcode' when calling ShipmentApi->");


            DA.Systems.Cube.Norsk.Client.RequestOptions localVarRequestOptions = new DA.Systems.Cube.Norsk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf",
                "text/vnd.eltron-epl",
                "application/json"
            };


            var localVarContentType = DA.Systems.Cube.Norsk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DA.Systems.Cube.Norsk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("barcode", DA.Systems.Cube.Norsk.Client.ClientUtils.ParameterToString(barcode)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(DA.Systems.Cube.Norsk.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(DA.Systems.Cube.Norsk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<byte[]>("/api/shipment/{barcode}/label", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiShipmentLabelByBarcode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Book a shipment 
        /// </summary>
        /// <exception cref="DA.Systems.Cube.Norsk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentBookingRequest">A model that represents a shipment booking request (optional)</param>
        /// <returns>ShipmentBookingResponse</returns>
        public ShipmentBookingResponse PostApiShipment(ShipmentBookingRequest shipmentBookingRequest = default(ShipmentBookingRequest))
        {
            DA.Systems.Cube.Norsk.Client.ApiResponse<ShipmentBookingResponse> localVarResponse = PostApiShipmentWithHttpInfo(shipmentBookingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Book a shipment 
        /// </summary>
        /// <exception cref="DA.Systems.Cube.Norsk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentBookingRequest">A model that represents a shipment booking request (optional)</param>
        /// <returns>ApiResponse of ShipmentBookingResponse</returns>
        public DA.Systems.Cube.Norsk.Client.ApiResponse<ShipmentBookingResponse> PostApiShipmentWithHttpInfo(ShipmentBookingRequest shipmentBookingRequest = default(ShipmentBookingRequest))
        {
            DA.Systems.Cube.Norsk.Client.RequestOptions localVarRequestOptions = new DA.Systems.Cube.Norsk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DA.Systems.Cube.Norsk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DA.Systems.Cube.Norsk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = shipmentBookingRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ShipmentBookingResponse>("/api/shipment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiShipment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Book a shipment 
        /// </summary>
        /// <exception cref="DA.Systems.Cube.Norsk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentBookingRequest">A model that represents a shipment booking request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentBookingResponse</returns>
        public async System.Threading.Tasks.Task<ShipmentBookingResponse> PostApiShipmentAsync(ShipmentBookingRequest shipmentBookingRequest = default(ShipmentBookingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            DA.Systems.Cube.Norsk.Client.ApiResponse<ShipmentBookingResponse> localVarResponse = await PostApiShipmentWithHttpInfoAsync(shipmentBookingRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Book a shipment 
        /// </summary>
        /// <exception cref="DA.Systems.Cube.Norsk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentBookingRequest">A model that represents a shipment booking request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentBookingResponse)</returns>
        public async System.Threading.Tasks.Task<DA.Systems.Cube.Norsk.Client.ApiResponse<ShipmentBookingResponse>> PostApiShipmentWithHttpInfoAsync(ShipmentBookingRequest shipmentBookingRequest = default(ShipmentBookingRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            DA.Systems.Cube.Norsk.Client.RequestOptions localVarRequestOptions = new DA.Systems.Cube.Norsk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DA.Systems.Cube.Norsk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DA.Systems.Cube.Norsk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = shipmentBookingRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ShipmentBookingResponse>("/api/shipment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiShipment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
