/*
 * Norsk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: helpdesk@norsk-global.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DA.Systems.Cube.Norsk.Client.FileParameter;
using OpenAPIDateConverter = DA.Systems.Cube.Norsk.Client.OpenAPIDateConverter;

namespace DA.Systems.Cube.Norsk.Model
{
    /// <summary>
    /// Dimensions
    /// </summary>
    [DataContract(Name = "Dimensions")]
    public class Dimensions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Dimensions" /> class.
        /// </summary>
        /// <param name="norskBarcode">norskBarcode.</param>
        /// <param name="depth">The depth/length specified in CM.</param>
        /// <param name="height">The height specified in CM.</param>
        /// <param name="width">The width specified in CM.</param>
        /// <param name="weight">The weight specified in KG.</param>
        /// <param name="volumeWeight">The weight specified in KG.</param>
        public Dimensions(string norskBarcode = default(string), double depth = default(double), double height = default(double), double width = default(double), double weight = default(double), double volumeWeight = default(double))
        {
            NorskBarcode = norskBarcode;
            Depth = depth;
            Height = height;
            Width = width;
            Weight = weight;
            VolumeWeight = volumeWeight;
        }

        /// <summary>
        /// Gets or Sets NorskBarcode
        /// </summary>
        [DataMember(Name = "NorskBarcode", EmitDefaultValue = true)]
        public string NorskBarcode { get; set; }

        /// <summary>
        /// The depth/length specified in CM
        /// </summary>
        /// <value>The depth/length specified in CM</value>
        [DataMember(Name = "Depth", EmitDefaultValue = true)]
        public double Depth { get; set; }

        /// <summary>
        /// The height specified in CM
        /// </summary>
        /// <value>The height specified in CM</value>
        [DataMember(Name = "Height", EmitDefaultValue = true)]
        public double Height { get; set; }

        /// <summary>
        /// The width specified in CM
        /// </summary>
        /// <value>The width specified in CM</value>
        [DataMember(Name = "Width", EmitDefaultValue = true)]
        public double Width { get; set; }

        /// <summary>
        /// The weight specified in KG
        /// </summary>
        /// <value>The weight specified in KG</value>
        [DataMember(Name = "Weight", EmitDefaultValue = true)]
        public double Weight { get; set; }

        /// <summary>
        /// The weight specified in KG
        /// </summary>
        /// <value>The weight specified in KG</value>
        [DataMember(Name = "VolumeWeight", EmitDefaultValue = true)]
        public double VolumeWeight { get; set; }

        /// <summary>
        /// URL to the captured image of the Shipment Item
        /// </summary>
        /// <value>URL to the captured image of the Shipment Item</value>
        [DataMember(Name = "ImageUrl", EmitDefaultValue = true)]
        public string ImageUrl { get; private set; }

        /// <summary>
        /// Returns false as ImageUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeImageUrl()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Dimensions {\n");
            sb.Append("  NorskBarcode: ").Append(NorskBarcode).Append("\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  VolumeWeight: ").Append(VolumeWeight).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
