/*
 * Norsk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: helpdesk@norsk-global.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DA.Systems.Cube.Norsk.Client.FileParameter;
using OpenAPIDateConverter = DA.Systems.Cube.Norsk.Client.OpenAPIDateConverter;

namespace DA.Systems.Cube.Norsk.Model
{
    /// <summary>
    /// ValidationErrors
    /// </summary>
    [DataContract(Name = "ValidationErrors")]
    public class ValidationErrors : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationErrors" /> class.
        /// </summary>
        /// <param name="targetSite">targetSite.</param>
        /// <param name="innerException">innerException.</param>
        /// <param name="helpLink">helpLink.</param>
        /// <param name="source">source.</param>
        /// <param name="hResult">hResult.</param>
        /// <param name="fields">fields.</param>
        public ValidationErrors(Object targetSite = default(Object), Object innerException = default(Object), string helpLink = default(string), string source = default(string), int hResult = default(int), List<RequestField> fields = default(List<RequestField>))
        {
            TargetSite = targetSite;
            InnerException = innerException;
            HelpLink = helpLink;
            Source = source;
            HResult = hResult;
            Fields = fields;
        }

        /// <summary>
        /// Gets or Sets TargetSite
        /// </summary>
        [DataMember(Name = "TargetSite", EmitDefaultValue = true)]
        public Object TargetSite { get; set; }

        /// <summary>
        /// Gets or Sets StackTrace
        /// </summary>
        [DataMember(Name = "StackTrace", EmitDefaultValue = true)]
        public string StackTrace { get; private set; }

        /// <summary>
        /// Returns false as StackTrace should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStackTrace()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "Message", EmitDefaultValue = true)]
        public string Message { get; private set; }

        /// <summary>
        /// Returns false as Message should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMessage()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "Data", EmitDefaultValue = true)]
        public Dictionary<string, Object> Data { get; private set; }

        /// <summary>
        /// Returns false as Data should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeData()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets InnerException
        /// </summary>
        [DataMember(Name = "InnerException", EmitDefaultValue = true)]
        public Object InnerException { get; set; }

        /// <summary>
        /// Gets or Sets HelpLink
        /// </summary>
        [DataMember(Name = "HelpLink", EmitDefaultValue = true)]
        public string HelpLink { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "Source", EmitDefaultValue = true)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets HResult
        /// </summary>
        [DataMember(Name = "HResult", EmitDefaultValue = true)]
        public int HResult { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name = "ErrorCode", EmitDefaultValue = true)]
        public string ErrorCode { get; private set; }

        /// <summary>
        /// Returns false as ErrorCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeErrorCode()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "Fields", EmitDefaultValue = true)]
        public List<RequestField> Fields { get; set; }

        /// <summary>
        /// Gets or Sets PublicMessage
        /// </summary>
        [DataMember(Name = "PublicMessage", EmitDefaultValue = true)]
        public string PublicMessage { get; private set; }

        /// <summary>
        /// Returns false as PublicMessage should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePublicMessage()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidationErrors {\n");
            sb.Append("  TargetSite: ").Append(TargetSite).Append("\n");
            sb.Append("  StackTrace: ").Append(StackTrace).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  InnerException: ").Append(InnerException).Append("\n");
            sb.Append("  HelpLink: ").Append(HelpLink).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  HResult: ").Append(HResult).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  PublicMessage: ").Append(PublicMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
