/*
 * Norsk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: helpdesk@norsk-global.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DA.Systems.Cube.Norsk.Client.FileParameter;
using OpenAPIDateConverter = DA.Systems.Cube.Norsk.Client.OpenAPIDateConverter;

namespace DA.Systems.Cube.Norsk.Model
{
    /// <summary>
    /// Represents a model for a quote request in the shipment process. This model includes detailed information   about the shipping date, destination, collection source, value of the shipment, its pieces, and any applicable extra charges.
    /// </summary>
    [DataContract(Name = "QuoteRequestModel")]
    public class QuoteRequestModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteRequestModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QuoteRequestModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteRequestModel" /> class.
        /// </summary>
        /// <param name="shippingDate">The expected shipping date. More accurate prices are provided if the date is closer to the actual shipping date. (required).</param>
        /// <param name="zipcode">The ZIP code of the destination, if applicable..</param>
        /// <param name="town">The town of the destination..</param>
        /// <param name="countryCode">The country code of the destination. (required).</param>
        /// <param name="collection">collection.</param>
        /// <param name="dutiable">dutiable.</param>
        /// <param name="additionalServiceOptions">additionalServiceOptions.</param>
        /// <param name="pieces">A list describing all the pieces in the shipment. (required).</param>
        /// <param name="specials">A list of additional charges to apply to the quote, e.g., for Delivery Duty Paid (DDP)..</param>
        public QuoteRequestModel(DateTimeOffset shippingDate = default(DateTimeOffset), string zipcode = default(string), string town = default(string), string countryCode = default(string), From collection = default(From), Dutiable dutiable = default(Dutiable), ServiceOptions additionalServiceOptions = default(ServiceOptions), List<QuoteRequestPiece> pieces = default(List<QuoteRequestPiece>), List<QuoteSpecials> specials = default(List<QuoteSpecials>))
        {
            ShippingDate = shippingDate;
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new ArgumentNullException("countryCode is a required property for QuoteRequestModel and cannot be null");
            }
            CountryCode = countryCode;
            // to ensure "pieces" is required (not null)
            if (pieces == null)
            {
                throw new ArgumentNullException("pieces is a required property for QuoteRequestModel and cannot be null");
            }
            Pieces = pieces;
            Zipcode = zipcode;
            Town = town;
            Collection = collection;
            Dutiable = dutiable;
            AdditionalServiceOptions = additionalServiceOptions;
            Specials = specials;
        }

        /// <summary>
        /// The expected shipping date. More accurate prices are provided if the date is closer to the actual shipping date.
        /// </summary>
        /// <value>The expected shipping date. More accurate prices are provided if the date is closer to the actual shipping date.</value>
        [DataMember(Name = "ShippingDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ShippingDate { get; set; }

        /// <summary>
        /// The ZIP code of the destination, if applicable.
        /// </summary>
        /// <value>The ZIP code of the destination, if applicable.</value>
        [DataMember(Name = "Zipcode", EmitDefaultValue = true)]
        public string Zipcode { get; set; }

        /// <summary>
        /// The town of the destination.
        /// </summary>
        /// <value>The town of the destination.</value>
        [DataMember(Name = "Town", EmitDefaultValue = true)]
        public string Town { get; set; }

        /// <summary>
        /// The country code of the destination.
        /// </summary>
        /// <value>The country code of the destination.</value>
        [DataMember(Name = "CountryCode", IsRequired = true, EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets Collection
        /// </summary>
        [DataMember(Name = "Collection", EmitDefaultValue = true)]
        public From Collection { get; set; }

        /// <summary>
        /// Gets or Sets Dutiable
        /// </summary>
        [DataMember(Name = "Dutiable", EmitDefaultValue = true)]
        public Dutiable Dutiable { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalServiceOptions
        /// </summary>
        [DataMember(Name = "AdditionalServiceOptions", EmitDefaultValue = true)]
        public ServiceOptions AdditionalServiceOptions { get; set; }

        /// <summary>
        /// A list describing all the pieces in the shipment.
        /// </summary>
        /// <value>A list describing all the pieces in the shipment.</value>
        [DataMember(Name = "Pieces", IsRequired = true, EmitDefaultValue = true)]
        public List<QuoteRequestPiece> Pieces { get; set; }

        /// <summary>
        /// A list of additional charges to apply to the quote, e.g., for Delivery Duty Paid (DDP).
        /// </summary>
        /// <value>A list of additional charges to apply to the quote, e.g., for Delivery Duty Paid (DDP).</value>
        [DataMember(Name = "Specials", EmitDefaultValue = true)]
        public List<QuoteSpecials> Specials { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuoteRequestModel {\n");
            sb.Append("  ShippingDate: ").Append(ShippingDate).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("  Town: ").Append(Town).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Collection: ").Append(Collection).Append("\n");
            sb.Append("  Dutiable: ").Append(Dutiable).Append("\n");
            sb.Append("  AdditionalServiceOptions: ").Append(AdditionalServiceOptions).Append("\n");
            sb.Append("  Pieces: ").Append(Pieces).Append("\n");
            sb.Append("  Specials: ").Append(Specials).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ShippingDate (DateTimeOffset) minLength
            if (ShippingDate != null && ShippingDate < DateTimeOffset.Now)
            {
                yield return new ValidationResult("Invalid value for ShippingDate, must be a value greater than or equal to current date.", new [] { "ShippingDate" });
            }

            // CountryCode (string) maxLength
            if (CountryCode != null && CountryCode.Length > 2)
            {
                yield return new ValidationResult("Invalid value for CountryCode, length must be less than 2.", new [] { "CountryCode" });
            }

            // CountryCode (string) minLength
            if (CountryCode != null && CountryCode.Length < 2)
            {
                yield return new ValidationResult("Invalid value for CountryCode, length must be greater than 2.", new [] { "CountryCode" });
            }

            yield break;
        }
    }

}
