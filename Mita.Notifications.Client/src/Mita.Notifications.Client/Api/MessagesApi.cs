/*
 * MITA Notifications Platform REST API
 *
 * The Notifications REST API allows programmatic access to the Notifications Portal message funtionality. To use the REST API, you will need a Notifications Portal Account and an API key and secret. You can generate from the Notifications Portal using the API Key Manager.The REST API takes full advantage of all HTTP headers. Each part of a request and response is meaningful, including the request method (GET/POST, etc.), the individual headers (Location, Content-Type, Accept, etc.), and the response status code (200, 400, 404, etc.). Use of this API assumes a working knowledge of these HTTP components, and general use of RESTful web APIs.
 *
 * The version of the OpenAPI document: v1
 * Contact: notifications.mita@gov.mt
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Mita.Notifications.Client.Client;
using Mita.Notifications.Client.Model;

namespace Mita.Notifications.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method allows for the retrieval of all messages stored by the system.   To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: Subject, MessageType, MessagePriority,   MessageStatus, ScheduledDeliveryDate (default), and DateCreated.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. (optional)</param>
        /// <param name="clientReference">Unique reference provided by the client application while submitting a new message. (optional)</param>
        /// <param name="messageType">Message Type. (optional)</param>
        /// <param name="messageStatus">Message Status. (optional)</param>
        /// <param name="senderId">Sender unqiue identifier. (optional)</param>
        /// <param name="scheduledDeliveryDateFrom">From date and time when the message is scheduled for delivery. (optional)</param>
        /// <param name="scheduledDeliveryDateTo">To date and time when the message is scheduled for delivery. (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>DeliveryReports</returns>
        DeliveryReports GetApiV1Messages(Guid? batchId = default(Guid?), string clientReference = default(string), MessageType? messageType = default(MessageType?), MessageStatus? messageStatus = default(MessageStatus?), Guid? senderId = default(Guid?), DateTimeOffset? scheduledDeliveryDateFrom = default(DateTimeOffset?), DateTimeOffset? scheduledDeliveryDateTo = default(DateTimeOffset?), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?));

        /// <summary>
        /// This method allows for the retrieval of all messages stored by the system.   To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: Subject, MessageType, MessagePriority,   MessageStatus, ScheduledDeliveryDate (default), and DateCreated.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. (optional)</param>
        /// <param name="clientReference">Unique reference provided by the client application while submitting a new message. (optional)</param>
        /// <param name="messageType">Message Type. (optional)</param>
        /// <param name="messageStatus">Message Status. (optional)</param>
        /// <param name="senderId">Sender unqiue identifier. (optional)</param>
        /// <param name="scheduledDeliveryDateFrom">From date and time when the message is scheduled for delivery. (optional)</param>
        /// <param name="scheduledDeliveryDateTo">To date and time when the message is scheduled for delivery. (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>ApiResponse of DeliveryReports</returns>
        ApiResponse<DeliveryReports> GetApiV1MessagesWithHttpInfo(Guid? batchId = default(Guid?), string clientReference = default(string), MessageType? messageType = default(MessageType?), MessageStatus? messageStatus = default(MessageStatus?), Guid? senderId = default(Guid?), DateTimeOffset? scheduledDeliveryDateFrom = default(DateTimeOffset?), DateTimeOffset? scheduledDeliveryDateTo = default(DateTimeOffset?), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?));
        /// <summary>
        /// This method allows an application to delete a message stored   by the Notifications Portal. If the message is awaiting delivery (Pending status),   due to a future scheduled delivery date, the application will be able to   delete the message. If the message is enroute through the service provider channels,   deletion will not be possible. Note that the method allows only for the deletion   of a single message, single recipient as identified by the provided Message   Unique Identifier.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <returns></returns>
        void DeleteApiV1MessagesByMessageId(Guid messageId);

        /// <summary>
        /// This method allows an application to delete a message stored   by the Notifications Portal. If the message is awaiting delivery (Pending status),   due to a future scheduled delivery date, the application will be able to   delete the message. If the message is enroute through the service provider channels,   deletion will not be possible. Note that the method allows only for the deletion   of a single message, single recipient as identified by the provided Message   Unique Identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApiV1MessagesByMessageIdWithHttpInfo(Guid messageId);
        /// <summary>
        /// Retrieve the delivery report (DLR) for the message as specified in the messageId parameter.   The delivery report will contain both the delivery status of the message as provided by   the service operator and the original submitted message details. For SMS message types,   this is the piece of information sent back by the mobile network provider containing whether   the message was successfully delivered or if the delivery has failed. This method will be used   by an application to determine the status of the submitted message at any point in time.   Note, that delivery reports are also provided through the provided Callback URL (Recommended   Method) when submitting a new message request. This allows an application to receive the   delivery report instantaneously when the status of a message has changed.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <returns>DeliveryReport</returns>
        DeliveryReport GetApiV1MessagesByMessageId(Guid messageId);

        /// <summary>
        /// Retrieve the delivery report (DLR) for the message as specified in the messageId parameter.   The delivery report will contain both the delivery status of the message as provided by   the service operator and the original submitted message details. For SMS message types,   this is the piece of information sent back by the mobile network provider containing whether   the message was successfully delivered or if the delivery has failed. This method will be used   by an application to determine the status of the submitted message at any point in time.   Note, that delivery reports are also provided through the provided Callback URL (Recommended   Method) when submitting a new message request. This allows an application to receive the   delivery report instantaneously when the status of a message has changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <returns>ApiResponse of DeliveryReport</returns>
        ApiResponse<DeliveryReport> GetApiV1MessagesByMessageIdWithHttpInfo(Guid messageId);
        /// <summary>
        /// This method allows application to update the details of an already submitted   message stored by the Notifications Portal. If the message is awaiting delivery (Pending status),   due to a future scheduled delivery date, the application will be able to update any   of the details submitted. If the message is enroute through the service provider channels,   an update will not be possible. Note that the method allows only for the update of a single   message, single recipient as identified by the provided Message Unique Identifier.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="updateMessageRequest">Message object containing the new message details to be updated. (optional)</param>
        /// <returns>MessageBatch</returns>
        MessageBatch PutApiV1MessagesByMessageId(Guid messageId, UpdateMessageRequest updateMessageRequest = default(UpdateMessageRequest));

        /// <summary>
        /// This method allows application to update the details of an already submitted   message stored by the Notifications Portal. If the message is awaiting delivery (Pending status),   due to a future scheduled delivery date, the application will be able to update any   of the details submitted. If the message is enroute through the service provider channels,   an update will not be possible. Note that the method allows only for the update of a single   message, single recipient as identified by the provided Message Unique Identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="updateMessageRequest">Message object containing the new message details to be updated. (optional)</param>
        /// <returns>ApiResponse of MessageBatch</returns>
        ApiResponse<MessageBatch> PutApiV1MessagesByMessageIdWithHttpInfo(Guid messageId, UpdateMessageRequest updateMessageRequest = default(UpdateMessageRequest));
        /// <summary>
        /// This method allows an application to update the Scheduled Delivery Date field   for a single message as specified by the messageId parameter. Note, a message   can only be updated if the message is awaiting delivery (Pending status).   If the message is enroute through the service provider channels, an update   will not be possible.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="updateScheduledMessageRequest">MessageSchedule object containing the Scheduled Delivery Date to be updated. (optional)</param>
        /// <returns>MessageBatch</returns>
        MessageBatch PutApiV1MessagesSchedulesByMessageId(Guid messageId, UpdateScheduledMessageRequest updateScheduledMessageRequest = default(UpdateScheduledMessageRequest));

        /// <summary>
        /// This method allows an application to update the Scheduled Delivery Date field   for a single message as specified by the messageId parameter. Note, a message   can only be updated if the message is awaiting delivery (Pending status).   If the message is enroute through the service provider channels, an update   will not be possible.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="updateScheduledMessageRequest">MessageSchedule object containing the Scheduled Delivery Date to be updated. (optional)</param>
        /// <returns>ApiResponse of MessageBatch</returns>
        ApiResponse<MessageBatch> PutApiV1MessagesSchedulesByMessageIdWithHttpInfo(Guid messageId, UpdateScheduledMessageRequest updateScheduledMessageRequest = default(UpdateScheduledMessageRequest));
        /// <summary>
        /// This method allows an application to send a new Message Request.   The method supports various message types (currently SMS or Email) and   can be used by the application to send a message to either    individual or multiple recipients.
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMessageRequest">MessageRequest object containing the message data to be sent. (optional)</param>
        /// <returns>InboundMessageBatch</returns>
        InboundMessageBatch PostApiV1Messages(CreateMessageRequest createMessageRequest = default(CreateMessageRequest));

        /// <summary>
        /// This method allows an application to send a new Message Request.   The method supports various message types (currently SMS or Email) and   can be used by the application to send a message to either    individual or multiple recipients.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMessageRequest">MessageRequest object containing the message data to be sent. (optional)</param>
        /// <returns>ApiResponse of InboundMessageBatch</returns>
        ApiResponse<InboundMessageBatch> PostApiV1MessagesWithHttpInfo(CreateMessageRequest createMessageRequest = default(CreateMessageRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// This method allows for the retrieval of all messages stored by the system.   To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: Subject, MessageType, MessagePriority,   MessageStatus, ScheduledDeliveryDate (default), and DateCreated.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. (optional)</param>
        /// <param name="clientReference">Unique reference provided by the client application while submitting a new message. (optional)</param>
        /// <param name="messageType">Message Type. (optional)</param>
        /// <param name="messageStatus">Message Status. (optional)</param>
        /// <param name="senderId">Sender unqiue identifier. (optional)</param>
        /// <param name="scheduledDeliveryDateFrom">From date and time when the message is scheduled for delivery. (optional)</param>
        /// <param name="scheduledDeliveryDateTo">To date and time when the message is scheduled for delivery. (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeliveryReports</returns>
        System.Threading.Tasks.Task<DeliveryReports> GetApiV1MessagesAsync(Guid? batchId = default(Guid?), string clientReference = default(string), MessageType? messageType = default(MessageType?), MessageStatus? messageStatus = default(MessageStatus?), Guid? senderId = default(Guid?), DateTimeOffset? scheduledDeliveryDateFrom = default(DateTimeOffset?), DateTimeOffset? scheduledDeliveryDateTo = default(DateTimeOffset?), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows for the retrieval of all messages stored by the system.   To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: Subject, MessageType, MessagePriority,   MessageStatus, ScheduledDeliveryDate (default), and DateCreated.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. (optional)</param>
        /// <param name="clientReference">Unique reference provided by the client application while submitting a new message. (optional)</param>
        /// <param name="messageType">Message Type. (optional)</param>
        /// <param name="messageStatus">Message Status. (optional)</param>
        /// <param name="senderId">Sender unqiue identifier. (optional)</param>
        /// <param name="scheduledDeliveryDateFrom">From date and time when the message is scheduled for delivery. (optional)</param>
        /// <param name="scheduledDeliveryDateTo">To date and time when the message is scheduled for delivery. (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeliveryReports)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeliveryReports>> GetApiV1MessagesWithHttpInfoAsync(Guid? batchId = default(Guid?), string clientReference = default(string), MessageType? messageType = default(MessageType?), MessageStatus? messageStatus = default(MessageStatus?), Guid? senderId = default(Guid?), DateTimeOffset? scheduledDeliveryDateFrom = default(DateTimeOffset?), DateTimeOffset? scheduledDeliveryDateTo = default(DateTimeOffset?), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows an application to delete a message stored   by the Notifications Portal. If the message is awaiting delivery (Pending status),   due to a future scheduled delivery date, the application will be able to   delete the message. If the message is enroute through the service provider channels,   deletion will not be possible. Note that the method allows only for the deletion   of a single message, single recipient as identified by the provided Message   Unique Identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApiV1MessagesByMessageIdAsync(Guid messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows an application to delete a message stored   by the Notifications Portal. If the message is awaiting delivery (Pending status),   due to a future scheduled delivery date, the application will be able to   delete the message. If the message is enroute through the service provider channels,   deletion will not be possible. Note that the method allows only for the deletion   of a single message, single recipient as identified by the provided Message   Unique Identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApiV1MessagesByMessageIdWithHttpInfoAsync(Guid messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the delivery report (DLR) for the message as specified in the messageId parameter.   The delivery report will contain both the delivery status of the message as provided by   the service operator and the original submitted message details. For SMS message types,   this is the piece of information sent back by the mobile network provider containing whether   the message was successfully delivered or if the delivery has failed. This method will be used   by an application to determine the status of the submitted message at any point in time.   Note, that delivery reports are also provided through the provided Callback URL (Recommended   Method) when submitting a new message request. This allows an application to receive the   delivery report instantaneously when the status of a message has changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeliveryReport</returns>
        System.Threading.Tasks.Task<DeliveryReport> GetApiV1MessagesByMessageIdAsync(Guid messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the delivery report (DLR) for the message as specified in the messageId parameter.   The delivery report will contain both the delivery status of the message as provided by   the service operator and the original submitted message details. For SMS message types,   this is the piece of information sent back by the mobile network provider containing whether   the message was successfully delivered or if the delivery has failed. This method will be used   by an application to determine the status of the submitted message at any point in time.   Note, that delivery reports are also provided through the provided Callback URL (Recommended   Method) when submitting a new message request. This allows an application to receive the   delivery report instantaneously when the status of a message has changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeliveryReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeliveryReport>> GetApiV1MessagesByMessageIdWithHttpInfoAsync(Guid messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows application to update the details of an already submitted   message stored by the Notifications Portal. If the message is awaiting delivery (Pending status),   due to a future scheduled delivery date, the application will be able to update any   of the details submitted. If the message is enroute through the service provider channels,   an update will not be possible. Note that the method allows only for the update of a single   message, single recipient as identified by the provided Message Unique Identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="updateMessageRequest">Message object containing the new message details to be updated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageBatch</returns>
        System.Threading.Tasks.Task<MessageBatch> PutApiV1MessagesByMessageIdAsync(Guid messageId, UpdateMessageRequest updateMessageRequest = default(UpdateMessageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows application to update the details of an already submitted   message stored by the Notifications Portal. If the message is awaiting delivery (Pending status),   due to a future scheduled delivery date, the application will be able to update any   of the details submitted. If the message is enroute through the service provider channels,   an update will not be possible. Note that the method allows only for the update of a single   message, single recipient as identified by the provided Message Unique Identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="updateMessageRequest">Message object containing the new message details to be updated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageBatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageBatch>> PutApiV1MessagesByMessageIdWithHttpInfoAsync(Guid messageId, UpdateMessageRequest updateMessageRequest = default(UpdateMessageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows an application to update the Scheduled Delivery Date field   for a single message as specified by the messageId parameter. Note, a message   can only be updated if the message is awaiting delivery (Pending status).   If the message is enroute through the service provider channels, an update   will not be possible.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="updateScheduledMessageRequest">MessageSchedule object containing the Scheduled Delivery Date to be updated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageBatch</returns>
        System.Threading.Tasks.Task<MessageBatch> PutApiV1MessagesSchedulesByMessageIdAsync(Guid messageId, UpdateScheduledMessageRequest updateScheduledMessageRequest = default(UpdateScheduledMessageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows an application to update the Scheduled Delivery Date field   for a single message as specified by the messageId parameter. Note, a message   can only be updated if the message is awaiting delivery (Pending status).   If the message is enroute through the service provider channels, an update   will not be possible.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="updateScheduledMessageRequest">MessageSchedule object containing the Scheduled Delivery Date to be updated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageBatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageBatch>> PutApiV1MessagesSchedulesByMessageIdWithHttpInfoAsync(Guid messageId, UpdateScheduledMessageRequest updateScheduledMessageRequest = default(UpdateScheduledMessageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method allows an application to send a new Message Request.   The method supports various message types (currently SMS or Email) and   can be used by the application to send a message to either    individual or multiple recipients.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMessageRequest">MessageRequest object containing the message data to be sent. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboundMessageBatch</returns>
        System.Threading.Tasks.Task<InboundMessageBatch> PostApiV1MessagesAsync(CreateMessageRequest createMessageRequest = default(CreateMessageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method allows an application to send a new Message Request.   The method supports various message types (currently SMS or Email) and   can be used by the application to send a message to either    individual or multiple recipients.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMessageRequest">MessageRequest object containing the message data to be sent. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboundMessageBatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboundMessageBatch>> PostApiV1MessagesWithHttpInfoAsync(CreateMessageRequest createMessageRequest = default(CreateMessageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagesApi : IMessagesApiSync, IMessagesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessagesApi : IMessagesApi
    {
        private Mita.Notifications.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MessagesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MessagesApi(string basePath)
        {
            this.Configuration = Mita.Notifications.Client.Client.Configuration.MergeConfigurations(
                Mita.Notifications.Client.Client.GlobalConfiguration.Instance,
                new Mita.Notifications.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Mita.Notifications.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Mita.Notifications.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MessagesApi(Mita.Notifications.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Mita.Notifications.Client.Client.Configuration.MergeConfigurations(
                Mita.Notifications.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Mita.Notifications.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Mita.Notifications.Client.Client.Configuration.DefaultExceptionFactory;
        }
        
        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Mita.Notifications.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Mita.Notifications.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Mita.Notifications.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mita.Notifications.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mita.Notifications.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// This method allows for the retrieval of all messages stored by the system.   To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: Subject, MessageType, MessagePriority,   MessageStatus, ScheduledDeliveryDate (default), and DateCreated. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. (optional)</param>
        /// <param name="clientReference">Unique reference provided by the client application while submitting a new message. (optional)</param>
        /// <param name="messageType">Message Type. (optional)</param>
        /// <param name="messageStatus">Message Status. (optional)</param>
        /// <param name="senderId">Sender unqiue identifier. (optional)</param>
        /// <param name="scheduledDeliveryDateFrom">From date and time when the message is scheduled for delivery. (optional)</param>
        /// <param name="scheduledDeliveryDateTo">To date and time when the message is scheduled for delivery. (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>DeliveryReports</returns>
        public DeliveryReports GetApiV1Messages(Guid? batchId = default(Guid?), string clientReference = default(string), MessageType? messageType = default(MessageType?), MessageStatus? messageStatus = default(MessageStatus?), Guid? senderId = default(Guid?), DateTimeOffset? scheduledDeliveryDateFrom = default(DateTimeOffset?), DateTimeOffset? scheduledDeliveryDateTo = default(DateTimeOffset?), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?))
        {
            Mita.Notifications.Client.Client.ApiResponse<DeliveryReports> localVarResponse = GetApiV1MessagesWithHttpInfo(batchId, clientReference, messageType, messageStatus, senderId, scheduledDeliveryDateFrom, scheduledDeliveryDateTo, pageIndex, pageSize, sortField, sortDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of all messages stored by the system.   To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: Subject, MessageType, MessagePriority,   MessageStatus, ScheduledDeliveryDate (default), and DateCreated. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. (optional)</param>
        /// <param name="clientReference">Unique reference provided by the client application while submitting a new message. (optional)</param>
        /// <param name="messageType">Message Type. (optional)</param>
        /// <param name="messageStatus">Message Status. (optional)</param>
        /// <param name="senderId">Sender unqiue identifier. (optional)</param>
        /// <param name="scheduledDeliveryDateFrom">From date and time when the message is scheduled for delivery. (optional)</param>
        /// <param name="scheduledDeliveryDateTo">To date and time when the message is scheduled for delivery. (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <returns>ApiResponse of DeliveryReports</returns>
        public Mita.Notifications.Client.Client.ApiResponse<DeliveryReports> GetApiV1MessagesWithHttpInfo(Guid? batchId = default(Guid?), string clientReference = default(string), MessageType? messageType = default(MessageType?), MessageStatus? messageStatus = default(MessageStatus?), Guid? senderId = default(Guid?), DateTimeOffset? scheduledDeliveryDateFrom = default(DateTimeOffset?), DateTimeOffset? scheduledDeliveryDateTo = default(DateTimeOffset?), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "BatchId", batchId));
            }
            if (clientReference != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "ClientReference", clientReference));
            }
            if (messageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "MessageType", messageType));
            }
            if (messageStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "MessageStatus", messageStatus));
            }
            if (senderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SenderId", senderId));
            }
            if (scheduledDeliveryDateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "ScheduledDeliveryDateFrom", scheduledDeliveryDateFrom));
            }
            if (scheduledDeliveryDateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "ScheduledDeliveryDateTo", scheduledDeliveryDateTo));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (sortField != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortField", sortField));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DeliveryReports>("/api/v1/messages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1Messages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows for the retrieval of all messages stored by the system.   To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: Subject, MessageType, MessagePriority,   MessageStatus, ScheduledDeliveryDate (default), and DateCreated. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. (optional)</param>
        /// <param name="clientReference">Unique reference provided by the client application while submitting a new message. (optional)</param>
        /// <param name="messageType">Message Type. (optional)</param>
        /// <param name="messageStatus">Message Status. (optional)</param>
        /// <param name="senderId">Sender unqiue identifier. (optional)</param>
        /// <param name="scheduledDeliveryDateFrom">From date and time when the message is scheduled for delivery. (optional)</param>
        /// <param name="scheduledDeliveryDateTo">To date and time when the message is scheduled for delivery. (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeliveryReports</returns>
        public async System.Threading.Tasks.Task<DeliveryReports> GetApiV1MessagesAsync(Guid? batchId = default(Guid?), string clientReference = default(string), MessageType? messageType = default(MessageType?), MessageStatus? messageStatus = default(MessageStatus?), Guid? senderId = default(Guid?), DateTimeOffset? scheduledDeliveryDateFrom = default(DateTimeOffset?), DateTimeOffset? scheduledDeliveryDateTo = default(DateTimeOffset?), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<DeliveryReports> localVarResponse = await GetApiV1MessagesWithHttpInfoAsync(batchId, clientReference, messageType, messageStatus, senderId, scheduledDeliveryDateFrom, scheduledDeliveryDateTo, pageIndex, pageSize, sortField, sortDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows for the retrieval of all messages stored by the system.   To limit the amount of data returned, the application consuming the API has   the option to control the amount of data received using the available pagination   parameters. The PageSize parameter is used to limit the number of records   returned per page. If this is not provided, it defaults to a limit of 50 records.   The PageIndex parameter is used to navigate through pages. SortField and   SortDirection parameters are used to control the sorting of the results.   The supported sorting fields are as follows: Subject, MessageType, MessagePriority,   MessageStatus, ScheduledDeliveryDate (default), and DateCreated. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Unique reference generated by the Notifications Portal to identify a group of messages posted in bulk. (optional)</param>
        /// <param name="clientReference">Unique reference provided by the client application while submitting a new message. (optional)</param>
        /// <param name="messageType">Message Type. (optional)</param>
        /// <param name="messageStatus">Message Status. (optional)</param>
        /// <param name="senderId">Sender unqiue identifier. (optional)</param>
        /// <param name="scheduledDeliveryDateFrom">From date and time when the message is scheduled for delivery. (optional)</param>
        /// <param name="scheduledDeliveryDateTo">To date and time when the message is scheduled for delivery. (optional)</param>
        /// <param name="pageIndex">Page index (defaults to 1 if not provided). (optional)</param>
        /// <param name="pageSize">Page size (defaults to 50 if not provided). (optional)</param>
        /// <param name="sortField">Sort field (optional)</param>
        /// <param name="sortDirection">Sort direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeliveryReports)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<DeliveryReports>> GetApiV1MessagesWithHttpInfoAsync(Guid? batchId = default(Guid?), string clientReference = default(string), MessageType? messageType = default(MessageType?), MessageStatus? messageStatus = default(MessageStatus?), Guid? senderId = default(Guid?), DateTimeOffset? scheduledDeliveryDateFrom = default(DateTimeOffset?), DateTimeOffset? scheduledDeliveryDateTo = default(DateTimeOffset?), int? pageIndex = default(int?), int? pageSize = default(int?), string sortField = default(string), SortDirection? sortDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (batchId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "BatchId", batchId));
            }
            if (clientReference != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "ClientReference", clientReference));
            }
            if (messageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "MessageType", messageType));
            }
            if (messageStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "MessageStatus", messageStatus));
            }
            if (senderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SenderId", senderId));
            }
            if (scheduledDeliveryDateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "ScheduledDeliveryDateFrom", scheduledDeliveryDateFrom));
            }
            if (scheduledDeliveryDateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "ScheduledDeliveryDateTo", scheduledDeliveryDateTo));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (sortField != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortField", sortField));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mita.Notifications.Client.Client.ClientUtils.ParameterToMultiMap("", "SortDirection", sortDirection));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DeliveryReports>("/api/v1/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1Messages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to delete a message stored   by the Notifications Portal. If the message is awaiting delivery (Pending status),   due to a future scheduled delivery date, the application will be able to   delete the message. If the message is enroute through the service provider channels,   deletion will not be possible. Note that the method allows only for the deletion   of a single message, single recipient as identified by the provided Message   Unique Identifier. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <returns></returns>
        public void DeleteApiV1MessagesByMessageId(Guid messageId)
        {
            DeleteApiV1MessagesByMessageIdWithHttpInfo(messageId);
        }

        /// <summary>
        /// This method allows an application to delete a message stored   by the Notifications Portal. If the message is awaiting delivery (Pending status),   due to a future scheduled delivery date, the application will be able to   delete the message. If the message is enroute through the service provider channels,   deletion will not be possible. Note that the method allows only for the deletion   of a single message, single recipient as identified by the provided Message   Unique Identifier. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mita.Notifications.Client.Client.ApiResponse<Object> DeleteApiV1MessagesByMessageIdWithHttpInfo(Guid messageId)
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(messageId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/messages/{messageId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiV1MessagesByMessageId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to delete a message stored   by the Notifications Portal. If the message is awaiting delivery (Pending status),   due to a future scheduled delivery date, the application will be able to   delete the message. If the message is enroute through the service provider channels,   deletion will not be possible. Note that the method allows only for the deletion   of a single message, single recipient as identified by the provided Message   Unique Identifier. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApiV1MessagesByMessageIdAsync(Guid messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteApiV1MessagesByMessageIdWithHttpInfoAsync(messageId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This method allows an application to delete a message stored   by the Notifications Portal. If the message is awaiting delivery (Pending status),   due to a future scheduled delivery date, the application will be able to   delete the message. If the message is enroute through the service provider channels,   deletion will not be possible. Note that the method allows only for the deletion   of a single message, single recipient as identified by the provided Message   Unique Identifier. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<Object>> DeleteApiV1MessagesByMessageIdWithHttpInfoAsync(Guid messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(messageId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/messages/{messageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiV1MessagesByMessageId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the delivery report (DLR) for the message as specified in the messageId parameter.   The delivery report will contain both the delivery status of the message as provided by   the service operator and the original submitted message details. For SMS message types,   this is the piece of information sent back by the mobile network provider containing whether   the message was successfully delivered or if the delivery has failed. This method will be used   by an application to determine the status of the submitted message at any point in time.   Note, that delivery reports are also provided through the provided Callback URL (Recommended   Method) when submitting a new message request. This allows an application to receive the   delivery report instantaneously when the status of a message has changed. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <returns>DeliveryReport</returns>
        public DeliveryReport GetApiV1MessagesByMessageId(Guid messageId)
        {
            Mita.Notifications.Client.Client.ApiResponse<DeliveryReport> localVarResponse = GetApiV1MessagesByMessageIdWithHttpInfo(messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the delivery report (DLR) for the message as specified in the messageId parameter.   The delivery report will contain both the delivery status of the message as provided by   the service operator and the original submitted message details. For SMS message types,   this is the piece of information sent back by the mobile network provider containing whether   the message was successfully delivered or if the delivery has failed. This method will be used   by an application to determine the status of the submitted message at any point in time.   Note, that delivery reports are also provided through the provided Callback URL (Recommended   Method) when submitting a new message request. This allows an application to receive the   delivery report instantaneously when the status of a message has changed. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <returns>ApiResponse of DeliveryReport</returns>
        public Mita.Notifications.Client.Client.ApiResponse<DeliveryReport> GetApiV1MessagesByMessageIdWithHttpInfo(Guid messageId)
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(messageId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DeliveryReport>("/api/v1/messages/{messageId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1MessagesByMessageId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the delivery report (DLR) for the message as specified in the messageId parameter.   The delivery report will contain both the delivery status of the message as provided by   the service operator and the original submitted message details. For SMS message types,   this is the piece of information sent back by the mobile network provider containing whether   the message was successfully delivered or if the delivery has failed. This method will be used   by an application to determine the status of the submitted message at any point in time.   Note, that delivery reports are also provided through the provided Callback URL (Recommended   Method) when submitting a new message request. This allows an application to receive the   delivery report instantaneously when the status of a message has changed. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeliveryReport</returns>
        public async System.Threading.Tasks.Task<DeliveryReport> GetApiV1MessagesByMessageIdAsync(Guid messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<DeliveryReport> localVarResponse = await GetApiV1MessagesByMessageIdWithHttpInfoAsync(messageId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the delivery report (DLR) for the message as specified in the messageId parameter.   The delivery report will contain both the delivery status of the message as provided by   the service operator and the original submitted message details. For SMS message types,   this is the piece of information sent back by the mobile network provider containing whether   the message was successfully delivered or if the delivery has failed. This method will be used   by an application to determine the status of the submitted message at any point in time.   Note, that delivery reports are also provided through the provided Callback URL (Recommended   Method) when submitting a new message request. This allows an application to receive the   delivery report instantaneously when the status of a message has changed. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeliveryReport)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<DeliveryReport>> GetApiV1MessagesByMessageIdWithHttpInfoAsync(Guid messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(messageId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DeliveryReport>("/api/v1/messages/{messageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiV1MessagesByMessageId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows application to update the details of an already submitted   message stored by the Notifications Portal. If the message is awaiting delivery (Pending status),   due to a future scheduled delivery date, the application will be able to update any   of the details submitted. If the message is enroute through the service provider channels,   an update will not be possible. Note that the method allows only for the update of a single   message, single recipient as identified by the provided Message Unique Identifier. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="updateMessageRequest">Message object containing the new message details to be updated. (optional)</param>
        /// <returns>MessageBatch</returns>
        public MessageBatch PutApiV1MessagesByMessageId(Guid messageId, UpdateMessageRequest updateMessageRequest = default(UpdateMessageRequest))
        {
            Mita.Notifications.Client.Client.ApiResponse<MessageBatch> localVarResponse = PutApiV1MessagesByMessageIdWithHttpInfo(messageId, updateMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows application to update the details of an already submitted   message stored by the Notifications Portal. If the message is awaiting delivery (Pending status),   due to a future scheduled delivery date, the application will be able to update any   of the details submitted. If the message is enroute through the service provider channels,   an update will not be possible. Note that the method allows only for the update of a single   message, single recipient as identified by the provided Message Unique Identifier. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="updateMessageRequest">Message object containing the new message details to be updated. (optional)</param>
        /// <returns>ApiResponse of MessageBatch</returns>
        public Mita.Notifications.Client.Client.ApiResponse<MessageBatch> PutApiV1MessagesByMessageIdWithHttpInfo(Guid messageId, UpdateMessageRequest updateMessageRequest = default(UpdateMessageRequest))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            localVarRequestOptions.Data = updateMessageRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<MessageBatch>("/api/v1/messages/{messageId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutApiV1MessagesByMessageId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows application to update the details of an already submitted   message stored by the Notifications Portal. If the message is awaiting delivery (Pending status),   due to a future scheduled delivery date, the application will be able to update any   of the details submitted. If the message is enroute through the service provider channels,   an update will not be possible. Note that the method allows only for the update of a single   message, single recipient as identified by the provided Message Unique Identifier. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="updateMessageRequest">Message object containing the new message details to be updated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageBatch</returns>
        public async System.Threading.Tasks.Task<MessageBatch> PutApiV1MessagesByMessageIdAsync(Guid messageId, UpdateMessageRequest updateMessageRequest = default(UpdateMessageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<MessageBatch> localVarResponse = await PutApiV1MessagesByMessageIdWithHttpInfoAsync(messageId, updateMessageRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows application to update the details of an already submitted   message stored by the Notifications Portal. If the message is awaiting delivery (Pending status),   due to a future scheduled delivery date, the application will be able to update any   of the details submitted. If the message is enroute through the service provider channels,   an update will not be possible. Note that the method allows only for the update of a single   message, single recipient as identified by the provided Message Unique Identifier. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="updateMessageRequest">Message object containing the new message details to be updated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageBatch)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<MessageBatch>> PutApiV1MessagesByMessageIdWithHttpInfoAsync(Guid messageId, UpdateMessageRequest updateMessageRequest = default(UpdateMessageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            localVarRequestOptions.Data = updateMessageRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MessageBatch>("/api/v1/messages/{messageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutApiV1MessagesByMessageId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to update the Scheduled Delivery Date field   for a single message as specified by the messageId parameter. Note, a message   can only be updated if the message is awaiting delivery (Pending status).   If the message is enroute through the service provider channels, an update   will not be possible. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="updateScheduledMessageRequest">MessageSchedule object containing the Scheduled Delivery Date to be updated. (optional)</param>
        /// <returns>MessageBatch</returns>
        public MessageBatch PutApiV1MessagesSchedulesByMessageId(Guid messageId, UpdateScheduledMessageRequest updateScheduledMessageRequest = default(UpdateScheduledMessageRequest))
        {
            Mita.Notifications.Client.Client.ApiResponse<MessageBatch> localVarResponse = PutApiV1MessagesSchedulesByMessageIdWithHttpInfo(messageId, updateScheduledMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows an application to update the Scheduled Delivery Date field   for a single message as specified by the messageId parameter. Note, a message   can only be updated if the message is awaiting delivery (Pending status).   If the message is enroute through the service provider channels, an update   will not be possible. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="updateScheduledMessageRequest">MessageSchedule object containing the Scheduled Delivery Date to be updated. (optional)</param>
        /// <returns>ApiResponse of MessageBatch</returns>
        public Mita.Notifications.Client.Client.ApiResponse<MessageBatch> PutApiV1MessagesSchedulesByMessageIdWithHttpInfo(Guid messageId, UpdateScheduledMessageRequest updateScheduledMessageRequest = default(UpdateScheduledMessageRequest))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            localVarRequestOptions.Data = updateScheduledMessageRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<MessageBatch>("/api/v1/messages/{messageId}/schedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutApiV1MessagesSchedulesByMessageId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to update the Scheduled Delivery Date field   for a single message as specified by the messageId parameter. Note, a message   can only be updated if the message is awaiting delivery (Pending status).   If the message is enroute through the service provider channels, an update   will not be possible. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="updateScheduledMessageRequest">MessageSchedule object containing the Scheduled Delivery Date to be updated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageBatch</returns>
        public async System.Threading.Tasks.Task<MessageBatch> PutApiV1MessagesSchedulesByMessageIdAsync(Guid messageId, UpdateScheduledMessageRequest updateScheduledMessageRequest = default(UpdateScheduledMessageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<MessageBatch> localVarResponse = await PutApiV1MessagesSchedulesByMessageIdWithHttpInfoAsync(messageId, updateScheduledMessageRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows an application to update the Scheduled Delivery Date field   for a single message as specified by the messageId parameter. Note, a message   can only be updated if the message is awaiting delivery (Pending status).   If the message is enroute through the service provider channels, an update   will not be possible. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message unique identifier.</param>
        /// <param name="updateScheduledMessageRequest">MessageSchedule object containing the Scheduled Delivery Date to be updated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageBatch)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<MessageBatch>> PutApiV1MessagesSchedulesByMessageIdWithHttpInfoAsync(Guid messageId, UpdateScheduledMessageRequest updateScheduledMessageRequest = default(UpdateScheduledMessageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", Mita.Notifications.Client.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            localVarRequestOptions.Data = updateScheduledMessageRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MessageBatch>("/api/v1/messages/{messageId}/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutApiV1MessagesSchedulesByMessageId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to send a new Message Request.   The method supports various message types (currently SMS or Email) and   can be used by the application to send a message to either    individual or multiple recipients. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMessageRequest">MessageRequest object containing the message data to be sent. (optional)</param>
        /// <returns>InboundMessageBatch</returns>
        public InboundMessageBatch PostApiV1Messages(CreateMessageRequest createMessageRequest = default(CreateMessageRequest))
        {
            Mita.Notifications.Client.Client.ApiResponse<InboundMessageBatch> localVarResponse = PostApiV1MessagesWithHttpInfo(createMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows an application to send a new Message Request.   The method supports various message types (currently SMS or Email) and   can be used by the application to send a message to either    individual or multiple recipients. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMessageRequest">MessageRequest object containing the message data to be sent. (optional)</param>
        /// <returns>ApiResponse of InboundMessageBatch</returns>
        public Mita.Notifications.Client.Client.ApiResponse<InboundMessageBatch> PostApiV1MessagesWithHttpInfo(CreateMessageRequest createMessageRequest = default(CreateMessageRequest))
        {
            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createMessageRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<InboundMessageBatch>("/api/v1/messages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiV1Messages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method allows an application to send a new Message Request.   The method supports various message types (currently SMS or Email) and   can be used by the application to send a message to either    individual or multiple recipients. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMessageRequest">MessageRequest object containing the message data to be sent. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboundMessageBatch</returns>
        public async System.Threading.Tasks.Task<InboundMessageBatch> PostApiV1MessagesAsync(CreateMessageRequest createMessageRequest = default(CreateMessageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mita.Notifications.Client.Client.ApiResponse<InboundMessageBatch> localVarResponse = await PostApiV1MessagesWithHttpInfoAsync(createMessageRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method allows an application to send a new Message Request.   The method supports various message types (currently SMS or Email) and   can be used by the application to send a message to either    individual or multiple recipients. 
        /// </summary>
        /// <exception cref="Mita.Notifications.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMessageRequest">MessageRequest object containing the message data to be sent. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboundMessageBatch)</returns>
        public async System.Threading.Tasks.Task<Mita.Notifications.Client.Client.ApiResponse<InboundMessageBatch>> PostApiV1MessagesWithHttpInfoAsync(CreateMessageRequest createMessageRequest = default(CreateMessageRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mita.Notifications.Client.Client.RequestOptions localVarRequestOptions = new Mita.Notifications.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };


            var localVarContentType = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Mita.Notifications.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createMessageRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InboundMessageBatch>("/api/v1/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApiV1Messages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
