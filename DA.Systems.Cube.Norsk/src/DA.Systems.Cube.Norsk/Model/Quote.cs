/*
 * Norsk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: helpdesk@norsk-global.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DA.Systems.Cube.Norsk.Client.FileParameter;
using OpenAPIDateConverter = DA.Systems.Cube.Norsk.Client.OpenAPIDateConverter;

namespace DA.Systems.Cube.Norsk.Model
{
    /// <summary>
    /// Quote
    /// </summary>
    [DataContract(Name = "Quote")]
    public class Quote : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Quote" /> class.
        /// </summary>
        /// <param name="serviceName">serviceName.</param>
        /// <param name="serviceCode">serviceCode.</param>
        /// <param name="transitTime">transitTime.</param>
        /// <param name="chargeableWeight">chargeableWeight.</param>
        /// <param name="costs">costs.</param>
        public Quote(string serviceName = default(string), string serviceCode = default(string), string transitTime = default(string), double chargeableWeight = default(double), List<QuoteCost> costs = default(List<QuoteCost>))
        {
            ServiceName = serviceName;
            ServiceCode = serviceCode;
            TransitTime = transitTime;
            ChargeableWeight = chargeableWeight;
            Costs = costs;
        }

        /// <summary>
        /// Gets or Sets ServiceName
        /// </summary>
        [DataMember(Name = "ServiceName", EmitDefaultValue = true)]
        public string ServiceName { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCode
        /// </summary>
        [DataMember(Name = "ServiceCode", EmitDefaultValue = true)]
        public string ServiceCode { get; set; }

        /// <summary>
        /// Gets or Sets TransitTime
        /// </summary>
        [DataMember(Name = "TransitTime", EmitDefaultValue = true)]
        public string TransitTime { get; set; }

        /// <summary>
        /// Gets or Sets ChargeableWeight
        /// </summary>
        [DataMember(Name = "ChargeableWeight", EmitDefaultValue = true)]
        public double ChargeableWeight { get; set; }

        /// <summary>
        /// Gets or Sets BaseCost
        /// </summary>
        [DataMember(Name = "BaseCost", EmitDefaultValue = true)]
        public double BaseCost { get; private set; }

        /// <summary>
        /// Returns false as BaseCost should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBaseCost()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets FuelCost
        /// </summary>
        [DataMember(Name = "FuelCost", EmitDefaultValue = true)]
        public double FuelCost { get; private set; }

        /// <summary>
        /// Returns false as FuelCost should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFuelCost()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TotalCost
        /// </summary>
        [DataMember(Name = "TotalCost", EmitDefaultValue = true)]
        public double TotalCost { get; private set; }

        /// <summary>
        /// Returns false as TotalCost should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalCost()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Costs
        /// </summary>
        [DataMember(Name = "Costs", EmitDefaultValue = true)]
        public List<QuoteCost> Costs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Quote {\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  ServiceCode: ").Append(ServiceCode).Append("\n");
            sb.Append("  TransitTime: ").Append(TransitTime).Append("\n");
            sb.Append("  ChargeableWeight: ").Append(ChargeableWeight).Append("\n");
            sb.Append("  BaseCost: ").Append(BaseCost).Append("\n");
            sb.Append("  FuelCost: ").Append(FuelCost).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  Costs: ").Append(Costs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
